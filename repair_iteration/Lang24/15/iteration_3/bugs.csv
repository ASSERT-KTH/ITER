bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(chars  ==  null  ||  str.length  ==  0)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null  ||  str.length  ==  0)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  str.length  ==  0)  {  return  false;  }	  if(str    ==    null    ||    chars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
2	[BUG]  [BUGGY]  if(str  ==  null  ||  chars.length!=  0)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null  ||  chars.length!=  0)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  chars.length!=  0)  {  return  false;  }	  if(str    ==    null    ||    chars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
3	[BUG]  [BUGGY]  if(!allowSigns  &&  chars.length  <  2)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(!allowSigns  &&  chars.length  <  2)  {  return  false;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns  &&  chars.length  <  2)  {  return  false;  }	  if(!allowSigns    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	68	None	replace
4	[BUG]  [BUGGY]  if(!allowSigns  ||  str.length  <  2)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(!allowSigns  ||  str.length  <  2)  {  return  false;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns  ||  str.length  <  2)  {  return  false;  }	  if(!allowSigns    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	68	None	replace
5	[BUG]  [BUGGY]  if(!allowSigns  ||  chars.length  <  1)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(!allowSigns  ||  chars.length  <  1)  {  return  false;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns  ||  chars.length  <  1)  {  return  false;  }	  if(!allowSigns    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	68	None	replace
6	[BUG]  [BUGGY]  if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==	  if(str    ==    null)    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    	non-compiled	[CE]  not  a  statement	45	None	replace
7	[BUG]  [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars	  if(str    ==    null)    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    	non-compiled	[CE]  not  a  statement	45	None	replace
8	[BUG]  [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]!=  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]!=  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]!=	  if(str    ==    null)    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    	non-compiled	[CE]  not  a  statement	45	None	replace
9	[BUG]  [BUGGY]  ||!allowSigns)  {  return  true;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  ||!allowSigns)  {  return  true;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	||!allowSigns)  {  return  true;  }	  ||!allowSigns)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
10	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  true  :  false;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  true  :  false;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  true  :  false;	  return(chars[0]    ==    '-'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	17	None	replace
11	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[0]  ==  '.'  ||  chars[1]  ==  '+');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[0]  ==  '.'  ||  chars[1]  ==  '+');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[0]  ==  '.'  ||  chars[1]  ==  '+');	  return(chars[0]    ==    '-'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	17	None	replace
12	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[0]  ==  '.'  ||  chars[1]  ==  '/');  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[0]  ==  '.'  ||  chars[1]  ==  '/');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[0]  ==  '.'  ||  chars[1]  ==  '/');	  return(chars[0]    ==    '-'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	17	None	replace
13	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  >=  0)  {  return  true;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null  ||  str.length()  >=  0)  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()  >=  0)  {  return  true;  }	  if(str    ==    null    ||    str.length()!=    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	29	None	replace
14	[BUG]  [BUGGY]  return(chars  ==  null)&&(str.length!=  0);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars  ==  null)&&(str.length!=  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars  ==  null)&&(str.length!=  0);	  return(str    ==    null)&&(chars.length!=    0);    	non-compiled	[CE]  not  a  statement	72	None	replace
15	[BUG]  [BUGGY]  return(chars  ==  null)&&(sz!=  0);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars  ==  null)&&(sz!=  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars  ==  null)&&(sz!=  0);	  return(str    ==    null)&&(chars.length!=    0);    	non-compiled	[CE]  not  a  statement	72	None	replace
16	[BUG]  [BUGGY]  return(chars  ==  null)&&(chars.length!=  0);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars  ==  null)&&(chars.length!=  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars  ==  null)&&(chars.length!=  0);	  return(str    ==    null)&&(chars.length!=    0);    	non-compiled	[CE]  not  a  statement	72	None	replace
17	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(i);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.getChars(i);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.getChars(i);	  char[]    chars    =    str.getChars();    	non-compiled	[CE]  not  a  statement	36	None	replace
18	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(intValue);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.getChars(intValue);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.getChars(intValue);	  char[]    chars    =    str.getChars();    	non-compiled	[CE]  not  a  statement	36	None	replace
19	[BUG]  [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+',  sz);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+',  sz);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+',  sz);	  return(chars.length    >    0)&&(chars[0]    ==    '-'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	25	None	replace
20	[BUG]  [BUGGY]  return(chars.length  >  1)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  >  1)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  >  1)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');	  return(chars.length    >    0)&&(chars[0]    ==    '-'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	25	None	replace
21	[BUG]  [BUGGY]  return(sz  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(sz  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(sz  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');	  return(chars.length    >    0)&&(chars[0]    ==    '-'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	25	None	replace
22	[BUG]  [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  ':')||(chars[1]  ==  '+')||(chars[1]  ==  '-')||  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  ':')||(chars[1]  ==  '+')||(chars[1]  ==  '-')||  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  ':')||(chars[1]  ==  '+')||(chars[1]  ==  '-')||	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    ':')||(chars[1]    ==    '+')||(chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	58	None	replace
23	[BUG]  [BUGGY]  return(chars.length  ==  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  ':')&&(chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  ==  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  ':')&&(chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  ==  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  ':')&&(chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    ':')||(chars[1]    ==    '+')||(chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	58	None	replace
24	[BUG]  [BUGGY]  return(str  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  ':')||(chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  ':')||(chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  ':')||(chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    ':')||(chars[1]    ==    '+')||(chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	58	None	replace
25	[BUG]  [BUGGY]  return(chars  ==  null)||(chars.length()!=  0);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars  ==  null)||(chars.length()!=  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars  ==  null)||(chars.length()!=  0);	  return(str    ==    null)||(chars.length()!=    0);    	non-compiled	[CE]  not  a  statement	47	None	replace
26	[BUG]  [BUGGY]  return(chars  ==  null)&&(chars.length()!=  0);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars  ==  null)&&(chars.length()!=  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars  ==  null)&&(chars.length()!=  0);	  return(str    ==    null)||(chars.length()!=    0);    	non-compiled	[CE]  not  a  statement	47	None	replace
27	[BUG]  [BUGGY]  return(str  ==  null)?  true  :  str.charAt(0);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  true  :  str.charAt(0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  true  :  str.charAt(0);	  return(str    ==    null)?    false    :    str.charAt(0);    	non-compiled	[CE]  not  a  statement	56	None	replace
28	[BUG]  [BUGGY]  return(str  ==  null)?  true  :  str.toString();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  true  :  str.toString();  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  true  :  str.toString();	  return(str    ==    null)?    false    :    str.toString();    	non-compiled	[CE]  not  a  statement	76	None	replace
29	[BUG]  [BUGGY]  return(str!=  null)?  false  :  str.toString();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str!=  null)?  false  :  str.toString();  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str!=  null)?  false  :  str.toString();	  return(str    ==    null)?    false    :    str.toString();    	non-compiled	[CE]  not  a  statement	76	None	replace
30	[BUG]  [BUGGY]  if(chars.length()!=  0)  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars.length()!=  0)  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars.length()!=  0)  {  return  true;  }	  if(str.length()!=    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	51	None	replace
31	[BUG]  [BUGGY]  if(chars.length()  ==  0)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars.length()  ==  0)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars.length()  ==  0)  {  return  false;  }	  if(str.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
32	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    '+')||(chars[1]    ==    '-')||    chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	60	None	replace
33	[BUG]  [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars[1]  ==  '-')||  chars!=  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars[1]  ==  '-')||  chars!=  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars[1]  ==  '-')||  chars!=	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    '+')||(chars[1]    ==    '-')||    chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	60	None	replace
34	[BUG]  [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars[1]  ==  '-')||  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars[1]  ==  '-')||  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars[1]  ==  '-')||	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    '+')||(chars[1]    ==    '-')||    chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	60	None	replace
35	[BUG]  [BUGGY]  if(!allowSigns)return  false;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(!allowSigns)return  false;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns)return  false;	  if(!allowSigns)return    true;    	non-compiled	[CE]  not  a  statement	54	None	replace
36	[BUG]  [BUGGY]  if(chars.length  ==  0)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars.length  ==  0)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars.length  ==  0)  {  return  false;  }	  if(chars.length    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	69	None	replace
37	[BUG]  [BUGGY]  if(chars.length  ==  0  ||  chars.length  ==  0)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars.length  ==  0  ||  chars.length  ==  0)  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars.length  ==  0  ||  chars.length  ==  0)  {  return  true;  }	  if(chars.length    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	69	None	replace
38	[BUG]  [BUGGY]  if(str.length  ==  0)  {  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str.length  ==  0)  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str.length  ==  0)  {  return  true;  }	  if(chars.length    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	69	None	replace
39	[BUG]  [BUGGY]  return(str  ==  null)?  true  :  str.length()  >  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  true  :  str.length()  >  1;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  true  :  str.length()  >  1;	  return(str    ==    null)?    true    :    str.length()    >    0;    	non-compiled	[CE]  not  a  statement	64	None	replace
40	[BUG]  [BUGGY]  if(!allowSigns  &&  hasExp)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(!allowSigns  &&  hasExp)  {  return  false;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns  &&  hasExp)  {  return  false;  }	  if(!allowSigns    ||    hasExp)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
41	[BUG]  [BUGGY]  if(!allowSigns  ||  foundDigit)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(!allowSigns  ||  foundDigit)  {  return  false;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns  ||  foundDigit)  {  return  false;  }	  if(!allowSigns    ||    hasExp)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
42	[BUG]  [BUGGY]  if(hasDecPoint  ||!allowSigns  ||  hasExp)  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(hasDecPoint  ||!allowSigns  ||  hasExp)  {  return  false;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(hasDecPoint  ||!allowSigns  ||  hasExp)  {  return  false;  }	  if(!allowSigns    ||    hasExp)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
43	[BUG]  [BUGGY]  if(!allowSigns  ||  foundDigit)return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(!allowSigns  ||  foundDigit)return  false;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns  ||  foundDigit)return  false;  }	  if(!allowSigns    ||    hasExp)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
44	[BUG]  [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+	  if(str    ==    null)    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
45	[BUG]  [BUGGY]  if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+	  if(str    ==    null)    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
46	[BUG]  [BUGGY]  char[]  chars  =  str.toString();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toString();  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toString();	  char[]    chars    =    str.toCharArray()    +    1;    	non-compiled	[CE]  not  a  statement	41	None	replace
47	[BUG]  [BUGGY]  return(sz  ==  '-'  ||  chars[start]  ==  '+')?  1  :  0;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(sz  ==  '-'  ||  chars[start]  ==  '+')?  1  :  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(sz  ==  '-'  ||  chars[start]  ==  '+')?  1  :  0;	  return(chars[0]    ==    '-'    ||    chars[start]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	74	None	replace
48	[BUG]  [BUGGY]  return(str  ==  '-'  ||  chars[start]  ==  '+')?  1  :  0;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  '-'  ||  chars[start]  ==  '+')?  1  :  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  '-'  ||  chars[start]  ==  '+')?  1  :  0;	  return(chars[0]    ==    '-'    ||    chars[start]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	74	None	replace
49	[BUG]  [BUGGY]  chars  =  str.toCharArray();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  chars  =  str.toCharArray();  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	chars  =  str.toCharArray();	  String    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	35	None	replace
50	[BUG]  [BUGGY]  String  chars  =  str.toCharArray()  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  String  chars  =  str.toCharArray()  +  1;  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	String  chars  =  str.toCharArray()  +  1;	  String    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	35	None	replace
51	[BUG]  [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '+')?  2  :  0;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '+')?  2  :  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[1]  ==  '-'  ||  chars[1]  ==  '+')?  2  :  0;	  return(chars[1]    ==    '-'    ||    chars[1]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	2	None	replace
52	[BUG]  [BUGGY]  return(str  ==  '-'  ||  chars[1]  ==  '+')?  1  :  0;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  '-'  ||  chars[1]  ==  '+')?  1  :  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  '-'  ||  chars[1]  ==  '+')?  1  :  0;	  return(chars[1]    ==    '-'    ||    chars[1]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	2	None	replace
53	[BUG]  [BUGGY]  return(str  ==  null)&&(chars.length()  ==  0);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)&&(chars.length()  ==  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)&&(chars.length()  ==  0);	  return(str    ==    null)&&(chars.length()!=    0);    	non-compiled	[CE]  not  a  statement	6	None	replace
54	[BUG]  [BUGGY]  return(chars!=  null)&&(chars.length()!=  0);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars!=  null)&&(chars.length()!=  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars!=  null)&&(chars.length()!=  0);	  return(str    ==    null)&&(chars.length()!=    0);    	non-compiled	[CE]  not  a  statement	6	None	replace
55	[BUG]  [BUGGY]  return(str  ==  '-'  ||  chars[0]  ==  '+')?  1  :  0;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  '-'  ||  chars[0]  ==  '+')?  1  :  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  '-'  ||  chars[0]  ==  '+')?  1  :  0;	  return(chars[0]    ==    '-'    ||    chars[0]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	3	None	replace
56	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-',  sz);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-',  sz);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '-',  sz);	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-',    sz);    	non-compiled	[CE]  not  a  statement	19	None	replace
57	[BUG]  [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '-',  sz);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '-',  sz);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[1]  ==  '-'  ||  chars[1]  ==  '-',  sz);	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-',    sz);    	non-compiled	[CE]  not  a  statement	19	None	replace
58	[BUG]  [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-',  sz  +  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-',  sz  +  1);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[start]  ==  '-'  ||  chars[start]  ==  '-',  sz  +  1);	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-',    sz);    	non-compiled	[CE]  not  a  statement	19	None	replace
59	[BUG]  [BUGGY]  if(chars.length()!=  0)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars.length()!=  0)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars.length()!=  0)  {  return  false;  }	  if(str.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	52	None	replace
60	[BUG]  [BUGGY]  if(str.length()!=  0  ||  str.charAt(start)  ==  '-')  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str.length()!=  0  ||  str.charAt(start)  ==  '-')  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str.length()!=  0  ||  str.charAt(start)  ==  '-')  {  return  false;  }	  if(str.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	52	None	replace
61	[BUG]  [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+',  sz);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+',  sz);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+',  sz);	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	26	None	replace
62	[BUG]  [BUGGY]  return(sz  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(sz  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(sz  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+');	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	26	None	replace
63	[BUG]  [BUGGY]  return(chars.length  >  1)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+');  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  >  1)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  >  1)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+');	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	26	None	replace
64	[BUG]  [BUGGY]  return(str  ==  null)&&(str.length()  ==  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)&&(str.length()  ==  1);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)&&(str.length()  ==  1);	  return(str    ==    null)&&(str.length()    ==    0);    	non-compiled	[CE]  not  a  statement	4	None	replace
65	[BUG]  [BUGGY]  return(str  ==  null)&&(sz.length()  ==  0);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)&&(sz.length()  ==  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)&&(sz.length()  ==  0);	  return(str    ==    null)&&(str.length()    ==    0);    	non-compiled	[CE]  not  a  statement	4	None	replace
66	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray();  int  i  =  start  +  1;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray();  int  i  =  start  +  1;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray();  int  i  =  start  +  1;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }	  char[]    chars    =    str.toCharArray();    int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
67	[BUG]  [BUGGY]  String  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  String  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	String  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }	  char[]    chars    =    str.toCharArray();    int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
68	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[1]  ==  '.');  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[1]  ==  '.');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[1]  ==  '.');	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-')&&(chars[start]    ==    '.');    	non-compiled	[CE]  not  a  statement	66	None	replace
69	[BUG]  [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[1]  ==  '.');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[1]  ==  '.');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[1]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[1]  ==  '.');	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-')&&(chars[start]    ==    '.');    	non-compiled	[CE]  not  a  statement	66	None	replace
70	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[0]  ==  '-')&&(chars[1]  ==  '.');  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[0]  ==  '-')&&(chars[1]  ==  '.');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[0]  ==  '-')&&(chars[1]  ==  '.');	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-')&&(chars[start]    ==    '.');    	non-compiled	[CE]  not  a  statement	66	None	replace
71	[BUG]  [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-'  ||  chars[1]  ==  '-')||  chars!=  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-'  ||  chars[1]  ==  '-')||  chars!=  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-'  ||  chars[1]  ==  '-')||  chars!=	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    '+')||(chars[1]    ==    '-'    ||    chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	59	None	replace
72	[BUG]  [BUGGY]  return(str  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-'  ||  chars[1]  ==  '-')||  chars  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-'  ||  chars[1]  ==  '-')||  chars  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-'  ||  chars[1]  ==  '-')||  chars	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    '+')||(chars[1]    ==    '-'    ||    chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	59	None	replace
73	[BUG]  [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-'  ||  chars[1]  ==  '-')||  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-'  ||  chars[1]  ==  '-')||  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  ==  0)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-'  ||  chars[1]  ==  '-')||	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    '+')||(chars[1]    ==    '-'    ||    chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	59	None	replace
74	[BUG]  [BUGGY]  return(chars[0]!=  '-'  ||  chars[1]  ==  '-');  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]!=  '-'  ||  chars[1]  ==  '-');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]!=  '-'  ||  chars[1]  ==  '-');	  return(chars[0]    ==    '-'    ||    chars[0]    ==    '-');    	non-compiled	[CE]  not  a  statement	57	None	replace
75	[BUG]  [BUGGY]  return(str.length()  ==  0  ||  chars[0]  ==  '-');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str.length()  ==  0  ||  chars[0]  ==  '-');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str.length()  ==  0  ||  chars[0]  ==  '-');	  return(chars[0]    ==    '-'    ||    chars[0]    ==    '-');    	non-compiled	[CE]  not  a  statement	57	None	replace
76	[BUG]  [BUGGY]  if(!allowSigns)return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(!allowSigns)return  false;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns)return  false;  }	  if(!allowSigns)return    true;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
77	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true	  char[]    chars    =    str.toCharArray();    int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
78	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray();  int  i  =  start  +  1;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray();  int  i  =  start  +  1;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray();  int  i  =  start  +  1;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true;  }	  char[]    chars    =    str.toCharArray();    int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
79	[BUG]  [BUGGY]  if(str.length()  ==  0  ||  str.charAt(start)!=  '-')  {  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str.length()  ==  0  ||  str.charAt(start)!=  '-')  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str.length()  ==  0  ||  str.charAt(start)!=  '-')  {  return  true;  }	  if(str.length()    ==    0    ||    str.charAt(start)    ==    '-')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
80	[BUG]  [BUGGY]  if(str.length()  ==  0  ||  str.charAt(start  +  1)  ==  '-')  {  return  true;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str.length()  ==  0  ||  str.charAt(start  +  1)  ==  '-')  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str.length()  ==  0  ||  str.charAt(start  +  1)  ==  '-')  {  return  true;  }	  if(str.length()    ==    0    ||    str.charAt(start)    ==    '-')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
81	[BUG]  [BUGGY]  if(sz.length()  ==  0  ||  str.charAt(start)  ==  '-')  {  return  true;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(sz.length()  ==  0  ||  str.charAt(start)  ==  '-')  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(sz.length()  ==  0  ||  str.charAt(start)  ==  '-')  {  return  true;  }	  if(str.length()    ==    0    ||    str.charAt(start)    ==    '-')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
82	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray()  >  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray()  >  1;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.toCharArray()  >  1;	  return(str    ==    null)?    false    :    str.toCharArray()    >    0;    	non-compiled	[CE]  not  a  statement	50	None	replace
83	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray()  <  0;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray()  <  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.toCharArray()  <  0;	  return(str    ==    null)?    false    :    str.toCharArray()    >    0;    	non-compiled	[CE]  not  a  statement	50	None	replace
84	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray()  +  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray()  +  1;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.toCharArray()  +  1;	  return(str    ==    null)?    false    :    str.toCharArray()    >    0;    	non-compiled	[CE]  not  a  statement	50	None	replace
85	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.length()  +  2;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  false  :  str.length()  +  2;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.length()  +  2;	  return(str    ==    null)?    false    :    str.length()    >    2;    	non-compiled	[CE]  not  a  statement	10	None	replace
86	[BUG]  [BUGGY]  return(str  ==  null)?  true  :  str.length()  +  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  true  :  str.length()  +  1;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  true  :  str.length()  +  1;	  return(str    ==    null)?    true    :    str.length();    	non-compiled	[CE]  not  a  statement	38	None	replace
87	[BUG]  [BUGGY]  return(chars  ==  null)||(chars.length()  ==  0);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars  ==  null)||(chars.length()  ==  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars  ==  null)||(chars.length()  ==  0);	  return(str    ==    null)||(chars.length()    ==    0);    	non-compiled	[CE]  not  a  statement	44	None	replace
88	[BUG]  [BUGGY]  return(chars  ==  null)&&(chars.length()  ==  0);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars  ==  null)&&(chars.length()  ==  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars  ==  null)&&(chars.length()  ==  0);	  return(str    ==    null)||(chars.length()    ==    0);    	non-compiled	[CE]  not  a  statement	44	None	replace
89	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.toUpperCase();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  false  :  str.toUpperCase();  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.toUpperCase();	  return(str    ==    null)?    false    :    str.toLowerCase();    	non-compiled	[CE]  not  a  statement	75	None	replace
90	[BUG]  [BUGGY]  return(str  ==  null)?  true  :  str.toLowerCase();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  true  :  str.toLowerCase();  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  true  :  str.toLowerCase();	  return(str    ==    null)?    false    :    str.toLowerCase();    	non-compiled	[CE]  not  a  statement	75	None	replace
91	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.toLowerCase()  +  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  false  :  str.toLowerCase()  +  1;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.toLowerCase()  +  1;	  return(str    ==    null)?    false    :    str.toLowerCase();    	non-compiled	[CE]  not  a  statement	75	None	replace
92	[BUG]  [BUGGY]  return(sz  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(sz  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(sz  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	27	None	replace
93	[BUG]  [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-',  sz);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-',  sz);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-',  sz);	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	27	None	replace
94	[BUG]  [BUGGY]  return(chars.length  >  1)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  >  1)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  >  1)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	27	None	replace
95	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz.length()  ]);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz.length()  ]);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray(new  char[sz.length()  ]);	  char[]    chars    =    str.toCharArray(new    char[str.length()    ]);    	non-compiled	[CE]  not  a  statement	62	None	replace
96	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  -  1]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  -  1]);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray(new  char[str.length()  -  1]);	  char[]    chars    =    str.toCharArray(new    char[str.length()    ]);    	non-compiled	[CE]  not  a  statement	62	None	replace
97	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  +  1]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  +  1]);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray(new  char[str.length()  +  1]);	  char[]    chars    =    str.toCharArray(new    char[str.length()    ]);    	non-compiled	[CE]  not  a  statement	62	None	replace
98	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars!=  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars!=  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars!=	  if(chars[i]    ==    '.')    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars    	non-compiled	[CE]  not  a  statement	77	None	replace
99	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars!=  return  false;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars!=  return  false;  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars!=  return  false;	  if(chars[i]    ==    '.')    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars    	non-compiled	[CE]  not  a  statement	77	None	replace
100	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars!=  false)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars!=  false)  {  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars!=  false)  {	  if(chars[i]    ==    '.')    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars    	non-compiled	[CE]  not  a  statement	77	None	replace
101	[BUG]  [BUGGY]  return(str  ==  null)||(str.length()  ==  2);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)||(str.length()  ==  2);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)||(str.length()  ==  2);	  return(str    ==    null)||(str.length()    ==    1);    	non-compiled	[CE]  not  a  statement	11	None	replace
102	[BUG]  [BUGGY]  if(chars  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null)  {  return  false;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null)  {  return  false;  }	  if(str    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	46	None	replace
103	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[start]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[start]);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray(new  char[start]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  not  a  statement	63	None	replace
104	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray(new  char[sz  +  1]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  not  a  statement	63	None	replace
105	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[SHORT_MINUS_ONE]);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[SHORT_MINUS_ONE]);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray(new  char[SHORT_MINUS_ONE]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  not  a  statement	63	None	replace
106	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[1]);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[1]);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray(new  char[1]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  not  a  statement	63	None	replace
107	[BUG]  [BUGGY]  return(str!=  null)?  false  :  str.length();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str!=  null)?  false  :  str.length();  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str!=  null)?  false  :  str.length();	  return(str    ==    null)?    false    :    str.length()    +    1;    	non-compiled	[CE]  not  a  statement	37	None	replace
108	[BUG]  [BUGGY]  String  chars  =  this.str.toCharArray();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  String  chars  =  this.str.toCharArray();  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	String  chars  =  this.str.toCharArray();	  char[]    chars    =    this.str.toCharArray();    	non-compiled	[CE]  not  a  statement	34	None	replace
109	[BUG]  [BUGGY]  allowSigns  ||  str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  allowSigns  ||  str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	allowSigns  ||  str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(str    ==    null    ||    str.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	33	None	replace
110	[BUG]  [BUGGY]  while(str!=  null  ||  str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  while(str!=  null  ||  str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	while(str!=  null  ||  str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(str    ==    null    ||    str.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	33	None	replace
111	[BUG]  [BUGGY]  while(str!=  null  ||  str.length()  ==  0)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  while(str!=  null  ||  str.length()  ==  0)  {  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	while(str!=  null  ||  str.length()  ==  0)  {	  if(str    ==    null    ||    str.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	33	None	replace
112	[BUG]  [BUGGY]  return(str  ==  '-'  ||  chars[start]  ==  '-');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  '-'  ||  chars[start]  ==  '-');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  '-'  ||  chars[start]  ==  '-');	  return(chars[0]    ==    '-'    ||    chars[start]    ==    '-');    	non-compiled	[CE]  not  a  statement	67	None	replace
113	[BUG]  [BUGGY]  if(str.length()  >=  0)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str.length()  >=  0)  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str.length()  >=  0)  {  return  true;  }	  if(str.length()    <    =    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
114	[BUG]  [BUGGY]  char[]  chars  =  getChars(str,  start);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  getChars(str,  start);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  getChars(str,  start);	  char[]    chars    =    getChars(str);    	non-compiled	[CE]  not  a  statement	42	None	replace
115	[BUG]  [BUGGY]  char[]  chars  =  getChars(str.toCharArray());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  getChars(str.toCharArray());  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  getChars(str.toCharArray());	  char[]    chars    =    getChars(str);    	non-compiled	[CE]  not  a  statement	42	None	replace
116	[BUG]  [BUGGY]  char[]  chars  =  getChars(start,  str);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  getChars(start,  str);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  getChars(start,  str);	  char[]    chars    =    getChars(str);    	non-compiled	[CE]  not  a  statement	42	None	replace
117	[BUG]  [BUGGY]  char[]  chars  =  getChars(start);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  getChars(start);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  getChars(start);	  char[]    chars    =    getChars(str);    	non-compiled	[CE]  not  a  statement	42	None	replace
118	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length  <  1)  {  return  true;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	61	None	replace
119	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2  ||  chars.length  >  0)  {  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2  ||  chars.length  >  0)  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length  <  2  ||  chars.length  >  0)  {  return  true;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	61	None	replace
120	[BUG]  [BUGGY]  return(str  ==  null)?  true  :  str.toCharArray();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  true  :  str.toCharArray();  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  true  :  str.toCharArray();	  return(str    ==    null)?    false    :    str.toCharArray();    	non-compiled	[CE]  not  a  statement	55	None	replace
121	[BUG]  [BUGGY]  return(str!=  null)?  false  :  str.toCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str!=  null)?  false  :  str.toCharArray();  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str!=  null)?  false  :  str.toCharArray();	  return(str    ==    null)?    false    :    str.toCharArray();    	non-compiled	[CE]  not  a  statement	55	None	replace
122	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')?  2  :  0;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')?  2  :  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')?  2  :  0;	  return(chars[0]    ==    '-'    ||    chars[1]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	1	None	replace
123	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')?  3  :  0;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')?  3  :  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')?  3  :  0;	  return(chars[0]    ==    '-'    ||    chars[1]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	1	None	replace
124	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')?  1  :  0,  chars.length;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')?  1  :  0,  chars.length;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')?  1  :  0,  chars.length;	  return(chars[0]    ==    '-'    ||    chars[1]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	1	None	replace
125	[BUG]  [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '-',  0);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '-',  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[1]  ==  '-'  ||  chars[1]  ==  '-',  0);	  return(chars[1]    ==    '-'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	18	None	replace
126	[BUG]  [BUGGY]  return(chars[1]  ==  '-'  ||  chars[2]  ==  '-');  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[1]  ==  '-'  ||  chars[2]  ==  '-');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[1]  ==  '-'  ||  chars[2]  ==  '-');	  return(chars[1]    ==    '-'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	18	None	replace
127	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false	  char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    true    	non-compiled	[CE]  not  a  statement	49	None	replace
128	[BUG]  [BUGGY]  String  chars[]  =  str.toCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  String  chars[]  =  str.toCharArray();  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	String  chars[]  =  str.toCharArray();	  String    chars[]    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
129	[BUG]  [BUGGY]  String  chars[]  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  String  chars[]  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	String  chars[]  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true	  String    chars[]    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
130	[BUG]  [BUGGY]  return(str  ==  null  ||  str.length()!=  0);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null  ||  str.length()!=  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null  ||  str.length()!=  0);	  return(str    ==    null    ||    str.length()    ==    0);    	non-compiled	[CE]  not  a  statement	65	None	replace
131	[BUG]  [BUGGY]  return(str  ==  null  ||  str.length()  >=  0);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null  ||  str.length()  >=  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null  ||  str.length()  >=  0);	  return(str    ==    null    ||    str.length()    ==    0);    	non-compiled	[CE]  not  a  statement	65	None	replace
132	[BUG]  [BUGGY]  return(str  ==  null  ||  str.length()  ==  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null  ||  str.length()  ==  1);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null  ||  str.length()  ==  1);	  return(str    ==    null    ||    str.length()    ==    0);    	non-compiled	[CE]  not  a  statement	65	None	replace
133	[BUG]  [BUGGY]  return(str  ==  null)&&(str.length()  >  0);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)&&(str.length()  >  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)&&(str.length()  >  0);	  return(str    ==    null)&&(str.length()    >=    0);    	non-compiled	[CE]  not  a  statement	5	None	replace
134	[BUG]  [BUGGY]  int  chars[]  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  int  chars[]  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	int  chars[]  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }	  String    chars[]    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
135	[BUG]  [BUGGY]  char[]  chars  =  str.trim().toCharArray();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.trim().toCharArray();  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.trim().toCharArray();	  char[]    chars    =    str.trim();    	non-compiled	[CE]  not  a  statement	43	None	replace
136	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length  <  1)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
137	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  2)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null  ||  chars.length!=  2)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length!=  2)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
138	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2  ||  chars.length  >  0)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2  ||  chars.length  >  0)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length  <  2  ||  chars.length  >  0)  {  return  false;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
139	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()  ==  0)return  true;  }	  if(str    ==    null    ||    str.length()    ==    0)return    false;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
140	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)return  false;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)return  false;  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()  ==  0)return  false;	  if(str    ==    null    ||    str.length()    ==    0)return    false;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
141	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()!=  0)return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null  ||  str.length()!=  0)return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()!=  0)return  false;  }	  if(str    ==    null    ||    str.length()    ==    0)return    false;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
142	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+');  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '+');	  return(chars.length    >    0)&&(chars[0]    ==    '-'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	25	None	replace
143	[BUG]  [BUGGY]  return(str.length  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str.length  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str.length  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');	  return(chars.length    >    0)&&(chars[0]    ==    '-'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	25	None	replace
144	[BUG]  [BUGGY]  if(str  ==  null)  {  return  true;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null)  {  return  true;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null)  {  return  true;  }	  if(str    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	46	None	replace
145	[BUG]  [BUGGY]  char[]  chars  =  getChars();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  getChars();  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  getChars();	  char[]    chars    =    getChars(str);    	non-compiled	[CE]  not  a  statement	42	None	replace
146	[BUG]  [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '+')?  3  :  0;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '+')?  3  :  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[1]  ==  '-'  ||  chars[1]  ==  '+')?  3  :  0;	  return(chars[1]    ==    '-'    ||    chars[1]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	2	None	replace
147	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars!=  null  ||  chars.length  ==  0)  {  return  false;  }	  if(chars    ==    null    ||    chars.length!=    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
148	[BUG]  [BUGGY]  if(!allowSigns  ||  chars.length  <  2)  {  return  true;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(!allowSigns  ||  chars.length  <  2)  {  return  true;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns  ||  chars.length  <  2)  {  return  true;  }	  if(!allowSigns    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	68	None	replace
149	[BUG]  [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  true	  char[]    chars    =    str.toCharArray();    int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
150	[BUG]  [BUGGY]  if(chars.length!=  0)  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars.length!=  0)  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars.length!=  0)  {  return  true;  }	  if(chars.length    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	69	None	replace
151	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray().length  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray().length  +  1;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.toCharArray().length  +  1;	  return(str    ==    null)?    false    :    str.length()    +    1;    	non-compiled	[CE]  not  a  statement	37	None	replace
152	[BUG]  [BUGGY]  return(str  ==  '-'  ||  chars[0]  ==  '-');  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  '-'  ||  chars[0]  ==  '-');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  '-'  ||  chars[0]  ==  '-');	  return(chars[0]    ==    '-'    ||    chars[0]    ==    '-');    	non-compiled	[CE]  not  a  statement	57	None	replace
153	[BUG]  [BUGGY]  return(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '+'  ||  chars[1]  ==  '-');	  return(chars[0]    ==    '-'    ||    chars[0]    ==    '-');    	non-compiled	[CE]  not  a  statement	57	None	replace
154	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '	  if(chars[i]    ==    '.')    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars    	non-compiled	[CE]  not  a  statement	77	None	replace
155	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '+'  ||  chars!=  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '+'  ||  chars!=  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '+'  ||  chars!=	  if(chars[i]    ==    '.')    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars    	non-compiled	[CE]  not  a  statement	77	None	replace
156	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[0]  ==  '-',  sz);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[0]  ==  '-',  sz);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[0]  ==  '-',  sz);	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-',    sz);    	non-compiled	[CE]  not  a  statement	19	None	replace
157	[BUG]  [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-',  0);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-',  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[start]  ==  '-'  ||  chars[start]  ==  '-',  0);	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-',    sz);    	non-compiled	[CE]  not  a  statement	19	None	replace
158	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  <  0)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null  ||  str.length()  <  0)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()  <  0)  {  return  false;  }	  if(str    ==    null    ||    str.length()    <    =    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	40	None	replace
159	[BUG]  [BUGGY]  return(str  ==  null)&&(chars.length  ==  0);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)&&(chars.length  ==  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)&&(chars.length  ==  0);	  return(str    ==    null)&&(chars.length!=    0);    	non-compiled	[CE]  not  a  statement	72	None	replace
160	[BUG]  [BUGGY]  char[]  chars  =  str.substring(start,  start);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.substring(start,  start);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.substring(start,  start);	  char[]    chars    =    str.trim();    	non-compiled	[CE]  not  a  statement	43	None	replace
161	[BUG]  [BUGGY]  return(chars[0]  ==  '+'  ||  chars[1]  ==  '+');  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '+'  ||  chars[1]  ==  '+');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '+'  ||  chars[1]  ==  '+');	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	26	None	replace
162	[BUG]  [BUGGY]  return(str.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+');	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	26	None	replace
163	[BUG]  [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+',  chars[2]);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+',  chars[2]);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+',  chars[2]);	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	26	None	replace
164	[BUG]  [BUGGY]  return(str  ==  null  ||  chars.length()  ==  0);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null  ||  chars.length()  ==  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null  ||  chars.length()  ==  0);	  return(str    ==    null    ||    str.length()    ==    0);    	non-compiled	[CE]  not  a  statement	65	None	replace
165	[BUG]  [BUGGY]  return(str  ==  null  ||  str.length()  ==  0)&&  hasDecPoint;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null  ||  str.length()  ==  0)&&  hasDecPoint;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null  ||  str.length()  ==  0)&&  hasDecPoint;	  return(str    ==    null    ||    str.length()    ==    0);    	non-compiled	[CE]  not  a  statement	65	None	replace
166	[BUG]  [BUGGY]  char[]  chars  =  str.toCHARArray();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCHARArray();  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCHARArray();	  char[]    chars    =    str.toCharArray()    +    1;    	non-compiled	[CE]  not  a  statement	41	None	replace
167	[BUG]  [BUGGY]  Char[]  chars  =  str.toCharArray();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  Char[]  chars  =  str.toCharArray();  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	Char[]  chars  =  str.toCharArray();	  char[]    chars    =    str.toCharArray()    +    1;    	non-compiled	[CE]  not  a  statement	41	None	replace
168	[BUG]  [BUGGY]  return(str  ==  null)&&(chars.length  >  0);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)&&(chars.length  >  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)&&(chars.length  >  0);	  return(str    ==    null)&&(chars.length()!=    0);    	non-compiled	[CE]  not  a  statement	6	None	replace
169	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null  ||  str.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(str    ==    null    ||    str.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	33	None	replace
170	[BUG]  [BUGGY]  allowSigns  =  str  ==  null  ||  str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  allowSigns  =  str  ==  null  ||  str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	allowSigns  =  str  ==  null  ||  str.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(str    ==    null    ||    str.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	33	None	replace
171	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null  ||  str.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()  >=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(str    ==    null    ||    str.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	33	None	replace
172	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  2)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null  ||  chars.length!=  2)  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length!=  2)  {  return  true;  }	  if(chars    ==    null    ||    chars.length    <    2)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	61	None	replace
173	[BUG]  [BUGGY]  return(chars!=  null)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars[1]  ==  '-')||  chars  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars!=  null)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars[1]  ==  '-')||  chars  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars!=  null)||(chars[0]  ==  '-'  ||  chars[1]  ==  '+')||(chars[1]  ==  '-')||  chars[1]  ==  '-')||  chars	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    '+')||(chars[1]    ==    '-')||    chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	60	None	replace
174	[BUG]  [BUGGY]  return(chars.length  ==  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&&(chars  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  ==  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&&(chars  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  ==  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&&(chars	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    '+')||(chars[1]    ==    '-')||    chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	60	None	replace
175	[BUG]  [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '	  if(str    ==    null)    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    true    	non-compiled	[CE]  not  a  statement	48	None	replace
176	[BUG]  [BUGGY]  return(str.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	27	None	replace
177	[BUG]  [BUGGY]  if(isNumber(str)||!allowSigns  ||  hasExp)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(isNumber(str)||!allowSigns  ||  hasExp)  {  return  false;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(isNumber(str)||!allowSigns  ||  hasExp)  {  return  false;  }	  if(!allowSigns    ||    hasExp)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
178	[BUG]  [BUGGY]  return(str  ==  null)?  true  :  str.toCharArray()  >  0;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  true  :  str.toCharArray()  >  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  true  :  str.toCharArray()  >  0;	  return(str    ==    null)?    false    :    str.toCharArray()    >    0;    	non-compiled	[CE]  not  a  statement	50	None	replace
179	[BUG]  [BUGGY]  return(str  ==  null)&&(chars.length()  >=  0);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)&&(chars.length()  >=  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)&&(chars.length()  >=  0);	  return(str    ==    null)&&(str.length()    >=    0);    	non-compiled	[CE]  not  a  statement	5	None	replace
180	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)return  true;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)return  true;  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null  ||  str.length()  ==  0)return  true;	  if(str    ==    null    ||    str.length()    ==    0)return    false;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
181	[BUG]  [BUGGY]  if(str.length()  ==  0  ||  start.charAt(sz)  ==  '-')  {  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str.length()  ==  0  ||  start.charAt(sz)  ==  '-')  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str.length()  ==  0  ||  start.charAt(sz)  ==  '-')  {  return  true;  }	  if(str.length()    ==    0    ||    str.charAt(start)    ==    '-')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
182	[BUG]  [BUGGY]  String  chars  =  str.substring(start,  start);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  String  chars  =  str.substring(start,  start);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	String  chars  =  str.substring(start,  start);	  String    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	35	None	replace
183	[BUG]  [BUGGY]  chars  =  str.length();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  chars  =  str.length();  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	chars  =  str.length();	  if(chars.length()    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	31	None	replace
184	[BUG]  [BUGGY]  return(str  ==  null)&&(str.charAt(0)  ==  '-');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)&&(str.charAt(0)  ==  '-');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)&&(str.charAt(0)  ==  '-');	  return(str    ==    null)&&(str.length()    ==    0);    	non-compiled	[CE]  not  a  statement	4	None	replace
185	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(start);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.getChars(start);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.getChars(start);	  char[]    chars    =    str.getChars();    	non-compiled	[CE]  not  a  statement	36	None	replace
186	[BUG]  [BUGGY]  char[]  chars  =  str.getCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.getCharArray();  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.getCharArray();	  char[]    chars    =    str.getChars();    	non-compiled	[CE]  not  a  statement	36	None	replace
187	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-',  chars[2]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-',  chars[2]);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '-',  chars[2]);	  return(chars[0]    ==    '-'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	17	None	replace
188	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-',  chars[1]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-',  chars[1]);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '-',  chars[1]);	  return(chars[0]    ==    '-'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	17	None	replace
189	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-',  chars[3]);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-',  chars[3]);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '-',  chars[3]);	  return(chars[0]    ==    '-'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	17	None	replace
190	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[Start]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[Start]);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray(new  char[Start]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  not  a  statement	63	None	replace
191	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[0]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[0]);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray(new  char[0]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  not  a  statement	63	None	replace
192	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  ':')&&(chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  ':')&&(chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  ':')&&(chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    ':')||(chars[1]    ==    '+')||(chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	58	None	replace
193	[BUG]  [BUGGY]  return(chars!=  null)||(chars[0]  ==  '-'  ||  chars[1]  ==  ':')||(chars[1]  ==  '+')||(chars[1]  ==  '-')||  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars!=  null)||(chars[0]  ==  '-'  ||  chars[1]  ==  ':')||(chars[1]  ==  '+')||(chars[1]  ==  '-')||  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars!=  null)||(chars[0]  ==  '-'  ||  chars[1]  ==  ':')||(chars[1]  ==  '+')||(chars[1]  ==  '-')||	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    ':')||(chars[1]    ==    '+')||(chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	58	None	replace
194	[BUG]  [BUGGY]  if(allowSigns)  {  return  true;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(allowSigns)  {  return  true;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(allowSigns)  {  return  true;  }	  if(!allowSigns)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
195	[BUG]  [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false	  char[]    chars    =    str.toCharArray();    int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
196	[BUG]  [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  	  char[]    chars    =    str.toCharArray();    int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
197	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-'  ||  chars[1]  ==  '-')&&(chars  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-'  ||  chars[1]  ==  '-')&&(chars  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-'  ||  chars[1]  ==  '-')&&(chars	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    '+')||(chars[1]    ==    '-'    ||    chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	59	None	replace
198	[BUG]  [BUGGY]  return(chars.length  ==  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-'  ||  chars[1]  ==  '-')&&(chars  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  ==  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-'  ||  chars[1]  ==  '-')&&(chars  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  ==  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-'  ||  chars[1]  ==  '-')&&(chars	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    '+')||(chars[1]    ==    '-'    ||    chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	59	None	replace
199	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-'  ||  chars[1]  ==  '-')&&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-'  ||  chars[1]  ==  '-')&&  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-'  ||  chars[1]  ==  '-')&&	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    '+')||(chars[1]    ==    '-'    ||    chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	59	None	replace
200	[BUG]  [BUGGY]  if(chars.length!=  0)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars.length!=  0)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars.length!=  0)  {  return  false;  }	  if(str.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	52	None	replace
201	[BUG]  [BUGGY]  if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars	  if(str    ==    null)    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    	non-compiled	[CE]  not  a  statement	45	None	replace
202	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars!=  null  ||  chars.length  ==  0)  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars!=  null  ||  chars.length  ==  0)  {  return  true;  }	  if(chars    ==    null    ||    chars.length!=    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
203	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[Short.length()  ]);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[Short.length()  ]);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray(new  char[Short.length()  ]);	  char[]    chars    =    str.toCharArray(new    char[str.length()    ]);    	non-compiled	[CE]  not  a  statement	62	None	replace
204	[BUG]  [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '-',  chars[2]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '-',  chars[2]);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[1]  ==  '-'  ||  chars[1]  ==  '-',  chars[2]);	  return(chars[1]    ==    '-'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	18	None	replace
205	[BUG]  [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '-',  chars[1]);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[1]  ==  '-'  ||  chars[1]  ==  '-',  chars[1]);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[1]  ==  '-'  ||  chars[1]  ==  '-',  chars[1]);	  return(chars[1]    ==    '-'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	18	None	replace
206	[BUG]  [BUGGY]  if(chars!=  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars!=  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars!=  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  	  if(str    ==    null)    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
207	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length  <  2)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars	  if(str    ==    null)    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
208	[BUG]  [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+',  chars[2]  ==  '+');  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+',  chars[2]  ==  '+');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+',  chars[2]  ==  '+');	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	26	None	replace
209	[BUG]  [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+',  chars[1]  {  '+');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+',  chars[1]  {  '+');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  >  0)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '+',  chars[1]  {  '+');	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	26	None	replace
210	[BUG]  [BUGGY]  String[]  chars  =  this.str.toCharArray();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  String[]  chars  =  this.str.toCharArray();  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	String[]  chars  =  this.str.toCharArray();	  char[]    chars    =    this.str.toCharArray();    	non-compiled	[CE]  not  a  statement	34	None	replace
211	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(0,  0);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.getChars(0,  0);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.getChars(0,  0);	  char[]    chars    =    str.getChars();    	non-compiled	[CE]  not  a  statement	36	None	replace
212	[BUG]  [BUGGY]  return(chars.length  <  2)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  <  2)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  <  2)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+');	  return(chars.length    >    0)&&(chars[0]    ==    '-'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	25	None	replace
213	[BUG]  [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+',  chars[2]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+',  chars[2]);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  >  0)&&(chars[0]  ==  '-'  ||  chars[1]  ==  '+',  chars[2]);	  return(chars.length    >    0)&&(chars[0]    ==    '-'    ||    chars[1]    ==    '+');    	non-compiled	[CE]  not  a  statement	25	None	replace
214	[BUG]  [BUGGY]  return(str  ==  null)||(str.length()  >  0);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)||(str.length()  >  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)||(str.length()  >  0);	  return(str    ==    null)||(str.length()    >=    0);    	non-compiled	[CE]  not  a  statement	28	None	replace
215	[BUG]  [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-',  sz)+  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-',  sz)+  1;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[start]  ==  '-'  ||  chars[start]  ==  '-',  sz)+  1;	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-',    sz);    	non-compiled	[CE]  not  a  statement	19	None	replace
216	[BUG]  [BUGGY]  return(chars[0]  ==  '+'  ||  chars[start]  ==  '+')?  1  :  0;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '+'  ||  chars[start]  ==  '+')?  1  :  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '+'  ||  chars[start]  ==  '+')?  1  :  0;	  return(chars[0]    ==    '-'    ||    chars[start]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	74	None	replace
217	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[start]  ==  '+')?  2  :  0;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[start]  ==  '+')?  2  :  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[start]  ==  '+')?  2  :  0;	  return(chars[0]    ==    '-'    ||    chars[start]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	74	None	replace
218	[BUG]  [BUGGY]  if(str.length()  <  =  0)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str.length()  <  =  0)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str.length()  <  =  0)  {  return  false;  }	  if(str.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
219	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[start]  ==  '-')&&(chars[start]  ==  '.');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[start]  ==  '-')&&(chars[start]  ==  '.');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[start]  ==  '-')&&(chars[start]  ==  '.');	  return(chars[0]    ==    '-'    ||    chars[start]    ==    '-');    	non-compiled	[CE]  not  a  statement	67	None	replace
220	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[start]  ==  '-',  chars[start]);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[start]  ==  '-',  chars[start]);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[start]  ==  '-',  chars[start]);	  return(chars[0]    ==    '-'    ||    chars[start]    ==    '-');    	non-compiled	[CE]  not  a  statement	67	None	replace
221	[BUG]  [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-')&&(chars[start]  ==  ',');  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-')&&(chars[start]  ==  ',');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[start]  ==  '-'  ||  chars[start]  ==  '-')&&(chars[start]  ==  ',');	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-')&&(chars[start]    ==    '.');    	non-compiled	[CE]  not  a  statement	66	None	replace
222	[BUG]  [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-')&&(chars[start]  ==  '.',  sz);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[start]  ==  '-'  ||  chars[start]  ==  '-')&&(chars[start]  ==  '.',  sz);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[start]  ==  '-'  ||  chars[start]  ==  '-')&&(chars[start]  ==  '.',  sz);	  return(chars[start]    ==    '-'    ||    chars[start]    ==    '-')&&(chars[start]    ==    '.');    	non-compiled	[CE]  not  a  statement	66	None	replace
223	[BUG]  [BUGGY]  char[]  chars  =  getChars(str,  0);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  getChars(str,  0);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  getChars(str,  0);	  char[]    chars    =    getChars(str);    	non-compiled	[CE]  not  a  statement	42	None	replace
224	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&&  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '+')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&&(chars[1]  ==  '-')&&	  return(chars.length    ==    0)||(chars[0]    ==    '-'    ||    chars[1]    ==    '+')||(chars[1]    ==    '-')||    chars[1]    ==    '-')||    chars    	non-compiled	[CE]  not  a  statement	60	None	replace
225	[BUG]  [BUGGY]  CharSequence  chars  =  str.toCharArray();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  CharSequence  chars  =  str.toCharArray();  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	CharSequence  chars  =  str.toCharArray();	  char[]    chars    =    str.toCharArray()    +    1;    	non-compiled	[CE]  not  a  statement	41	None	replace
226	[BUG]  [BUGGY]  if(chars.length  ==  0  ||  chars.length  <  2)  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars.length  ==  0  ||  chars.length  <  2)  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars.length  ==  0  ||  chars.length  <  2)  {  return  true;  }	  if(chars.length    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	69	None	replace
227	[BUG]  [BUGGY]  return(chars[0]  ==  '+'  ||  chars[1]  ==  '+')?  1  :  0;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '+'  ||  chars[1]  ==  '+')?  1  :  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '+'  ||  chars[1]  ==  '+')?  1  :  0;	  return(chars[0]    ==    '-'    ||    chars[1]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	1	None	replace
228	[BUG]  [BUGGY]  return(str  ==  null)||(chars.length()  ==  1);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)||(chars.length()  ==  1);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)||(chars.length()  ==  1);	  return(str    ==    null)||(str.length()    ==    1);    	non-compiled	[CE]  not  a  statement	11	None	replace
229	[BUG]  [BUGGY]  return(str  ==  null)||(str.length()  >  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)||(str.length()  >  1);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)||(str.length()  >  1);	  return(str    ==    null)||(str.length()    ==    1);    	non-compiled	[CE]  not  a  statement	11	None	replace
230	[BUG]  [BUGGY]  if(!allowSigns)return  null;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(!allowSigns)return  null;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns)return  null;	  if(!allowSigns)return    true;    	non-compiled	[CE]  not  a  statement	54	None	replace
231	[BUG]  [BUGGY]  if(!allowSigns  ||  chars.length  <  2  ||  chars.length  >  0)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(!allowSigns  ||  chars.length  <  2  ||  chars.length  >  0)  {  return  false;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns  ||  chars.length  <  2  ||  chars.length  >  0)  {  return  false;  }	  if(!allowSigns    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	68	None	replace
232	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz].length()  ]);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz].length()  ]);  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray(new  char[sz].length()  ]);	  char[]    chars    =    str.toCharArray(new    char[str.length()    ]);    	non-compiled	[CE]  not  a  statement	62	None	replace
233	[BUG]  [BUGGY]  if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '	  if(str    ==    null)    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    true    	non-compiled	[CE]  not  a  statement	48	None	replace
234	[BUG]  [BUGGY]  if(chars.length  <  =  0)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars.length  <  =  0)  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars.length  <  =  0)  {  return  true;  }	  if(str.length()    <    =    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
235	[BUG]  [BUGGY]  return(chars  ==  null  ||  str.length()  ==  0);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars  ==  null  ||  str.length()  ==  0);  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars  ==  null  ||  str.length()  ==  0);	  return(str    ==    null    ||    str.length()    ==    0);    	non-compiled	[CE]  not  a  statement	65	None	replace
236	[BUG]  [BUGGY]  char[]  chars  =  str.trim().toLowerCase();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.trim().toLowerCase();  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.trim().toLowerCase();	  char[]    chars    =    str.trim();    	non-compiled	[CE]  not  a  statement	43	None	replace
237	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray().length();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  false  :  str.toCharArray().length();  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.toCharArray().length();	  return(str    ==    null)?    false    :    str.length()    +    1;    	non-compiled	[CE]  not  a  statement	37	None	replace
238	[BUG]  [BUGGY]  return(str  ==  null)?  false  :  str.toString().length();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(str  ==  null)?  false  :  str.toString().length();  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(str  ==  null)?  false  :  str.toString().length();	  return(str    ==    null)?    false    :    str.length()    +    1;    	non-compiled	[CE]  not  a  statement	37	None	replace
239	[BUG]  [BUGGY]  return(chars.length  <  2)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  <  2)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  <  2)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	27	None	replace
240	[BUG]  [BUGGY]  return(chars.length  <  1)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars.length  <  1)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars.length  <  1)&&(chars[0]  ==  '+'  ||  chars[1]  ==  '-');	  return(chars.length    >    0)&&(chars[0]    ==    '+'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	27	None	replace
241	[BUG]  [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[1]!=  '.');  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[1]!=  '.');  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '-'  ||  chars[1]  ==  '-')&&(chars[1]!=  '.');	  return(chars[0]    ==    '-'    ||    chars[1]    ==    '-');    	non-compiled	[CE]  not  a  statement	17	None	replace
242	[BUG]  [BUGGY]  if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '+'  ||  chars  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '+'  ||  chars  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null)  {  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '+'  ||  chars	  if(str    ==    null)    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    	non-compiled	[CE]  not  a  statement	45	None	replace
243	[BUG]  [BUGGY]  if(!allowSigns  &&  hasExp)return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(!allowSigns  &&  hasExp)return  false;  }  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(!allowSigns  &&  hasExp)return  false;  }	  if(!allowSigns    ||    hasExp)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
244	[BUG]  [BUGGY]  if(chars[i]  ==  '.')  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars[i]  ==  '.')  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars[i]  ==  '.')  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  	  char[]    chars    =    str.toCharArray();    int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
245	[BUG]  [BUGGY]  if(chars.length()  ==  0  ||  str.charAt(start)  ==  '-')  {  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars.length()  ==  0  ||  str.charAt(start)  ==  '-')  {  return  true;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars.length()  ==  0  ||  str.charAt(start)  ==  '-')  {  return  true;  }	  if(str.length()    ==    0    ||    str.charAt(start)    ==    '-')    {    return    true;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
246	[BUG]  [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(str  ==  null)  {  char[]  chars  =  str.toCharArray();  int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars[i]  ==  '+')  {  return  false;  }	  char[]    chars    =    str.toCharArray();    int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars[i]    ==    '+')    {    return    false;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
247	[BUG]  [BUGGY]  return(chars[0]  ==  '+'  ||  chars[0]  ==  '+')?  1  :  0;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  return(chars[0]  ==  '+'  ||  chars[0]  ==  '+')?  1  :  0;  [BUGGY]      }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	return(chars[0]  ==  '+'  ||  chars[0]  ==  '+')?  1  :  0;	  return(chars[0]    ==    '-'    ||    chars[0]    ==    '+')?    1    :    0;    	non-compiled	[CE]  not  a  statement	3	None	replace
248	[BUG]  [BUGGY]  if(chars!=  null  ||  chars.length!=  0)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars!=  null  ||  chars.length!=  0)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars!=  null  ||  chars.length!=  0)  {  return  false;  }	  if(chars    ==    null    ||    chars.length!=    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
249	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	if(chars  ==  null  ||  chars.length  ==  0)return  false;  }	  if(str    ==    null    ||    chars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
250	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars!=  false)  {  return  false;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {      [BUGGY]  char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars!=  false)  {  return  false;  }  [BUGGY]      return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	char[]  chars  =  str.toCharArray();  for(int  i  =  start;  i  <  chars.length;  i++)  {  if(chars[i]  ==  '-'  ||  chars!=  false)  {  return  false;  }	  if(chars[i]    ==    '.')    {    char[]    chars    =    str.toCharArray();    for(int    i    =    start;    i    <    chars.length;    i++)    {    if(chars[i]    ==    '-'    ||    chars    	non-compiled	[CE]  not  a  statement	77	None	replace
