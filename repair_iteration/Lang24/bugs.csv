bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new NumberFormatException("A blank string is not a valid number"); [FE] AssertionFailedError [CONTEXT] public static Number createNumber(String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { [BUGGY] throw new NumberFormatException("A blank string is not a valid number"); [BUGGY] } if (str.startsWith("--")) {     return null; } if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	457	457	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static Number createNumber(String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { [BUGGY] [BUGGY] throw new NumberFormatException("A blank string is not a valid number"); } if (str.startsWith("--")) {     return null; } if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	457	457	1	add	
3	[BUG] [BUGGY] return null; [FE] AssertionFailedError [CONTEXT] return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } if (str.startsWith("--")) {     [BUGGY] return null; [BUGGY] } if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	464	464	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } if (str.startsWith("--")) {     [BUGGY] [BUGGY] return null; } if (str.startsWith("0x") || str.startsWith("-0x")) { return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	464	464	1	add	
5	[BUG] [BUGGY] throw new NumberFormatException(str + " is not a valid number."); [FE] AssertionFailedError [CONTEXT] String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos || expPos > str.length()) { [BUGGY] throw new NumberFormatException(str + " is not a valid number."); [BUGGY] } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { if (expPos > str.length()) { throw new NumberFormatException(str + " is not a valid number."); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	480	480	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos || expPos > str.length()) { [BUGGY] [BUGGY] throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { if (expPos > str.length()) { throw new NumberFormatException(str + " is not a valid number."); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	480	480	1	add	
7	[BUG] [BUGGY] mant = str.substring(0, expPos); [FE] AssertionFailedError [CONTEXT] dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { if (expPos > str.length()) { throw new NumberFormatException(str + " is not a valid number."); } [BUGGY] mant = str.substring(0, expPos); [BUGGY] } else { mant = str; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	492	492	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { if (expPos > str.length()) { throw new NumberFormatException(str + " is not a valid number."); } [BUGGY] [BUGGY] mant = str.substring(0, expPos); } else { mant = str; } dec = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	492	492	1	add	
9	[BUG] [BUGGY] throw new NumberFormatException(str + " is not a valid number."); [FE] AssertionFailedError [CONTEXT] && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  } return createBigInteger(numeric); } [BUGGY] throw new NumberFormatException(str + " is not a valid number."); [BUGGY] case 'f' : case 'F' : try { Float f = NumberUtils.createFloat(numeric); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {   return f; }  [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	521	521	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) {  } return createBigInteger(numeric); } [BUGGY] [BUGGY] throw new NumberFormatException(str + " is not a valid number."); case 'f' : case 'F' : try { Float f = NumberUtils.createFloat(numeric); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {   return f; }  [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	521	521	1	add	
11	[BUG] [BUGGY] } catch (NumberFormatException nfe) { [FE] AssertionFailedError [CONTEXT] case 'f' : case 'F' : try { Float f = NumberUtils.createFloat(numeric); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {   return f; } [BUGGY] } catch (NumberFormatException nfe) { [BUGGY]  }  case 'd' : case 'D' : try { Double d = NumberUtils.createDouble(numeric); if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) { return d; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	532	532	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case 'f' : case 'F' : try { Float f = NumberUtils.createFloat(numeric); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {   return f; } [BUGGY] [BUGGY] } catch (NumberFormatException nfe) {  }  case 'd' : case 'D' : try { Double d = NumberUtils.createDouble(numeric); if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) { return d; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	532	532	1	add	
13	[BUG] [BUGGY] } catch (NumberFormatException nfe) { [FE] AssertionFailedError [CONTEXT]  }  case 'd' : case 'D' : try { Double d = NumberUtils.createDouble(numeric); if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) { return d; } [BUGGY] } catch (NumberFormatException nfe) { [BUGGY]  } try { return createBigDecimal(numeric); } catch (NumberFormatException e) {  }  default : throw new NumberFormatException(str + " is not a valid number."); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	543	543	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  }  case 'd' : case 'D' : try { Double d = NumberUtils.createDouble(numeric); if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) { return d; } [BUGGY] [BUGGY] } catch (NumberFormatException nfe) {  } try { return createBigDecimal(numeric); } catch (NumberFormatException e) {  }  default : throw new NumberFormatException(str + " is not a valid number."); [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	543	543	1	add	
15	[BUG] [BUGGY] } catch (NumberFormatException e) { [FE] AssertionFailedError [CONTEXT] try { Double d = NumberUtils.createDouble(numeric); if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) {  } try { return createBigDecimal(numeric); [BUGGY] } catch (NumberFormatException e) { [BUGGY]  }  default : throw new NumberFormatException(str + " is not a valid number."); } } else {   [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	548	548	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] try { Double d = NumberUtils.createDouble(numeric); if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) {  } try { return createBigDecimal(numeric); [BUGGY] [BUGGY] } catch (NumberFormatException e) {  }  default : throw new NumberFormatException(str + " is not a valid number."); } } else {   [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	548	548	1	add	
17	[BUG] [BUGGY] throw new NumberFormatException(str + " is not a valid number."); [FE] AssertionFailedError [CONTEXT] } catch (NumberFormatException nfe) {  } try { return createBigDecimal(numeric); } catch (NumberFormatException e) {  }  default : [BUGGY] throw new NumberFormatException(str + " is not a valid number."); [BUGGY]  } } else {   if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); } else { exp = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	553	553	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } catch (NumberFormatException nfe) {  } try { return createBigDecimal(numeric); } catch (NumberFormatException e) {  }  default : [BUGGY] [BUGGY] throw new NumberFormatException(str + " is not a valid number."); } } else {   if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); } else { exp = null; } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	553	553	1	add	
19	[BUG] [BUGGY] } catch (NumberFormatException nfe) { [FE] AssertionFailedError [CONTEXT] return createBigInteger(str); } else {  boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } [BUGGY] } catch (NumberFormatException nfe) { [BUGGY]  } try { Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) {  } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	586	586	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return createBigInteger(str); } else {  boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } [BUGGY] [BUGGY] } catch (NumberFormatException nfe) {  } try { Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) {  } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	586	586	1	add	
21	[BUG] [BUGGY] } catch (NumberFormatException nfe) { [FE] AssertionFailedError [CONTEXT] return f; } } catch (NumberFormatException nfe) {  } try { Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } [BUGGY] } catch (NumberFormatException nfe) { [BUGGY]  } return createBigDecimal(str); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	594	594	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return f; } } catch (NumberFormatException nfe) {  } try { Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } [BUGGY] [BUGGY] } catch (NumberFormatException nfe) {  } return createBigDecimal(str); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	594	594	1	add	
23	[BUG] [BUGGY] return createBigDecimal(str); [FE] AssertionFailedError [CONTEXT] } try { Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) {  } [BUGGY] return createBigDecimal(str); [BUGGY]  } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	598	598	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } try { Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) {  } [BUGGY] [BUGGY] return createBigDecimal(str); } [CLASS] NumberUtils [METHOD] createNumber [RETURN_TYPE] Number  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allZeros Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO char lastChar NumberFormatException e nfe String dec exp mant numeric str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int decPos expPos  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	598	598	1	add	
25	[BUG] [BUGGY] return str.length() > 0; [FE] AssertionFailedError [CONTEXT] private static boolean isAllZeros(String str) { if (str == null) { return true; } for (int i = str.length() - 1; i >= 0; i--) { if (str.charAt(i) != '0') { return false; } } [BUGGY] return str.length() > 0; [BUGGY] } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	621	621	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static boolean isAllZeros(String str) { if (str == null) { return true; } for (int i = str.length() - 1; i >= 0; i--) { if (str.charAt(i) != '0') { return false; } } [BUGGY] [BUGGY] return str.length() > 0; } [CLASS] NumberUtils [METHOD] isAllZeros [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	621	621	1	add	
27	[BUG] [BUGGY] if (StringUtils.isEmpty(str)) { [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { [BUGGY] if (StringUtils.isEmpty(str)) { [BUGGY] return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1320	1320	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { [BUGGY] [BUGGY] if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1320	1320	1	add	
29	[BUG] [BUGGY] return false; [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { [BUGGY] return false; [BUGGY] } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { [BUGGY] [BUGGY] return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1321	1321	1	add	
31	[BUG] [BUGGY] char[] chars = str.toCharArray(); [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } [BUGGY] char[] chars = str.toCharArray(); [BUGGY] int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } [BUGGY] [BUGGY] char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	add	
33	[BUG] [BUGGY] int sz = chars.length; [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); [BUGGY] int sz = chars.length; [BUGGY] boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); [BUGGY] [BUGGY] int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1324	1324	1	add	
35	[BUG] [BUGGY] boolean hasExp = false; [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; [BUGGY] boolean hasExp = false; [BUGGY] boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == "0x" [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1325	1325	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; [BUGGY] [BUGGY] boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == "0x" [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1325	1325	1	add	
37	[BUG] [BUGGY] boolean hasDecPoint = false; [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; [BUGGY] boolean hasDecPoint = false; [BUGGY] boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == "0x" } [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1326	1326	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; [BUGGY] [BUGGY] boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == "0x" } [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1326	1326	1	add	
39	[BUG] [BUGGY] boolean allowSigns = false; [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; [BUGGY] boolean allowSigns = false; [BUGGY] boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == "0x" }  [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; [BUGGY] [BUGGY] boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == "0x" }  [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1327	1327	1	add	
41	[BUG] [BUGGY] boolean foundDigit = false; [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; [BUGGY] boolean foundDigit = false; [BUGGY]  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == "0x" }  for (; i < chars.length; i++) { [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1328	1328	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; [BUGGY] [BUGGY] boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == "0x" }  for (; i < chars.length; i++) { [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1328	1328	1	add	
43	[BUG] [BUGGY] int start = (chars[0] == '-') ? 1 : 0; [FE] AssertionFailedError [CONTEXT] if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  [BUGGY] int start = (chars[0] == '-') ? 1 : 0; [BUGGY] if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == "0x" }  for (; i < chars.length; i++) { if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  [BUGGY] [BUGGY] int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == "0x" }  for (; i < chars.length; i++) { if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	add	
45	[BUG] [BUGGY] if (sz > start + 1) { [FE] AssertionFailedError [CONTEXT] return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; [BUGGY] if (sz > start + 1) { [BUGGY] if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == "0x" }  for (; i < chars.length; i++) { if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) { [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; [BUGGY] [BUGGY] if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == "0x" }  for (; i < chars.length; i++) { if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) { [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	add	
47	[BUG] [BUGGY] if (chars[start] == '0' && chars[start + 1] == 'x') { [FE] AssertionFailedError [CONTEXT] } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { [BUGGY] if (chars[start] == '0' && chars[start + 1] == 'x') { [BUGGY] int i = start + 2; if (i == sz) { return false; // str == "0x" }  for (; i < chars.length; i++) { if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) { return false; [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { [BUGGY] [BUGGY] if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == "0x" }  for (; i < chars.length; i++) { if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) { return false; [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1332	1332	1	add	
49	[BUG] [BUGGY] int i = start + 2; [FE] AssertionFailedError [CONTEXT] char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { [BUGGY] int i = start + 2; [BUGGY] if (i == sz) { return false; // str == "0x" }  for (; i < chars.length; i++) { if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) { return false; } [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false;  int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { [BUGGY] [BUGGY] int i = start + 2; if (i == sz) { return false; // str == "0x" }  for (; i < chars.length; i++) { if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) { return false; } [CLASS] NumberUtils [METHOD] isNumber [RETURN_TYPE] boolean  String str [VARIABLES] Integer INTEGER_MINUS_ONE INTEGER_ONE INTEGER_ZERO Float FLOAT_MINUS_ONE FLOAT_ONE FLOAT_ZERO f boolean allowSigns foundDigit hasDecPoint hasExp Byte BYTE_MINUS_ONE BYTE_ONE BYTE_ZERO Long LONG_MINUS_ONE LONG_ONE LONG_ZERO String str Double DOUBLE_MINUS_ONE DOUBLE_ONE DOUBLE_ZERO d Short SHORT_MINUS_ONE SHORT_ONE SHORT_ZERO int i start sz char[] chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1333	1333	1	add	
