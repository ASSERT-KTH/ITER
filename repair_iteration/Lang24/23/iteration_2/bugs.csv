bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  sz  =(chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;	      int    sz    =(chars[1]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  int  sz  =(chars[1]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[1]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[1]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;	      int    sz    =(chars[1]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  int  sz  =(chars[1]!=  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[1]!=  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[1]!=  '0'  ||  chars[1]  ==  '9')?  1  :  0;	      int    sz    =(chars[1]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  int  sz  =(chars[0]  ==  '.')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[0]  ==  '.')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[0]  ==  '.')?  1  :  0;	      int    sz    =(chars[start]    ==    '.')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
5	[BUG]  [BUGGY]  int  sz  =(chars[1]  ==  '.')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[1]  ==  '.')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[1]  ==  '.')?  1  :  0;	      int    sz    =(chars[start]    ==    '.')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
6	[BUG]  [BUGGY]  int  sz  =(chars[i]  ==  '.')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[i]  ==  '.')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[i]  ==  '.')?  1  :  0;	      int    sz    =(chars[start]    ==    '.')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
7	[BUG]  [BUGGY]  chars[]  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  chars[]  chars  =  str.toCharArray();  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	chars[]  chars  =  str.toCharArray();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  int  sz  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')?  1  :  0;	      int    sz    =(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  int  sz  =(chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  '9')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  '9')?  1  :  0;	      int    sz    =(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  int  sz  =(chars[i]  ==  '0'  ||  chars[i  +  1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[i]  ==  '0'  ||  chars[i  +  1]  ==  '9')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[i]  ==  '0'  ||  chars[i  +  1]  ==  '9')?  1  :  0;	      int    sz    =(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  int  sz  =(chars[1]  ==  '0'  &&  chars[1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[1]  ==  '0'  &&  chars[1]  ==  'x')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[1]  ==  '0'  &&  chars[1]  ==  'x')?  1  :  0;	      int    sz    =(chars[1]    ==    '0'    ||    chars[1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  int  sz  =(chars[0]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[0]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[0]  ==  '0'  ||  chars[1]  ==  'x')?  1  :  0;	      int    sz    =(chars[1]    ==    '0'    ||    chars[1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  int  sz  =(chars[1]  ==  '0'  ||  chars[1]  ==  'x')?  2  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[1]  ==  '0'  ||  chars[1]  ==  'x')?  2  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[1]  ==  '0'  ||  chars[1]  ==  'x')?  2  :  0;	      int    sz    =(chars[1]    ==    '0'    ||    chars[1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  char[]  chars  =  this.str.toCharArray();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  char[]  chars  =  this.str.toCharArray();  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	char[]  chars  =  this.str.toCharArray();	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  char[]  chars  =  getStr().toCharArray();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  char[]  chars  =  getStr().toCharArray();  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	char[]  chars  =  getStr().toCharArray();	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(sz);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  char[]  chars  =  str.toCharArray(sz);  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	char[]  chars  =  str.toCharArray(sz);	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  int  sz  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;	      int    sz    =(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  int  sz  =(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;	      int    sz    =(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  int  sz  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')?  1  :  0;	      int    sz    =(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]  int  sz  =(chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'f')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[start  +  1]  ==  '0'  ||  chars[start  +  1]  ==  'f')?  1  :  0;	      int    sz    =(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
21	[BUG]  [BUGGY]  int  sz  =(chars[1]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[1]  ==  '-')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[1]  ==  '-')?  1  :  0;	      int    sz    =(chars[0]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  int  sz  =(chars[0]!=  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[0]!=  '-')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[0]!=  '-')?  1  :  0;	      int    sz    =(chars[0]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  if(sz  >=  start  +  2)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(sz  >=  start  +  2)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(sz  >=  start  +  2)  {	  if(sz    >    start    +    2)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
24	[BUG]  [BUGGY]  if(sz  <  sz  +  2)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(sz  <  sz  +  2)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(sz  <  sz  +  2)  {	  if(sz    >    start    +    2)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
25	[BUG]  [BUGGY]  if(sz  <  =  start  +  2)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(sz  <  =  start  +  2)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(sz  <  =  start  +  2)  {	  if(sz    >    start    +    2)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
26	[BUG]  [BUGGY]  if(sz  >=  chars.length  +  1)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(sz  >=  chars.length  +  1)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(sz  >=  chars.length  +  1)  {	  if(sz    >=    sz    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
27	[BUG]  [BUGGY]  if(sz  <  chars.length  +  1)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(sz  <  chars.length  +  1)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(sz  <  chars.length  +  1)  {	  if(sz    >=    sz    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
28	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  start  =(chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  start  =(chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;	      int    start    =(chars[1]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
29	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  start  =(sz  <  chars.length  ||  chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;	      int    start    =(chars[1]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
30	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  ||  sz  >  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  start  =(sz  <  '0'  ||  sz  >  'f')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  start  =(sz  <  '0'  ||  sz  >  'f')?  1  :  0;	      int    start    =(chars[1]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
31	[BUG]  [BUGGY]  if(sz  <  =  sz  +  1)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(sz  <  =  sz  +  1)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(sz  <  =  sz  +  1)  {	  if(sz    <    sz    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
32	[BUG]  [BUGGY]  if(sz  <  start  +  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(sz  <  start  +  1)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(sz  <  start  +  1)  {	  if(sz    <    sz    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
33	[BUG]  [BUGGY]  int  sz  =(chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;	      int    sz    =(chars[1]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  int  sz  =(chars[1]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[1]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[1]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;	      int    sz    =(chars[1]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  int  sz  =(chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  2  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  2  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  2  :  0;	      int    sz    =(chars[1]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  int  sz  =(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[start  +  1]  ==  '0'  &&  chars[start  +  1]  ==  'x')?  1  :  0;	      int    sz    =(chars[start    +    1]    ==    '0'    ||    chars[start    +    1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
37	[BUG]  [BUGGY]  int  sz  =(chars[2]  ==  '.')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[2]  ==  '.')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[2]  ==  '.')?  1  :  0;	      int    sz    =(chars[start]    ==    '.')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
38	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  start  =(chars[1]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  start  =(chars[1]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;	      int    start    =(chars[1]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
39	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  Integer  chars[]  =  str.toCharArray();  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	Integer  chars[]  =  str.toCharArray();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  int  chars  =  str.charAt(start);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  chars  =  str.charAt(start);  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  chars  =  str.charAt(start);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
41	[BUG]  [BUGGY]  chars[start]  =  str.charAt(start);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  chars[start]  =  str.charAt(start);  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	chars[start]  =  str.charAt(start);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  int  i  =  start  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  i  =  start  +  2;  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  i  =  start  +  2;	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  char  sz  =(chars[0]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  char  sz  =(chars[0]  ==  '-')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	char  sz  =(chars[0]  ==  '-')?  1  :  0;	      int    sz    =(chars[0]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  int  sz  =(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'f')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  'f')?  1  :  0;	      int    sz    =(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  int  sz  =(chars[0]  ==  '0'  &&  chars[1]  ==  'x')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[0]  ==  '0'  &&  chars[1]  ==  'x')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[0]  ==  '0'  &&  chars[1]  ==  'x')?  1  :  0;	      int    sz    =(chars[1]    ==    '0'    ||    chars[1]    ==    'x')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  if(sz  ==  start  +  1)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(sz  ==  start  +  1)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(sz  ==  start  +  1)  {	  if(sz    >=    start    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
47	[BUG]  [BUGGY]  if(sz!=  start  +  1)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(sz!=  start  +  1)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(sz!=  start  +  1)  {	  if(sz    >=    start    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
48	[BUG]  [BUGGY]  if(start  >=  sz  +  1)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(start  >=  sz  +  1)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(start  >=  sz  +  1)  {	  if(sz    >=    sz    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
49	[BUG]  [BUGGY]  char  sz  =(chars[1]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  char  sz  =(chars[1]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	char  sz  =(chars[1]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;	      int    sz    =(chars[1]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  int  sz  =(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  '9')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[0]  ==  '0'  &&  chars[start  +  1]  ==  '9')?  1  :  0;	      int    sz    =(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
51	[BUG]  [BUGGY]  if(start  <  sz  +  1)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(start  <  sz  +  1)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(start  <  sz  +  1)  {	  if(sz    <    sz    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
52	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  char[]  chars  =  str.toCharArray()  +  1;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	char[]  chars  =  str.toCharArray()  +  1;	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(start);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  char[]  chars  =  str.toCharArray(start);  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	char[]  chars  =  str.toCharArray(start);	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
54	[BUG]  [BUGGY]  char  sz  =(chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  char  sz  =(chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	char  sz  =(chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;	      int    sz    =(chars[1]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  if(sz  ==  start  +  2)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(sz  ==  start  +  2)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(sz  ==  start  +  2)  {	  if(sz    >    start    +    2)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
56	[BUG]  [BUGGY]  int  sz  =(chars[start]  ==  '.')?  2  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[start]  ==  '.')?  2  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[start]  ==  '.')?  2  :  0;	      int    sz    =(chars[start]    ==    '.')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
57	[BUG]  [BUGGY]  chars[start]  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  chars[start]  =  str.toCharArray();  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	chars[start]  =  str.toCharArray();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  chars[start]  =  str.charAt(sz);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  chars[start]  =  str.charAt(sz);  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	chars[start]  =  str.charAt(sz);	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  if(sz  >=  sz  +  2)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(sz  >=  sz  +  2)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(sz  >=  sz  +  2)  {	  if(sz    >    start    +    2)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
60	[BUG]  [BUGGY]  if(sz  >=  chars.length)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(sz  >=  chars.length)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(sz  >=  chars.length)  {	  if(sz    >=    start    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
61	[BUG]  [BUGGY]  if(chars.length  >=  sz  +  1)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  if(chars.length  >=  sz  +  1)  {  [BUGGY]    if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	if(chars.length  >=  sz  +  1)  {	  if(sz    >=    sz    +    1)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
62	[BUG]  [BUGGY]  int  sz  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1  :  0;	      int    sz    =(chars[0]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  int  sz  =(chars[1]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[1]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[1]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;	      int    sz    =(chars[1]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
64	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz]);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz]);  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	char[]  chars  =  str.toCharArray(new  char[sz]);	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
65	[BUG]  [BUGGY]  int  sz  =(chars[start]  {  '0'  &&  chars[start  +  1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;    [BUGGY]  int  sz  =(chars[start]  {  '0'  &&  chars[start  +  1]  ==  '9')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  &&  (chars[i]  <  'A'  ||  chars[i]  >  'F'))  {  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1331	1331	1	replace	int  sz  =(chars[start]  {  '0'  &&  chars[start  +  1]  ==  '9')?  1  :  0;	      int    sz    =(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
