bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  chars[]  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  chars[]  chars  =  str.toCharArray();  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	chars[]  chars  =  str.toCharArray();	      chars[]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  int  start  =(chars.length  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars.length  ==  '-')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars.length  ==  '-')?  1  :  0;	  int    start    =    (sz    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(hasDecPoint)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  }	      if(hasExp)    {    if(chars[0]    ==    '0'    ||    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(hasDecPoint)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }	      if(hasExp)    {    if(chars[0]    ==    '0'    ||    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(!allowSigns)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }	      if(hasExp)    {    if(chars[0]    ==    '0'    ||    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(hasDecPoint)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }	      if(hasExp)    {    if(chars[0]    ==    '0'    ||    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'f')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(hasExp)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'f')  {  return  false;  }  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasExp)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'f')  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(hasExp)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasExp)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(hasExp)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  '9')  {  return  false;  }  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasExp)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  '9')  {  return  false;  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  int  start  =(sz  ==  '-'  ||  chars[1]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(sz  ==  '-'  ||  chars[1]  ==  '-')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '-'  ||  chars[1]  ==  '-')?  1  :  0;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
11	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '-')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[1]  ==  '-')?  1  :  0;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
12	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  2  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  2  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  2  :  0;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
13	[BUG]  [BUGGY]  char[]  chars  =  this.str.toCharArray();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  char[]  chars  =  this.str.toCharArray();  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  this.str.toCharArray();	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  String  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  String  chars  =  str.toCharArray();  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	String  chars  =  str.toCharArray();	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(sz);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  char[]  chars  =  str.toCharArray(sz);  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(sz);	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  int  start  =  chars[0]  >>  '-'?  1  :  0;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =  chars[0]  >>  '-'?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  chars[0]  >>  '-'?  1  :  0;	  int    start    =    chars[0]    ==    '-'?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  int  start  =  chars[0]!=  '-'?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =  chars[0]!=  '-'?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  chars[0]!=  '-'?  1  :  0;	  int    start    =    chars[0]    ==    '-'?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
19	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
20	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  ||  sz  <  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(sz  ==  '0'  ||  sz  <  'f')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  ||  sz  <  'f')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
21	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray(sz);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  Integer  chars[]  =  str.toCharArray(sz);  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toCharArray(sz);	      Integer    chars[]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  Integer  chars[]  =  str.toString();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  Integer  chars[]  =  str.toString();  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toString();	      Integer    chars[]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(hasDecPoint)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  }	      if(hasExp)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(!allowSigns)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }	      if(hasExp)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(hasDecPoint)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }	      if(hasExp)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  if(!hasDecPoint)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(!hasDecPoint)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!hasDecPoint)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }	      if(hasExp)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  int  start  =  chars[0]  <  '-'?  1  :  0;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =  chars[0]  <  '-'?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  chars[0]  <  '-'?  1  :  0;	  int    start    =    chars[0]    {    '-'?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[0]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[0]  ==  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[0]  ==  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[0]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
29	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[0]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[0]  ==  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  ||  chars[0]  ==  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[0]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
30	[BUG]  [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[i]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[i]  >  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  <  '0'  ||  chars[i]  >  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
31	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[i]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[i]  >  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  ||  chars[i]  >  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
32	[BUG]  [BUGGY]  int  start  =(chars[0]  >=  '0'  ||  chars[i]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars[0]  >=  '0'  ||  chars[i]  >  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  >=  '0'  ||  chars[i]  >  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
33	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
34	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
35	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  ||  sz  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(sz  <  '0'  ||  sz  >  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  '0'  ||  sz  >  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
36	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(hasDecPoint)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }	      if(hasExp)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  if(foundDigit)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(foundDigit)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(foundDigit)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }	      if(hasExp)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[0]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[0]  ==  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[0]  ==  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[0]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
39	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  char[]  chars  =  str.toCharArray()  +  1;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray()  +  1;	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
40	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz]);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz]);  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(new  char[sz]);	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
41	[BUG]  [BUGGY]  char[]  chars  =  this.chars.toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  char[]  chars  =  this.chars.toCharArray();  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  this.chars.toCharArray();	      char[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
42	[BUG]  [BUGGY]  chars[]  =  str.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  chars[]  =  str.toCharArray()  +  1;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	chars[]  =  str.toCharArray()  +  1;	      chars[]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
43	[BUG]  [BUGGY]  int  start  =  chars[0]  >=  '-'?  1  :  0;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =  chars[0]  >=  '-'?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  chars[0]  >=  '-'?  1  :  0;	  int    start    =    chars[0]    {    '-'?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('.');  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =  str.lastIndexOf('.');  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.lastIndexOf('.');	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
45	[BUG]  [BUGGY]  int  start  =  str.length();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =  str.length();  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.length();	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
46	[BUG]  [BUGGY]  int  start  =  str.indexOf('.')+  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =  str.indexOf('.')+  1;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.indexOf('.')+  1;	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
47	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
48	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  Integer  chars[]  =  str.toCharArray()  +  1;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toCharArray()  +  1;	      Integer    chars[]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
49	[BUG]  [BUGGY]  Integer  chars[]  =  getChars(str).toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  Integer  chars[]  =  getChars(str).toCharArray();  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  getChars(str).toCharArray();	      Integer    chars[]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
50	[BUG]  [BUGGY]  int  start  =  (sz  ==  '0')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =  (sz  ==  '0')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  (sz  ==  '0')?  1  :  0;	  int    start    =    (sz    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  if(foundDigit)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(foundDigit)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(foundDigit)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }	      if(hasExp)    {    if(chars[0]    ==    '0'    ||    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[i]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[i]  >  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[i]  >  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
53	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  ||  chars[i]  <  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars[0]  ==  '0'  ||  chars[i]  <  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '0'  ||  chars[i]  <  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
54	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1L  :  0;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1L  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1L  :  0;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
55	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
56	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1  :  -1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1  :  -1;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1  :  -1;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
57	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[1]  ==  'f')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
58	[BUG]  [BUGGY]  int  start  =  chars[0]  ==  '-'?  2  :  0;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =  chars[0]  ==  '-'?  2  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  chars[0]  ==  '-'?  2  :  0;	  int    start    =    chars[0]    ==    '-'?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
59	[BUG]  [BUGGY]  int  start  =  str.indexOf('.');  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =  str.indexOf('.');  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.indexOf('.');	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(hasDecPoint)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  }	      if(hasExp)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  if(chars[i]  >=  '0'  &&  chars[i]  <  =  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(chars[i]  >=  '0'  &&  chars[i]  <  =  '9')  {  return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]  >=  '0'  &&  chars[i]  <  =  '9')  {  return  false;  }	      if(hasExp)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  Integer  chars[]  =  str.toUpperCase();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  Integer  chars[]  =  str.toUpperCase();  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toUpperCase();	      Integer    chars[]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[1]  ==  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
64	[BUG]  [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
65	[BUG]  [BUGGY]  int  start  =(chars[start  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars[start  ==  '-')?  1  :  0;  [BUGGY]    if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[start  ==  '-')?  1  :  0;	  int    start    =    (sz    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
66	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  ||  chars[i]  >=  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  int  start  =(chars[0]  ==  '0'  ||  chars[i]  >=  '9')?  1  :  0;  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '0'  ||  chars[i]  >=  '9')?  1  :  0;	      int    start    =(chars[0]    ==    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
67	[BUG]  [BUGGY]  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }	      if(hasExp)    {    if(chars[0]    ==    '0'    ||    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  if(hasDecPoint)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }	      if(hasExp)    {    if(chars[0]    ==    '0'    ||    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
69	[BUG]  [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[sz]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;      [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[sz]);  [BUGGY]    int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==     "0x   "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	chars[]  chars  =  str.toCharArray(new  char[sz]);	      chars[]    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
