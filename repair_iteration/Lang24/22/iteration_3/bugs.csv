bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(allowSigns)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(allowSigns)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(allowSigns)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }	  if(foundDigit)    {    if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
2	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasExp)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasExp)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }	  if(foundDigit)    {    if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
3	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasExp)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasExp)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }	  if(foundDigit)    {    if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
4	[BUG]  [BUGGY]  if(allowSigns)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(allowSigns)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(allowSigns)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }	  if(foundDigit)    {    if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
5	[BUG]  [BUGGY]  Integer  chars[]  =  str.toLowerCase();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  str.toLowerCase();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toLowerCase();	  Integer    chars[]    =    str.toUpperCase();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
6	[BUG]  [BUGGY]  Integer  chars[]  =  str.toUpperCase(sz);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  str.toUpperCase(sz);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toUpperCase(sz);	  Integer    chars[]    =    str.toUpperCase();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
7	[BUG]  [BUGGY]  Integer  chars[]  =  str.toUpperCase(LONG_MINUS_ONE);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  str.toUpperCase(LONG_MINUS_ONE);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toUpperCase(LONG_MINUS_ONE);	  Integer    chars[]    =    str.toUpperCase();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
8	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    &&    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
9	[BUG]  [BUGGY]  int  start  =(sz  >=  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  >=  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  >=  '0'  &&  chars[1]  ==  'f')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    &&    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
10	[BUG]  [BUGGY]  int  start  =(chars.length  <  '0'  ||  chars.length  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars.length  <  '0'  ||  chars.length  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars.length  <  '0'  ||  chars.length  >  '9')?  1  :  0;	  int    start    =(sz    <    '0'    ||    sz    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
11	[BUG]  [BUGGY]  int  start  =(sz  >=  '0'  ||  sz  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  >=  '0'  ||  sz  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  >=  '0'  ||  sz  >  '9')?  1  :  0;	  int    start    =(sz    <    '0'    ||    sz    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
12	[BUG]  [BUGGY]  int  start  =(sz  <  1  ||  sz  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  1  ||  sz  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  1  ||  sz  >  '9')?  1  :  0;	  int    start    =(sz    <    '0'    ||    sz    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
13	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  &&  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
14	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasExp)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasExp)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  }	  if(hasDecPoint)    {    if(chars[i]    ==    '0'    &&    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
15	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasExp)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasExp)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }	  if(hasDecPoint)    {    if(chars[i]    ==    '0'    &&    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
16	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }	  if(hasDecPoint)    {    if(chars[i]    ==    '0'    &&    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
17	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[i]  >=  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[i]  >=  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[i]  >=  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    ||    chars[i]    >=    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
18	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[i]  >>  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[i]  >>  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  ||  chars[i]  >>  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    ||    chars[i]    >=    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
19	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(sz,  hasExp);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  char[]  chars  =  str.toCharArray(sz,  hasExp);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(sz,  hasExp);	  char[]    chars    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
20	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0,  sz);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  char[]  chars  =  str.toCharArray(0,  sz);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(0,  sz);	  char[]    chars    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
21	[BUG]  [BUGGY]  String  chars  =  str.toCharArray(sz);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  String  chars  =  str.toCharArray(sz);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	String  chars  =  str.toCharArray(sz);	  char[]    chars    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
22	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  &&  chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[0]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
23	[BUG]  [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  <  '0'  ||  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[0]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
24	[BUG]  [BUGGY]  int  start  =(chars.length  ==  '0')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars.length  ==  '0')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars.length  ==  '0')?  1  :  0;	  int    start    =    (sz    ==    '0')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
25	[BUG]  [BUGGY]  int  start  =(chars[start]  ==  '0')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[start]  ==  '0')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[start]  ==  '0')?  1  :  0;	  int    start    =    (sz    ==    '0')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
26	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  &&  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
27	[BUG]  [BUGGY]  int  start  =(chars.length  <  sz  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars.length  <  sz  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars.length  <  sz  ||  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
28	[BUG]  [BUGGY]  int  start  =(chars[1]  <  'f'  ||  chars[sz]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[1]  <  'f'  ||  chars[sz]  ==  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[1]  <  'f'  ||  chars[sz]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
29	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasExp)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasExp)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  }	  if(!hasDecPoint)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
30	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  }	  if(!hasDecPoint)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
31	[BUG]  [BUGGY]  if(chars[i]  <  '0'  ||  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[i]  <  '0'  ||  chars[i]  >  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]  <  '0'  ||  chars[i]  >  '9')  {  return  false;  }	  if(!hasDecPoint)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
32	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[i]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[i]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  ||  chars[i]  ==  '9')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    chars[0]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
33	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  &&  chars[0]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  ==  '0'  &&  chars[0]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  &&  chars[0]  ==  '9')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    chars[0]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
34	[BUG]  [BUGGY]  if(allowSigns)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(allowSigns)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(allowSigns)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  }	  if(foundDigit)    {    if(chars[i]    ==    '0'    &&    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
35	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasExp)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasExp)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  }	  if(hasDecPoint)    {    if(chars[0]    ==    '0'    ||    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
36	[BUG]  [BUGGY]  if(chars[i]  >=  '0'  &&  chars[i]  <  =  '9')return  false;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[i]  >=  '0'  &&  chars[i]  <  =  '9')return  false;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]  >=  '0'  &&  chars[i]  <  =  '9')return  false;	  if(chars[i]    >=    '0'    &&    chars[i]    <    =    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
37	[BUG]  [BUGGY]  if(chars[i]  <  '0'  ||  chars[i]  <  =  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[i]  <  '0'  ||  chars[i]  <  =  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]  <  '0'  ||  chars[i]  <  =  '9')  {  return  false;  }	  if(chars[i]    >=    '0'    &&    chars[i]    <    =    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
38	[BUG]  [BUGGY]  if(chars[i]!=  '0'  &&  chars[i]  <  =  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[i]!=  '0'  &&  chars[i]  <  =  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]!=  '0'  &&  chars[i]  <  =  '9')  {  return  false;  }	  if(chars[i]    >=    '0'    &&    chars[i]    <    =    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
39	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[i]  <  '0'  ||  chars[i]  >  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[i]  <  '0'  ||  chars[i]  >  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[i]  <  '0'  ||  chars[i]  >  '9')return  false;  }	  if(!allowSigns)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
40	[BUG]  [BUGGY]  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;	  if(hasDecPoint)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
41	[BUG]  [BUGGY]  if(chars[i]  <  '0'  ||  chars[i]  >  '9')return  false;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[i]  <  '0'  ||  chars[i]  >  '9')return  false;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]  <  '0'  ||  chars[i]  >  '9')return  false;	  if(hasDecPoint)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
42	[BUG]  [BUGGY]  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;	  if(hasDecPoint)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
43	[BUG]  [BUGGY]  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;	  if(hasDecPoint)    {    if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
44	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }	  if(hasDecPoint)    {    if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
45	[BUG]  [BUGGY]  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;	  if(hasDecPoint)    {    if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
46	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(new  char[sz  +  1]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
47	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[SHORT_MINUS_ONE]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  char[]  chars  =  str.toCharArray(new  char[SHORT_MINUS_ONE]);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(new  char[SHORT_MINUS_ONE]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
48	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[sz]);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  char[]  chars  =  str.toCharArray(new  String[sz]);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(new  String[sz]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
49	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }	  if(hasDecPoint)    {    if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[1]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
51	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  '0'  ||  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
52	[BUG]  [BUGGY]  int  start  =  chars[0]  ==  '-'?  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  chars[0]  ==  '-'?  2;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  chars[0]  ==  '-'?  2;	  int    start    =    chars[0]    ==    '-'?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
53	[BUG]  [BUGGY]  int  start  =  chars[0]  ==  '-'?  2  :  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  chars[0]  ==  '-'?  2  :  1;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  chars[0]  ==  '-'?  2  :  1;	  int    start    =    chars[0]    ==    '-'?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
54	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  ||  sz  >  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  ==  '0'  ||  sz  >  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  ||  sz  >  'f')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    sz    <    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
55	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  ||  sz  >  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  '0'  ||  sz  >  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  '0'  ||  sz  >  'f')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    sz    <    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
56	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  ||  sz  >=  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  ==  '0'  ||  sz  >=  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  ||  sz  >=  'f')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    sz    <    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
57	[BUG]  [BUGGY]  chars[]  =  str.toCharArray()  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  chars[]  =  str.toCharArray()  +  2;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	chars[]  =  str.toCharArray()  +  2;	  chars[]    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
58	[BUG]  [BUGGY]  int  start  =  str.length()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str.length()  -  1;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.length()  -  1;	  int    start    =    str.length();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
59	[BUG]  [BUGGY]  int  start  =  str.length()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str.length()  +  1;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.length()  +  1;	  int    start    =    str.length();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
60	[BUG]  [BUGGY]  int  start  =  str.length()  -  2;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str.length()  -  2;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.length()  -  2;	  int    start    =    str.length();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
61	[BUG]  [BUGGY]  int  start  =  str.length()  +  2;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str.length()  +  2;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.length()  +  2;	  int    start    =    str.length();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
62	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[i]  <  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  ==  '0'  ||  chars[i]  <  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  ||  chars[i]  <  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    ||    chars[i]    <    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
63	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  2  :  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  2  :  1;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  2  :  1;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
64	[BUG]  [BUGGY]  int  start  =(sz  ==  '-'  ||  chars[1]  ==  '-')?  2  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  ==  '-'  ||  chars[1]  ==  '-')?  2  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '-'  ||  chars[1]  ==  '-')?  2  :  0;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
65	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[0]  ==  '0'  ||  chars[0]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[0]  ==  '0'  ||  chars[0]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  &&  chars[0]  ==  '0'  ||  chars[0]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[0]    ==    '0'    ||    chars[0]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
66	[BUG]  [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[0]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[0]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  <  '0'  ||  chars[0]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[0]    ==    '0'    ||    chars[0]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
67	[BUG]  [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[0]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[0]  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  <  '0'  ||  chars[0]  >  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[0]    ==    '0'    ||    chars[0]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
68	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  &&  chars[i]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  ==  '0'  &&  chars[i]  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  &&  chars[i]  >  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    &&    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
69	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[i]  <  =  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[i]  <  =  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[i]  <  =  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    &&    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
70	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray(sz,  hasExp);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  str.toCharArray(sz,  hasExp);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toCharArray(sz,  hasExp);	  Integer    chars[]    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
71	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray(int);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  str.toCharArray(int);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toCharArray(int);	  Integer    chars[]    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
72	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray(intValue);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  str.toCharArray(intValue);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toCharArray(intValue);	  Integer    chars[]    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
73	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[1]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[1]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  &&  chars[1]  ==  '-')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
74	[BUG]  [BUGGY]  int  start  =(chars.length  <  sz  ||  chars[1]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars.length  <  sz  ||  chars[1]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars.length  <  sz  ||  chars[1]  ==  '-')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
75	[BUG]  [BUGGY]  int  start  =(chars[1]  <  '-'  ||  chars[sz]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[1]  <  '-'  ||  chars[sz]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[1]  <  '-'  ||  chars[sz]  ==  '-')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
76	[BUG]  [BUGGY]  int  start  =(sz  >=  '0'  ||  chars[i]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  >=  '0'  ||  chars[i]  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  >=  '0'  ||  chars[i]  >  '9')?  1  :  0;	  int    start    =(chars[0]    >=    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
77	[BUG]  [BUGGY]  int  start  =(chars[0]  >>  '0'  ||  chars[i]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  >>  '0'  ||  chars[i]  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  >>  '0'  ||  chars[i]  >  '9')?  1  :  0;	  int    start    =(chars[0]    >=    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
78	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[1]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[1]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
79	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'f')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'f')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'f')return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'f')return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'f')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
81	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'f')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'f')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'f')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'f')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
82	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'f')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
83	[BUG]  [BUGGY]  Integer  chars[]  =  getChars(sz).toCharArray();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  getChars(sz).toCharArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  getChars(sz).toCharArray();	  Integer    chars[]    =    getChars(str).toCharArray();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
84	[BUG]  [BUGGY]  int  chars[]  =  getChars(str).toCharArray();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  chars[]  =  getChars(str).toCharArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  chars[]  =  getChars(str).toCharArray();	  Integer    chars[]    =    getChars(str).toCharArray();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
85	[BUG]  [BUGGY]  Integer  chars[]  =  getChars().toCharArray();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  getChars().toCharArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  getChars().toCharArray();	  Integer    chars[]    =    getChars(str).toCharArray();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
86	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
87	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  '9')return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  '9')return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
88	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  '9')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  '9')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
89	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
90	[BUG]  [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[1]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[1]  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  <  '0'  ||  chars[1]  >  '9')?  1  :  0;	  int    start    =(chars[0]    <    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
91	[BUG]  [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[1]  >=  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[1]  >=  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  <  '0'  ||  chars[1]  >=  '9')?  1  :  0;	  int    start    =(chars[0]    <    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
92	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  '-'  ||  chars[sz]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[1]  ==  '-'  ||  chars[sz]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[1]  ==  '-'  ||  chars[sz]  ==  '-')?  1  :  0;	  int    start    =(sz    ==    '-'    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
93	[BUG]  [BUGGY]  int  start  =(sz  ==  '-'  ||  chars[0]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  ==  '-'  ||  chars[0]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '-'  ||  chars[0]  ==  '-')?  1  :  0;	  int    start    =(sz    ==    '-'    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
94	[BUG]  [BUGGY]  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  chars  =  str.toCharArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	chars  =  str.toCharArray();	  String    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
95	[BUG]  [BUGGY]  String  chars  =  str.toCharArray()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  String  chars  =  str.toCharArray()  +  1;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	String  chars  =  str.toCharArray()  +  1;	  String    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
96	[BUG]  [BUGGY]  int  start  =(chars[start  +  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[start  +  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[start  +  '-')?  1  :  0;	  int    start    =(chars[start    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
97	[BUG]  [BUGGY]  int  start  =(chars[start  +  1]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[start  +  1]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[start  +  1]  ==  '-')?  1  :  0;	  int    start    =(chars[start    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
98	[BUG]  [BUGGY]  int  start  =(chars[start]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[start]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[start]  ==  '-')?  1  :  0;	  int    start    =(chars[start    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
99	[BUG]  [BUGGY]  String  chars  =  this.str.toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  String  chars  =  this.str.toCharArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	String  chars  =  this.str.toCharArray();	  char[]    chars    =    this.str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
100	[BUG]  [BUGGY]  int  start  =(sz  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    &&    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
101	[BUG]  [BUGGY]  int  start  =(sz  >=  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  >=  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  >=  '0'  &&  chars[1]  ==  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    &&    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
102	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('.',  sz);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str.lastIndexOf('.',  sz);  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.lastIndexOf('.',  sz);	  int    start    =    str.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
103	[BUG]  [BUGGY]  int  start  =  str.indexOf('.',  sz);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str.indexOf('.',  sz);  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.indexOf('.',  sz);	  int    start    =    str.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
104	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('.',  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str.lastIndexOf('.',  0);  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.lastIndexOf('.',  0);	  int    start    =    str.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
105	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('.',  chars.length);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str.lastIndexOf('.',  chars.length);  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.lastIndexOf('.',  chars.length);	  int    start    =    str.lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
106	[BUG]  [BUGGY]  if(chars[i]  ==  '0'  &&  chars[i]  <  =  '9')return  false;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[i]  ==  '0'  &&  chars[i]  <  =  '9')return  false;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]  ==  '0'  &&  chars[i]  <  =  '9')return  false;	  if(hasDecPoint)    {    if(chars[i]    ==    '0'    &&    chars[i]    >    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
107	[BUG]  [BUGGY]  int  start  =  chars[0]  &  '-'?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  chars[0]  &  '-'?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  chars[0]  &  '-'?  1  :  0;	  int    start    =    chars[0]    >=    '-'?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
108	[BUG]  [BUGGY]  int  start  =  chars[0]  +  '-'?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  chars[0]  +  '-'?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  chars[0]  +  '-'?  1  :  0;	  int    start    =    chars[0]    >=    '-'?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
109	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
110	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
111	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[start]  ==  '0'  ||  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
112	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
113	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  }	  if(hasDecPoint)    {    if(chars[0]    ==    '0'    ||    chars[1]    ==    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
114	[BUG]  [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  chars[]  chars  =  str.toCharArray(new  char[sz  +  1]);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	chars[]  chars  =  str.toCharArray(new  char[sz  +  1]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
115	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[0]);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  char[]  chars  =  str.toCharArray(new  char[0]);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(new  char[0]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
116	[BUG]  [BUGGY]  String  chars  =  this.chars.toCharArray();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  String  chars  =  this.chars.toCharArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	String  chars  =  this.chars.toCharArray();	  char[]    chars    =    this.chars.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
117	[BUG]  [BUGGY]  int  start  =  str.indexOf('.')+  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str.indexOf('.')+  2;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.indexOf('.')+  2;	  int    start    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
118	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('.')+  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str.lastIndexOf('.')+  1;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.lastIndexOf('.')+  1;	  int    start    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
119	[BUG]  [BUGGY]  int  start  =  str.indexOf('.',  sz)+  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str.indexOf('.',  sz)+  1;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.indexOf('.',  sz)+  1;	  int    start    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
120	[BUG]  [BUGGY]  String  chars[]  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  String  chars[]  chars  =  str.toCharArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	String  chars[]  chars  =  str.toCharArray();	  chars[]    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
121	[BUG]  [BUGGY]  int  start  =(sz  ==  '-'  ||  chars[1]  ==  '-')?  1  :  -1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  ==  '-'  ||  chars[1]  ==  '-')?  1  :  -1;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  ==  '-'  ||  chars[1]  ==  '-')?  1  :  -1;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
122	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '-')?  1  :  -1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '-')?  1  :  -1;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[1]  ==  '-')?  1  :  -1;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
123	[BUG]  [BUGGY]  int  start  =  str.indexOf('.',  0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str.indexOf('.',  0);  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.indexOf('.',  0);	  int    start    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
124	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  ||  chars[i]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  '0'  ||  chars[i]  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  '0'  ||  chars[i]  >  '9')?  1  :  0;	  int    start    =(chars[0]    <    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
125	[BUG]  [BUGGY]  chars[0]  =(chars[0]  <  '0'  ||  chars[i]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  chars[0]  =(chars[0]  <  '0'  ||  chars[i]  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	chars[0]  =(chars[0]  <  '0'  ||  chars[i]  >  '9')?  1  :  0;	  int    start    =(chars[0]    <    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
126	[BUG]  [BUGGY]  int  start  =(chars[i]  <  '0'  ||  chars[i]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[i]  <  '0'  ||  chars[i]  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[i]  <  '0'  ||  chars[i]  >  '9')?  1  :  0;	  int    start    =(chars[0]    <    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
127	[BUG]  [BUGGY]  int  start  =(chars[i]  ==  '0'  ||  chars[i]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[i]  ==  '0'  ||  chars[i]  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[i]  ==  '0'  ||  chars[i]  >  '9')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
128	[BUG]  [BUGGY]  int  start  =(chars[i]  >=  '0'  ||  chars[i]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[i]  >=  '0'  ||  chars[i]  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[i]  >=  '0'  ||  chars[i]  >  '9')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
129	[BUG]  [BUGGY]  int  start  =  str[0]  <  '-'?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str[0]  <  '-'?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str[0]  <  '-'?  1  :  0;	  int    start    =    chars[0]    <    '-'?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
130	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    1L    :    0;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
131	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  128  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  128  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  128  :  0;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    1L    :    0;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
132	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray()  +  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  char[]  chars  =  str.toCharArray()  +  2;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray()  +  2;	  char[]    chars    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
133	[BUG]  [BUGGY]  int  chars[]  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  chars[]  =  str.toCharArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  chars[]  =  str.toCharArray();	  Integer    chars[]    =    str.toString();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
134	[BUG]  [BUGGY]  int  start  =(chars.length  >  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars.length  >  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars.length  >  '-')?  1  :  0;	  int    start    =(chars.length    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
135	[BUG]  [BUGGY]  int  start  =(chars.length  {  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars.length  {  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars.length  {  '-')?  1  :  0;	  int    start    =(chars.length    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
136	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  &&  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  &&  chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
137	[BUG]  [BUGGY]  int  start  =(chars[1]  <  '9'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[1]  <  '9'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[1]  <  '9'  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
138	[BUG]  [BUGGY]  int  start  =(chars.length  <  sz  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars.length  <  sz  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars.length  <  sz  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
139	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray()  +  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  str.toCharArray()  +  2;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toCharArray()  +  2;	  Integer    chars[]    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
140	[BUG]  [BUGGY]  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }	  if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
141	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(sz  >  start  +  1)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(sz  >  start  +  1)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')  {  return  false;  }	  if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
142	[BUG]  [BUGGY]  if(allowSigns)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(allowSigns)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(allowSigns)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }	  if(foundDigit)    {    if(chars[i]    ==    '0'    &&    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
143	[BUG]  [BUGGY]  if(hasExp)  {  if(chars[i]  ==  '0'  &&  chars[i]  <  =  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasExp)  {  if(chars[i]  ==  '0'  &&  chars[i]  <  =  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasExp)  {  if(chars[i]  ==  '0'  &&  chars[i]  <  =  '9')  {  return  false;  }	  if(foundDigit)    {    if(chars[i]    ==    '0'    &&    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
144	[BUG]  [BUGGY]  int  start  =(chars[1]  <  '0'  ||  chars[i]  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[1]  <  '0'  ||  chars[i]  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[1]  <  '0'  ||  chars[i]  >  '9')?  1  :  0;	  int    start    =(chars[0]    <    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
145	[BUG]  [BUGGY]  Char[]  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Char[]  chars  =  str.toCharArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Char[]  chars  =  str.toCharArray();	  char[]    chars    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
146	[BUG]  [BUGGY]  if(allowSigns)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(allowSigns)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(allowSigns)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')return  false;  }	  if(hasDecPoint)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
147	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  '-'  ||  chars[1]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[1]  ==  '-'  ||  chars[1]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[1]  ==  '-'  ||  chars[1]  ==  '-')?  1  :  0;	  int    start    =(sz    ==    '-'    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
148	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')return  false;  }	  if(hasDecPoint)    {    if(chars[i]    ==    '0'    &&    chars[i]    >    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
149	[BUG]  [BUGGY]  if(hasDecPoint)  {  if(chars[i]  ==  '0'  &&  chars[i]  <  =  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint)  {  if(chars[i]  ==  '0'  &&  chars[i]  <  =  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint)  {  if(chars[i]  ==  '0'  &&  chars[i]  <  =  '9')return  false;  }	  if(hasDecPoint)    {    if(chars[i]    ==    '0'    &&    chars[i]    >    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
150	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  ||  chars.length  >  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  '0'  ||  chars.length  >  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  '0'  ||  chars.length  >  '9')?  1  :  0;	  int    start    =(sz    <    '0'    ||    sz    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
151	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  ||  sz  >  '9')?  3  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  '0'  ||  sz  >  '9')?  3  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  '0'  ||  sz  >  '9')?  3  :  0;	  int    start    =(sz    <    '0'    ||    sz    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
152	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  2  :  4;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  2  :  4;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  2  :  4;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
153	[BUG]  [BUGGY]  Integer  chars[]  =  getChars(str).toString();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  getChars(str).toString();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  getChars(str).toString();	  Integer    chars[]    =    str.toString();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
154	[BUG]  [BUGGY]  Integer  chars[]  =  getChars(str.toString());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  getChars(str.toString());  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  getChars(str.toString());	  Integer    chars[]    =    str.toString();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
155	[BUG]  [BUGGY]  int  start  =(chars.length  ==  0)?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars.length  ==  0)?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars.length  ==  0)?  1  :  0;	  int    start    =(chars.length    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
156	[BUG]  [BUGGY]  int  start  =(chars.length  ==  10)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars.length  ==  10)?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars.length  ==  10)?  1  :  0;	  int    start    =(chars.length    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
157	[BUG]  [BUGGY]  int  start  =  chars.indexOf('.');  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  chars.indexOf('.');  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  chars.indexOf('.');	  int    start    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
158	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  '0'  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
159	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  'f'  ||  chars[0]  ==  'a')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[1]  ==  'f'  ||  chars[0]  ==  'a')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[1]  ==  'f'  ||  chars[0]  ==  'a')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
160	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray(new  int[]  {  0  }  );  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  str.toCharArray(new  int[]  {  0  }  );  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toCharArray(new  int[]  {  0  }  );	  Integer    chars[]    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
161	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray(new  int[]  {  '-'  }  );  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  str.toCharArray(new  int[]  {  '-'  }  );  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toCharArray(new  int[]  {  '-'  }  );	  Integer    chars[]    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
162	[BUG]  [BUGGY]  if(allowSigns)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(allowSigns)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(allowSigns)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }	  if(hasDecPoint)    {    if(chars[0]    ==    '0'    ||    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
163	[BUG]  [BUGGY]  int  start  =(sz  >  0?  chars[0]  :  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  >  0?  chars[0]  :  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  >  0?  chars[0]  :  '0'  &&  chars[1]  ==  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    &&    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
164	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[1]);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  char[]  chars  =  str.toCharArray(new  char[1]);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(new  char[1]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
165	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[10]);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  char[]  chars  =  str.toCharArray(new  char[10]);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(new  char[10]);	  chars[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
166	[BUG]  [BUGGY]  int  start  =(chars.length  <  0  ||  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars.length  <  0  ||  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars.length  <  0  ||  chars[0]  ==  '0'  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
167	[BUG]  [BUGGY]  if(allowSigns)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(allowSigns)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(allowSigns)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  }	  if(hasDecPoint)    {    if(chars[0]    ==    '0'    ||    chars[1]    ==    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
168	[BUG]  [BUGGY]  Integer  chars[]  =  str.toUpperCase(LONG_ZERO);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  str.toUpperCase(LONG_ZERO);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toUpperCase(LONG_ZERO);	  Integer    chars[]    =    str.toUpperCase();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
169	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(start);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  char[]  chars  =  str.toCharArray(start);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(start);	  char[]    chars    =    str.toCharArray(sz);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
170	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  '-'  ||  chars[0]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[1]  ==  '-'  ||  chars[0]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[1]  ==  '-'  ||  chars[0]  ==  '-')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
171	[BUG]  [BUGGY]  if(foundDigit)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(foundDigit)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(foundDigit)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
172	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
173	[BUG]  [BUGGY]  if(allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
174	[BUG]  [BUGGY]  if(allowSigns)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(allowSigns)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(allowSigns)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }	  if(!hasDecPoint)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
175	[BUG]  [BUGGY]  if(foundDigit)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(foundDigit)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(foundDigit)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'f')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
176	[BUG]  [BUGGY]  if(allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'f')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
177	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'f')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
178	[BUG]  [BUGGY]  int  start  =(chars[start  +  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[start  +  1)?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[start  +  1)?  1  :  0;	  int    start    =(chars[start    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
179	[BUG]  [BUGGY]  int  start  =(chars[start  {  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[start  {  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[start  {  '-')?  1  :  0;	  int    start    =(chars[start    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
180	[BUG]  [BUGGY]  Integer  chars[]  =  getChars(sz,  str).toCharArray();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  getChars(sz,  str).toCharArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  getChars(sz,  str).toCharArray();	  Integer    chars[]    =    getChars(str).toCharArray();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
181	[BUG]  [BUGGY]  if(chars[i]  ==  '0'  &&  chars[i]  <  =  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[i]  ==  '0'  &&  chars[i]  <  =  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]  ==  '0'  &&  chars[i]  <  =  '9')  {  return  false;  }	  if(chars[i]    >=    '0'    &&    chars[i]    <    =    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
182	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[start]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  char[]  chars  =  str.toCharArray(new  char[start]);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(new  char[start]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
183	[BUG]  [BUGGY]  if(foundDigit)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(foundDigit)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(foundDigit)  {  if(chars[i]  ==  '0'  ||  chars[i]  >  '9')  {  return  false;  }	  if(!allowSigns)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
184	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[i]  >=  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[i]  >=  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[i]  >=  '0'  &&  chars[i]  >  '9')  {  return  false;  }	  if(!allowSigns)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
185	[BUG]  [BUGGY]  if(allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
186	[BUG]  [BUGGY]  if(!allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!allowSigns)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
187	[BUG]  [BUGGY]  if(foundDigit)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(foundDigit)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(foundDigit)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
188	[BUG]  [BUGGY]  if(foundDigit)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(foundDigit)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(foundDigit)  {  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }	  if(hasDecPoint)    {    if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
189	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1L  :  -1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1L  :  -1;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  1L  :  -1;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
190	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[i]  <  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[i]  <  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[i]  <  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    ||    chars[i]    <    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
191	[BUG]  [BUGGY]  if(foundDigit)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(foundDigit)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(foundDigit)  {  if(chars[0]  ==  '0'  ||  chars[1]  ==  '9')  {  return  false;  }	  if(!allowSigns)    {    if(chars[0]    ==    '0'    ||    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
192	[BUG]  [BUGGY]  if(chars[0]  ==  '0'  &&  chars[1]!=  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[0]  ==  '0'  &&  chars[1]!=  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[0]  ==  '0'  &&  chars[1]!=  '9')  {  return  false;  }	  if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
193	[BUG]  [BUGGY]  int  start  =(chars[start  ==  '0')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[start  ==  '0')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[start  ==  '0')?  1  :  0;	  int    start    =    (sz    ==    '0')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
194	[BUG]  [BUGGY]  int  start  =  (sz  >=  '0')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  (sz  >=  '0')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  (sz  >=  '0')?  1  :  0;	  int    start    =    (sz    ==    '0')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
195	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
196	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  '9'  ||  chars[1]  ==  '0')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[1]  ==  '9'  ||  chars[1]  ==  '0')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[1]  ==  '9'  ||  chars[1]  ==  '0')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
197	[BUG]  [BUGGY]  int  start  =(sz  >  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  >  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  >  chars.length  ||  chars[0]  ==  '0'  ||  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[0]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
198	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[0]  ==  '-')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
199	[BUG]  [BUGGY]  int  start  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '-')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
200	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[i]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[i]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[i]  ==  '-')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
201	[BUG]  [BUGGY]  if(!hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(!hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(!hasDecPoint)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
202	[BUG]  [BUGGY]  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  '9')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
203	[BUG]  [BUGGY]  if(hasDecPoint  ||  chars[i]  >  '9')return  false;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint  ||  chars[i]  >  '9')return  false;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint  ||  chars[i]  >  '9')return  false;	  if(hasDecPoint)    {    if(chars[i]    ==    '0'    &&    chars[i]    >    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
204	[BUG]  [BUGGY]  if(chars[i]  >=  '0'  &&  chars[i]  >  '9')return  false;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[i]  >=  '0'  &&  chars[i]  >  '9')return  false;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]  >=  '0'  &&  chars[i]  >  '9')return  false;	  if(hasDecPoint)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
205	[BUG]  [BUGGY]  int  start  =(sz  <  '0')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  '0')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  '0')?  1  :  0;	  int    start    =    (sz    ==    '0')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
206	[BUG]  [BUGGY]  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]  ==  '0'  &&  chars[i]  >  '9')  {  return  false;  }	  if(!hasDecPoint)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
207	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]!=  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]!=  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[1]!=  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    &&    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
208	[BUG]  [BUGGY]  int  start  =(sz  <  '0'  ||  chars[0]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  '0'  ||  chars[0]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  '0'  ||  chars[0]  ==  '9')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    chars[0]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
209	[BUG]  [BUGGY]  Integer  chars[]  =  getChars(str,  hasExp).toCharArray();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  getChars(str,  hasExp).toCharArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  getChars(str,  hasExp).toCharArray();	  Integer    chars[]    =    getChars(str).toCharArray();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
210	[BUG]  [BUGGY]  Integer  chars[]  =  getChars(str.toCharArray());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  getChars(str.toCharArray());  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  getChars(str.toCharArray());	  Integer    chars[]    =    getChars(str).toCharArray();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
211	[BUG]  [BUGGY]  if(chars[i]  >=  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[i]  >=  '0'  &&  chars[i]  >  '9')  {  return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]  >=  '0'  &&  chars[i]  >  '9')  {  return  false;  }	  if(hasDecPoint)    {    if(chars[i]    ==    '0'    ||    chars[i]    >    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
212	[BUG]  [BUGGY]  int  start  =  str.indexOf('.')/  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  str.indexOf('.')/  1;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  str.indexOf('.')/  1;	  int    start    =    str.indexOf('.')+    1;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
213	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  &&  chars[0]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  &&  chars[0]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  &&  chars[0]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[0]    ==    '0'    ||    chars[0]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
214	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[i]  ==  '0'  ||  chars[0]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[i]  ==  '0'  ||  chars[0]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[i]  ==  '0'  ||  chars[0]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[0]    ==    '0'    ||    chars[0]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
215	[BUG]  [BUGGY]  if(hasDecPoint  ||  chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint  ||  chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint  ||  chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;	  if(hasDecPoint)    {    if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
216	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[i]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[i]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[i]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
217	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '0')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[1]  ==  '0')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[1]  ==  '0')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
218	[BUG]  [BUGGY]  int  start  =(chars[1]  ==  '9'  ||  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[1]  ==  '9'  ||  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[1]  ==  '9'  ||  chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
219	[BUG]  [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint  ||  hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint  ||  hasExp)  {  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
220	[BUG]  [BUGGY]  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'x')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
221	[BUG]  [BUGGY]  int  start  =(sz  >  '0'  ||  sz  <  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  >  '0'  ||  sz  <  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  >  '0'  ||  sz  <  'f')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    sz    <    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
222	[BUG]  [BUGGY]  int  start  =(sz  >=  '0'  ||  sz  >  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  >=  '0'  ||  sz  >  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  >=  '0'  ||  sz  >  'f')?  1  :  0;	  int    start    =(sz    ==    '0'    ||    sz    <    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
223	[BUG]  [BUGGY]  int  start  =(chars.length  <  chars.length  ||  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars.length  <  chars.length  ||  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars.length  <  chars.length  ||  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
224	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[0]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
225	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  'f')?  2  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  'f')?  2  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[1]  ==  'f')?  2  :  0;	  int    start    =(chars[0]    ==    '0'    &&    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
226	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[0]  <  =  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  ==  '0'  &&  chars[0]  <  =  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '0'  &&  chars[0]  <  =  '9')?  1  :  0;	  int    start    =(chars[0]    ==    '0'    &&    chars[0]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
227	[BUG]  [BUGGY]  int  start  =(chars[start]  ==  '-'  ||  chars[1]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[start]  ==  '-'  ||  chars[1]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[start]  ==  '-'  ||  chars[1]  ==  '-')?  1  :  0;	  int    start    =(sz    ==    '-'    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
228	[BUG]  [BUGGY]  int  start  =(chars[start]  ==  '-'  ||  chars[start1]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[start]  ==  '-'  ||  chars[start1]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[start]  ==  '-'  ||  chars[start1]  ==  '-')?  1  :  0;	  int    start    =(sz    ==    '-'    ||    chars[1]    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
229	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  2  :  -1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  2  :  -1;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  2  :  -1;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    1    :    -1;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
230	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCHARArray();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  str.toCHARArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.toCHARArray();	  Integer    chars[]    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
231	[BUG]  [BUGGY]  if(hasDecPoint  ||  chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(hasDecPoint  ||  chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(hasDecPoint  ||  chars[0]  ==  '0'  ||  chars[1]  ==  '9')return  false;	  if(hasDecPoint)    {    if(chars[0]    ==    '0'    ||    chars[1]    ==    '9')return    false;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
232	[BUG]  [BUGGY]  int  start  =(chars[start  +  sz]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[start  +  sz]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[start  +  sz]  ==  '-')?  1  :  0;	  int    start    =(chars[start    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
233	[BUG]  [BUGGY]  int  start  =(chars[start  +  0]  ==  '-')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[start  +  0]  ==  '-')?  1  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[start  +  0]  ==  '-')?  1  :  0;	  int    start    =(chars[start    ==    '-')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
234	[BUG]  [BUGGY]  int  start  =  chars[0]  ==  '-'?  3  :  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =  chars[0]  ==  '-'?  3  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =  chars[0]  ==  '-'?  3  :  0;	  int    start    =    chars[0]    ==    '-'?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
235	[BUG]  [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  3  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  3  :  0;  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  ==  '-'  ||  chars[1]  ==  '-')?  3  :  0;	  int    start    =(chars[0]    ==    '-'    ||    chars[1]    ==    '-')?    2    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
236	[BUG]  [BUGGY]  if(chars[i]  >=  '0'  &&  chars[i]  <  =  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[i]  >=  '0'  &&  chars[i]  <  =  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[i]  >=  '0'  &&  chars[i]  <  =  '9')return  false;  }	  if(chars[i]    >=    '0'    &&    chars[i]    <    =    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
237	[BUG]  [BUGGY]  int  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  chars  =  str.toCharArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  chars  =  str.toCharArray();	  String    chars    =    str.toCharArray();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
238	[BUG]  [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  chars  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  chars  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  chars	  int    start    =(chars[0]    <    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
239	[BUG]  [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'Z')&&(chars[i]  <  'A'  ||  chars  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'Z')&&(chars[i]  <  'A'  ||  chars  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'A'  ||  chars[i]  >  'Z')&&(chars[i]  <  'A'  ||  chars	  int    start    =(chars[0]    <    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
240	[BUG]  [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(chars[0]  <  '0'  ||  chars[i]  >  '9')&&(chars[i]  <  'a'  ||  chars[i]  >  'f')&&(chars[i]  <  'A'  ||  char	  int    start    =(chars[0]    <    '0'    ||    chars[i]    >    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
241	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz  -  1]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz  -  1]);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(new  char[sz  -  1]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
242	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz  *  sz]);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  char[]  chars  =  str.toCharArray(new  char[sz  *  sz]);  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	char[]  chars  =  str.toCharArray(new  char[sz  *  sz]);	  char[]    chars    =    str.toCharArray(new    char[sz]);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
243	[BUG]  [BUGGY]  Chars[]  chars  =  str.toCharArray();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Chars[]  chars  =  str.toCharArray();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Chars[]  chars  =  str.toCharArray();	  chars[]    =    str.toCharArray()    +    1;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
244	[BUG]  [BUGGY]  Integer  chars[]  =  str.getChars();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  Integer  chars[]  =  str.getChars();  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	Integer  chars[]  =  str.getChars();	  Integer    chars[]    =    str.toString();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
245	[BUG]  [BUGGY]  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[0]  ==  '0'  &&  chars[1]  ==  '9')return  false;  }	  if(chars[0]    ==    '0'    &&    chars[1]    ==    '9')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
246	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  &&  chars[1]  ==  '9')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[0]    ==    '0'    ||    chars[1]    ==    '9')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
247	[BUG]  [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;  [BUGGY]      int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	int  start  =(sz  <  chars.length  ||  chars[0]  ==  '0'  &&  chars[1]  ==  'f')?  1  :  0;	  int    start    =(sz    <    chars.length    ||    chars[0]    ==    '0'    ||    chars[1]    ==    'f')?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
248	[BUG]  [BUGGY]  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (StringUtils.isEmpty(str))  {  return  false;  }  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;        [BUGGY]  if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }  [BUGGY]      if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  if  (i  ==  sz)  {  return  false;  //  str  ==       "0x     "  }  for  (;  i  <  chars.length;  i++)  {  if  ((chars[i]  <  '0'  ||  chars[i]  >  '9')  &&  (chars[i]  <  'a'  ||  chars[i]  >  'f')  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1330	1330	1	replace	if(chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'f')  {  return  false;  }	  if(hasExp)    {    if(chars[start]    ==    '0'    ||    chars[start    +    1]    ==    'f')    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
