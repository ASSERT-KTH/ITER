bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  ]);  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  ]);  [BUGGY]  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[str.length()  ]);	char[]  chars  =  str.toCharArray();  	non-compiled	[CE]  not  a  statement	31	None	replace
2	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII);  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII);  [BUGGY]  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII);	char[]  chars  =  str.toCharArray();  	non-compiled	[CE]  not  a  statement	31	None	replace
3	[BUG]  [BUGGY]  char[]  chars  =  str.getChars();  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]  char[]  chars  =  str.getChars();  [BUGGY]  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars();	char[]  chars  =  str.toCharArray();  	non-compiled	[CE]  not  a  statement	31	None	replace
4	[BUG]  [BUGGY]    [CE]  not  a  statement  [FE]          AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]    [BUGGY]  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	  	char[]  chars  =  str.toCharArray();  	non-compiled	[CE]  not  a  statement	31	None	replace
5	[BUG]  [BUGGY]    if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]    if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  [BUGGY]  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	    if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars		non-compiled	[CE]  not  a  statement	32	None	add
6	[BUG]  [BUGGY]    if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]    if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  [BUGGY]  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	    if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars		non-compiled	[CE]  not  a  statement	32	None	add
7	[BUG]  [BUGGY]    if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]    if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]  [BUGGY]  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	    if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]		non-compiled	[CE]  not  a  statement	32	None	add
8	[BUG]  [BUGGY]    if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]  [CE]  not  a  statement  [FE]          AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]    if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]  [BUGGY]  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	    if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]		non-compiled	[CE]  not  a  statement	32	None	add
9	[BUG]  [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray();  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray();  [BUGGY]  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str  ==  null?  null  :  str.toCharArray();	char[]  chars  =  str.toCharArray();  	non-compiled	[CE]  not  a  statement	31	None	replace
10	[BUG]  [BUGGY]  char[]  chars  =  this.chars.toCharArray();  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]  char[]  chars  =  this.chars.toCharArray();  [BUGGY]  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  this.chars.toCharArray();	char[]  chars  =  str.toCharArray();  	non-compiled	[CE]  not  a  statement	31	None	replace
11	[BUG]  [BUGGY]  char[]  chars  =  getChars(str).toCharArray();  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]  char[]  chars  =  getChars(str).toCharArray();  [BUGGY]  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str).toCharArray();	char[]  chars  =  str.toCharArray();  	non-compiled	[CE]  not  a  statement	31	None	replace
12	[BUG]  [BUGGY]    if(str  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]    if(str  ==  null)  {  return  false;  }  [BUGGY]  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	    if(str  ==  null)  {  return  false;  }		non-compiled	[CE]  not  a  statement	32	None	add
13	[BUG]  [BUGGY]    int  start  =  str.length();  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]    int  start  =  str.length();  [BUGGY]  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	    int  start  =  str.length();		non-compiled	[CE]  not  a  statement	32	None	add
14	[BUG]  [BUGGY]    if(str  ==  null)  {  return  true;  }  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]    if(str  ==  null)  {  return  true;  }  [BUGGY]  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	    if(str  ==  null)  {  return  true;  }		non-compiled	[CE]  not  a  statement	32	None	add
15	[BUG]  [BUGGY]    int  i  =  start  +  1;  [CE]  not  a  statement  [FE]          AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]    int  i  =  start  +  1;  [BUGGY]  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	    int  i  =  start  +  1;		non-compiled	[CE]  not  a  statement	32	None	add
16	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[str.length()  ]);  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[str.length()  ]);  [BUGGY]  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[str.length()  ]);	char[]  chars  =  str.toCharArray();  	non-compiled	[CE]  not  a  statement	31	None	replace
17	[BUG]  [BUGGY]    int  chars  =  str.length();  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]    int  chars  =  str.length();  [BUGGY]  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	    int  chars  =  str.length();		non-compiled	[CE]  not  a  statement	32	None	add
18	[BUG]  [BUGGY]    int  chars  =  str.lastIndexOf('.');  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]    int  chars  =  str.lastIndexOf('.');  [BUGGY]  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	    int  chars  =  str.lastIndexOf('.');		non-compiled	[CE]  not  a  statement	32	None	add
19	[BUG]  [BUGGY]    int  chars  =  str.lastIndexOf('-');  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }  [BUGGY]    int  chars  =  str.lastIndexOf('-');  [BUGGY]  char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	    int  chars  =  str.lastIndexOf('-');		non-compiled	[CE]  not  a  statement	32	None	add
