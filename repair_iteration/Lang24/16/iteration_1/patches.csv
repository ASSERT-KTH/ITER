bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars[i]    	non-compiled	[CE]  not  a  statement	7	None	replace
2	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]!=  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]!=  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]!=	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars[i]    	non-compiled	[CE]  not  a  statement	7	None	replace
3	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars[i]    	non-compiled	[CE]  not  a  statement	7	None	replace
4	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]!=  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]!=  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]!=	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars[i]    	non-compiled	[CE]  not  a  statement	7	None	replace
5	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('.',  0);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  chars  =  str.lastIndexOf('.',  0);  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('.',  0);	      int    chars    =    str.lastIndexOf('.');    	non-compiled	[CE]  not  a  statement	18	None	replace
6	[BUG]  [BUGGY]  int  chars  =  str.indexOf('.');  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  chars  =  str.indexOf('.');  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.indexOf('.');	      int    chars    =    str.lastIndexOf('.');    	non-compiled	[CE]  not  a  statement	18	None	replace
7	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('.',  1);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  chars  =  str.lastIndexOf('.',  1);  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('.',  1);	      int    chars    =    str.lastIndexOf('.');    	non-compiled	[CE]  not  a  statement	18	None	replace
8	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('-',  0);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  chars  =  str.lastIndexOf('-',  0);  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('-',  0);	      int    chars    =    str.lastIndexOf('-');    	non-compiled	[CE]  not  a  statement	19	None	replace
9	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('-',  1);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  chars  =  str.lastIndexOf('-',  1);  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('-',  1);	      int    chars    =    str.lastIndexOf('-');    	non-compiled	[CE]  not  a  statement	19	None	replace
10	[BUG]  [BUGGY]  int  chars  =  str.indexOf('-',  0);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  chars  =  str.indexOf('-',  0);  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.indexOf('-',  0);	      int    chars    =    str.lastIndexOf('-');    	non-compiled	[CE]  not  a  statement	19	None	replace
11	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  -  1]);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  -  1]);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[str.length()  -  1]);	  char[]    chars    =    str.toCharArray(new    char[str.length()    ]);    	non-compiled	[CE]  not  a  statement	1	None	replace
12	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  +  1]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  +  1]);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[str.length()  +  1]);	  char[]    chars    =    str.toCharArray(new    char[str.length()    ]);    	non-compiled	[CE]  not  a  statement	1	None	replace
13	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  0);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  0);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  0);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII);    	non-compiled	[CE]  not  a  statement	2	None	replace
14	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII);    	non-compiled	[CE]  not  a  statement	2	None	replace
15	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  false);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  false);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  false);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII);    	non-compiled	[CE]  not  a  statement	2	None	replace
16	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(0,  0);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.getChars(0,  0);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(0,  0);	  char[]    chars    =    str.getChars();    	non-compiled	[CE]  not  a  statement	3	None	replace
17	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(intValue);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.getChars(intValue);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(intValue);	  char[]    chars    =    str.getChars();    	non-compiled	[CE]  not  a  statement	3	None	replace
18	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars[i]    	non-compiled	[CE]  not  a  statement	8	None	replace
19	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars[i]    	non-compiled	[CE]  not  a  statement	8	None	replace
20	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]!=  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]!=  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]!=	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars[i]    	non-compiled	[CE]  not  a  statement	8	None	replace
21	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]!=  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]!=  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]!=	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars[i]    	non-compiled	[CE]  not  a  statement	8	None	replace
22	[BUG]  [BUGGY]  if(chars  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(chars  ==  null)  {  return  false;  }  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  return  false;  }	      if(str    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
23	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)  {  return  false;  }  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  str.length()  ==  0)  {  return  false;  }	      if(str    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
24	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()!=  0)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null  ||  str.length()!=  0)  {  return  false;  }  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  str.length()!=  0)  {  return  false;  }	      if(str    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
25	[BUG]  [BUGGY]  char[]  chars  =  str!=  null?  null  :  str.toCharArray();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str!=  null?  null  :  str.toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str!=  null?  null  :  str.toCharArray();	  char[]    chars    =    str    ==    null?    null    :    str.toCharArray();    	non-compiled	[CE]  not  a  statement	9	None	replace
26	[BUG]  [BUGGY]  String  chars  =  str  ==  null?  null  :  str.toCharArray();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  String  chars  =  str  ==  null?  null  :  str.toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars  =  str  ==  null?  null  :  str.toCharArray();	  char[]    chars    =    str    ==    null?    null    :    str.toCharArray();    	non-compiled	[CE]  not  a  statement	9	None	replace
27	[BUG]  [BUGGY]  chars[]  chars  =  str.toCharArray();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  chars[]  chars  =  str.toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars[]  chars  =  str.toCharArray();	      	non-compiled	[CE]  not  a  statement	4	None	replace
28	[BUG]  [BUGGY]  Integer  chars[]  =  str.toCharArray();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  Integer  chars[]  =  str.toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  chars[]  =  str.toCharArray();	      	non-compiled	[CE]  not  a  statement	4	None	replace
29	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	5	None	replace
30	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	5	None	replace
31	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	5	None	replace
32	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  null  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  null  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  null	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	5	None	replace
33	[BUG]  [BUGGY]  char[]  chars  =  getChars(str),  str.toCharArray();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  getChars(str),  str.toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str),  str.toCharArray();	  char[]    chars    =    getChars(str).toCharArray();    	non-compiled	[CE]  not  a  statement	11	None	replace
34	[BUG]  [BUGGY]  char[]  chars  =  getChars().toCharArray();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  getChars().toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars().toCharArray();	  char[]    chars    =    getChars(str).toCharArray();    	non-compiled	[CE]  not  a  statement	11	None	replace
35	[BUG]  [BUGGY]  String  chars  =  getChars(str).toCharArray();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  String  chars  =  getChars(str).toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars  =  getChars(str).toCharArray();	  char[]    chars    =    getChars(str).toCharArray();    	non-compiled	[CE]  not  a  statement	11	None	replace
36	[BUG]  [BUGGY]  int  start  =  str.length()  -  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  start  =  str.length()  -  1;  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  start  =  str.length()  -  1;	      int    start    =    str.length();    	non-compiled	[CE]  not  a  statement	13	None	replace
37	[BUG]  [BUGGY]  int  start  =  str.length()  +  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  start  =  str.length()  +  1;  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  start  =  str.length()  +  1;	      int    start    =    str.length();    	non-compiled	[CE]  not  a  statement	13	None	replace
38	[BUG]  [BUGGY]  int  start  =  str.length()  -  2;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  start  =  str.length()  -  2;  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  start  =  str.length()  -  2;	      int    start    =    str.length();    	non-compiled	[CE]  not  a  statement	13	None	replace
39	[BUG]  [BUGGY]  char[]  chars  =  this.chars.getChars();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  this.chars.getChars();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  this.chars.getChars();	  char[]    chars    =    this.chars.toCharArray();    	non-compiled	[CE]  not  a  statement	10	None	replace
40	[BUG]  [BUGGY]  String  chars  =  this.chars.toCharArray();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  String  chars  =  this.chars.toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars  =  this.chars.toCharArray();	  char[]    chars    =    this.chars.toCharArray();    	non-compiled	[CE]  not  a  statement	10	None	replace
41	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[str.length()  +  1]);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.toCharArray(new  String[str.length()  +  1]);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[str.length()  +  1]);	  char[]    chars    =    str.toCharArray(new    String[str.length()    ]);    	non-compiled	[CE]  not  a  statement	16	None	replace
42	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[str.length()  -  1]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.toCharArray(new  String[str.length()  -  1]);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[str.length()  -  1]);	  char[]    chars    =    str.toCharArray(new    String[str.length()    ]);    	non-compiled	[CE]  not  a  statement	16	None	replace
43	[BUG]  [BUGGY]  char[]  chars  =  new  String[str.length()  ];  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  new  String[str.length()  ];  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  new  String[str.length()  ];	  char[]    chars    =    str.toCharArray(new    String[str.length()    ]);    	non-compiled	[CE]  not  a  statement	16	None	replace
44	[BUG]  [BUGGY]  int  chars  =  str.length()  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  chars  =  str.length()  +  1;  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.length()  +  1;	      int    chars    =    str.length();    	non-compiled	[CE]  not  a  statement	17	None	replace
45	[BUG]  [BUGGY]  int  charsLength  =  str.length();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  charsLength  =  str.length();  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  charsLength  =  str.length();	      int    chars    =    str.length();    	non-compiled	[CE]  not  a  statement	17	None	replace
46	[BUG]  [BUGGY]  chars  =  str.length();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  chars  =  str.length();  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.length();	      int    chars    =    str.length();    	non-compiled	[CE]  not  a  statement	17	None	replace
47	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	6	None	replace
48	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	6	None	replace
49	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  null  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  null  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  null	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	6	None	replace
50	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	6	None	replace
51	[BUG]  [BUGGY]  int  i  =  start  +  2;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  i  =  start  +  2;  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  i  =  start  +  2;	      int    i    =    start    +    1;    	non-compiled	[CE]  not  a  statement	15	None	replace
52	[BUG]  [BUGGY]  int  i  =  start  +  3;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  i  =  start  +  3;  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  i  =  start  +  3;	      int    i    =    start    +    1;    	non-compiled	[CE]  not  a  statement	15	None	replace
53	[BUG]  [BUGGY]  int  i  =  start  +  4;  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  i  =  start  +  4;  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  i  =  start  +  4;	      int    i    =    start    +    1;    	non-compiled	[CE]  not  a  statement	15	None	replace
54	[BUG]  [BUGGY]  if(chars  ==  null)  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(chars  ==  null)  {  return  true;  }  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  return  true;  }	      if(str    ==    null)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
55	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)  {  return  true;  }  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  str.length()  ==  0)  {  return  true;  }	      if(str    ==    null)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
56	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()!=  0)  {  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null  ||  str.length()!=  0)  {  return  true;  }  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  str.length()!=  0)  {  return  true;  }	      if(str    ==    null)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
57	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(i);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.getChars(i);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(i);	  char[]    chars    =    str.getChars();    	non-compiled	[CE]  not  a  statement	3	None	replace
58	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]  }  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]  }	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars[i]    	non-compiled	[CE]  not  a  statement	8	None	replace
59	[BUG]  [BUGGY]  Integer  chars  =  str.substring(start  +  1,  str.length());  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  Integer  chars  =  str.substring(start  +  1,  str.length());  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  chars  =  str.substring(start  +  1,  str.length());	      	non-compiled	[CE]  not  a  statement	4	None	replace
60	[BUG]  [BUGGY]  int  charsStart  =  str.length();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  charsStart  =  str.length();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  charsStart  =  str.length();	      	non-compiled	[CE]  not  a  statement	4	None	replace
61	[BUG]  [BUGGY]  char[]  chars  =  getChars(str,  start).toCharArray();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  getChars(str,  start).toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str,  start).toCharArray();	  char[]    chars    =    getChars(str).toCharArray();    	non-compiled	[CE]  not  a  statement	11	None	replace
62	[BUG]  [BUGGY]  char[]  chars  =  getChars(start).toCharArray();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  getChars(start).toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(start).toCharArray();	  char[]    chars    =    getChars(str).toCharArray();    	non-compiled	[CE]  not  a  statement	11	None	replace
63	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	5	None	replace
64	[BUG]  [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	5	None	replace
65	[BUG]  [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	6	None	replace
66	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	6	None	replace
67	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII);    	non-compiled	[CE]  not  a  statement	2	None	replace
68	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('.',  start);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  chars  =  str.lastIndexOf('.',  start);  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('.',  start);	      int    chars    =    str.lastIndexOf('.');    	non-compiled	[CE]  not  a  statement	18	None	replace
69	[BUG]  [BUGGY]  int  chars  =  str.charAt(str.lastIndexOf('.'));  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  chars  =  str.charAt(str.lastIndexOf('.'));  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.charAt(str.lastIndexOf('.'));	      int    chars    =    str.lastIndexOf('.');    	non-compiled	[CE]  not  a  statement	18	None	replace
70	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(str)]);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(str)]);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(str)]);	  char[]    chars    =    str.toCharArray(new    char[str.length()    ]);    	non-compiled	[CE]  not  a  statement	1	None	replace
71	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('-',  start);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  chars  =  str.lastIndexOf('-',  start);  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('-',  start);	      int    chars    =    str.lastIndexOf('-');    	non-compiled	[CE]  not  a  statement	19	None	replace
72	[BUG]  [BUGGY]  int  chars  =  str.indexOf('-');  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  chars  =  str.indexOf('-');  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.indexOf('-');	      int    chars    =    str.lastIndexOf('-');    	non-compiled	[CE]  not  a  statement	19	None	replace
73	[BUG]  [BUGGY]  int  chars  =  str.charAt(start);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  chars  =  str.charAt(start);  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.charAt(start);	      int    chars    =    str.lastIndexOf('-');    	non-compiled	[CE]  not  a  statement	19	None	replace
74	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]  }  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]  }	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars[i]    	non-compiled	[CE]  not  a  statement	7	None	replace
75	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[chars.length()  ]);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.toCharArray(new  String[chars.length()  ]);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[chars.length()  ]);	  char[]    chars    =    str.toCharArray(new    String[str.length()    ]);    	non-compiled	[CE]  not  a  statement	16	None	replace
76	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(str)]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(str)]);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(str)]);	  char[]    chars    =    str.toCharArray(new    String[str.length()    ]);    	non-compiled	[CE]  not  a  statement	16	None	replace
77	[BUG]  [BUGGY]  if(str  ==  null  ||  chars.length  <  2)  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null  ||  chars.length  <  2)  {  return  false;  }  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  chars.length  <  2)  {  return  false;  }	      if(str    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
78	[BUG]  [BUGGY]  if(str  ==  null  ||  chars.length  ==  0)  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null  ||  chars.length  ==  0)  {  return  false;  }  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  chars.length  ==  0)  {  return  false;  }	      if(str    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	12	None	replace
79	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	6	None	replace
80	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	6	None	replace
81	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII);    	non-compiled	[CE]  not  a  statement	2	None	replace
82	[BUG]  [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  char[str.length()  ]);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  char[str.length()  ]);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  char[str.length()  ]);	  char[]    chars    =    str    ==    null?    null    :    str.toCharArray();    	non-compiled	[CE]  not  a  statement	9	None	replace
83	[BUG]  [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  String[str.length()  ]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  String[str.length()  ]);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  String[str.length()  ]);	  char[]    chars    =    str    ==    null?    null    :    str.toCharArray();    	non-compiled	[CE]  not  a  statement	9	None	replace
84	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars    	non-compiled	[CE]  not  a  statement	5	None	replace
85	[BUG]  [BUGGY]  char[]  chars  =  this.chars.toCharArray(new  char[str.length()  ]);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  this.chars.toCharArray(new  char[str.length()  ]);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  this.chars.toCharArray(new  char[str.length()  ]);	  char[]    chars    =    this.chars.toCharArray();    	non-compiled	[CE]  not  a  statement	10	None	replace
86	[BUG]  [BUGGY]  chars[]  =  str.toCharArray();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  chars[]  =  str.toCharArray();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars[]  =  str.toCharArray();	      	non-compiled	[CE]  not  a  statement	4	None	replace
87	[BUG]  [BUGGY]  char[]  chars  =  getChars(str);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  getChars(str);  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str);	  char[]    chars    =    getChars(str).toCharArray();    	non-compiled	[CE]  not  a  statement	11	None	replace
88	[BUG]  [BUGGY]  char[]  chars  =  str.trim();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  char[]  chars  =  str.trim();  [BUGGY]    int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.trim();	  char[]    chars    =    str.getChars();    	non-compiled	[CE]  not  a  statement	3	None	replace
89	[BUG]  [BUGGY]  if(str  ==  null  ||  chars.length  ==  0)  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null  ||  chars.length  ==  0)  {  return  true;  }  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  chars.length  ==  0)  {  return  true;  }	      if(str    ==    null)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
90	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('.');  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  int  start  =  str.lastIndexOf('.');  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  start  =  str.lastIndexOf('.');	      int    start    =    str.length();    	non-compiled	[CE]  not  a  statement	13	None	replace
91	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars[i]    	non-compiled	[CE]  not  a  statement	7	None	replace
92	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars[i]    	non-compiled	[CE]  not  a  statement	8	None	replace
93	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }    [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [BUGGY]    char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'	      if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars[i]    	non-compiled	[CE]  not  a  statement	8	None	replace
