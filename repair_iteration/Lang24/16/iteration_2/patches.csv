bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  1);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  1);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    0);    	non-compiled	[CE]  not  a  statement	13	None	replace
2	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0,  CharacterEncodingNames.US_ASCII);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(0,  CharacterEncodingNames.US_ASCII);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(0,  CharacterEncodingNames.US_ASCII);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    0);    	non-compiled	[CE]  not  a  statement	13	None	replace
3	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  4);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  4);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  4);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    0);    	non-compiled	[CE]  not  a  statement	13	None	replace
4	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0L,  0);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(0L,  0);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(0L,  0);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    0);    	non-compiled	[CE]  not  a  statement	13	None	replace
5	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    	non-compiled	[CE]  not  a  statement	93	None	replace
6	[BUG]  [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    	non-compiled	[CE]  not  a  statement	93	None	replace
7	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    	non-compiled	[CE]  not  a  statement	93	None	replace
8	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length  -  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length  -  1);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length  -  1);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    chars.length);    	non-compiled	[CE]  not  a  statement	14	None	replace
9	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length  +  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length  +  1);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length  +  1);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    chars.length);    	non-compiled	[CE]  not  a  statement	14	None	replace
10	[BUG]  [BUGGY]  String  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  String  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    chars.length);    	non-compiled	[CE]  not  a  statement	14	None	replace
11	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars[i]!=    	non-compiled	[CE]  not  a  statement	20	None	replace
12	[BUG]  [BUGGY]  chars  =  str.charAt(str.length());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.charAt(str.length());  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.charAt(str.length());	  int    chars    =    str.charAt(str.lastIndexOf('.'));    	non-compiled	[CE]  not  a  statement	69	None	replace
13	[BUG]  [BUGGY]  chars  =  str.charAt(str.lastIndexOf('.')+  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.charAt(str.lastIndexOf('.')+  1);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.charAt(str.lastIndexOf('.')+  1);	  int    chars    =    str.charAt(str.lastIndexOf('.'));    	non-compiled	[CE]  not  a  statement	69	None	replace
14	[BUG]  [BUGGY]  chars  =  str.charAt(sz.lastIndexOf('.'));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.charAt(sz.lastIndexOf('.'));  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.charAt(sz.lastIndexOf('.'));	  int    chars    =    str.charAt(str.lastIndexOf('.'));    	non-compiled	[CE]  not  a  statement	69	None	replace
15	[BUG]  [BUGGY]  chars  =  str.charAt(str.length()  -  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.charAt(str.length()  -  1);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.charAt(str.length()  -  1);	  int    chars    =    str.charAt(str.lastIndexOf('.'));    	non-compiled	[CE]  not  a  statement	69	None	replace
16	[BUG]  [BUGGY]  char[]  chars  =  getChars(i).toCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(i).toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(i).toCharArray();	  char[]    chars    =    getChars(start).toCharArray();    	non-compiled	[CE]  not  a  statement	62	None	replace
17	[BUG]  [BUGGY]  Integer  chars  =  str.substring(start  +  1,  str.length()  -  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  Integer  chars  =  str.substring(start  +  1,  str.length()  -  1);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  chars  =  str.substring(start  +  1,  str.length()  -  1);	  Integer    chars    =    str.substring(start    +    1,    str.length());    	non-compiled	[CE]  not  a  statement	59	None	replace
18	[BUG]  [BUGGY]  Integer  chars  =  str.substring(start,  start  +  1,  str.length());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  Integer  chars  =  str.substring(start,  start  +  1,  str.length());  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  chars  =  str.substring(start,  start  +  1,  str.length());	  Integer    chars    =    str.substring(start    +    1,    str.length());    	non-compiled	[CE]  not  a  statement	59	None	replace
19	[BUG]  [BUGGY]  Integer  chars  =  str.substring(start  +  1,  str.length()  -  2);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  Integer  chars  =  str.substring(start  +  1,  str.length()  -  2);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  chars  =  str.substring(start  +  1,  str.length()  -  2);	  Integer    chars    =    str.substring(start    +    1,    str.length());    	non-compiled	[CE]  not  a  statement	59	None	replace
20	[BUG]  [BUGGY]  Integer  chars  =  str.substring(start  +  1,  str.length()  -  4);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  Integer  chars  =  str.substring(start  +  1,  str.length()  -  4);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  chars  =  str.substring(start  +  1,  str.length()  -  4);	  Integer    chars    =    str.substring(start    +    1,    str.length());    	non-compiled	[CE]  not  a  statement	59	None	replace
21	[BUG]  [BUGGY]  Integer  chars  =  str.length();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  Integer  chars  =  str.length();  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  chars  =  str.length();	  int    chars    =    str.length()    +    1;    	non-compiled	[CE]  not  a  statement	44	None	replace
22	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars[i]    }    	non-compiled	[CE]  not  a  statement	74	None	replace
23	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars[i]	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars[i]!=    	non-compiled	[CE]  not  a  statement	4	None	replace
24	[BUG]  [BUGGY]  Integer  chars[]  =  str.getChars();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  Integer  chars[]  =  str.getChars();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  chars[]  =  str.getChars();	  Integer    chars[]    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	28	None	replace
25	[BUG]  [BUGGY]  String  chars[]  =  str.toCharArray();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  String  chars[]  =  str.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars[]  =  str.toCharArray();	  Integer    chars[]    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	28	None	replace
26	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars    }    	non-compiled	[CE]  not  a  statement	30	None	replace
27	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars    }    	non-compiled	[CE]  not  a  statement	30	None	replace
28	[BUG]  [BUGGY]  if(str!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars    }    	non-compiled	[CE]  not  a  statement	30	None	replace
29	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    	non-compiled	[CE]  not  a  statement	31	None	replace
30	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    	non-compiled	[CE]  not  a  statement	31	None	replace
31	[BUG]  [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    	non-compiled	[CE]  not  a  statement	31	None	replace
32	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  }	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	92	None	replace
33	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  }	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	92	None	replace
34	[BUG]  [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  }	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	92	None	replace
35	[BUG]  [BUGGY]  if(sz  ==  0)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  ==  0)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  ==  0)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	92	None	replace
36	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[chars.length()  +  1]);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  String[chars.length()  +  1]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[chars.length()  +  1]);	  char[]    chars    =    str.toCharArray(new    String[chars.length()    ]);    	non-compiled	[CE]  not  a  statement	75	None	replace
37	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(sz)]);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(sz)]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(sz)]);	  char[]    chars    =    str.toCharArray(new    char[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	70	None	replace
38	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(suffix)]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(suffix)]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(suffix)]);	  char[]    chars    =    str.toCharArray(new    char[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	70	None	replace
39	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(str)+  1]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(str)+  1]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(str)+  1]);	  char[]    chars    =    str.toCharArray(new    char[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	70	None	replace
40	[BUG]  [BUGGY]  int  charsLength  =  str.length()  +  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  charsLength  =  str.length()  +  1;  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  charsLength  =  str.length()  +  1;	  int    charsLength    =    str.length();    	non-compiled	[CE]  not  a  statement	45	None	replace
41	[BUG]  [BUGGY]  charsLength  =  str.length();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  charsLength  =  str.length();  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	charsLength  =  str.length();	  int    charsLength    =    str.length();    	non-compiled	[CE]  not  a  statement	45	None	replace
42	[BUG]  [BUGGY]  int  charsLength  =  str.length()  +  2;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  charsLength  =  str.length()  +  2;  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  charsLength  =  str.length()  +  2;	  int    charsLength    =    str.length();    	non-compiled	[CE]  not  a  statement	45	None	replace
43	[BUG]  [BUGGY]  char[]  chars  =  string.toCharArray(new  String[str.length()]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  string.toCharArray(new  String[str.length()]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  string.toCharArray(new  String[str.length()]);	  char[]    chars    =    str.toCharArray(new    String[str.length()    -    1]);    	non-compiled	[CE]  not  a  statement	42	None	replace
44	[BUG]  [BUGGY]  String  chars  =  str.toCharArray();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  String  chars  =  str.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars  =  str.toCharArray();	  String    chars    =    this.chars.toCharArray();    	non-compiled	[CE]  not  a  statement	40	None	replace
45	[BUG]  [BUGGY]  chars  =  str.toCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.toCharArray();	  String    chars    =    this.chars.toCharArray();    	non-compiled	[CE]  not  a  statement	40	None	replace
46	[BUG]  [BUGGY]  chars  =  this.chars.toCharArray();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  this.chars.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  this.chars.toCharArray();	  String    chars    =    this.chars.toCharArray();    	non-compiled	[CE]  not  a  statement	40	None	replace
47	[BUG]  [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	84	None	replace
48	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  return  true;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  chars.length  ==  0)  {  return  true;  }	  if(chars    ==    null)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
49	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  return  true;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  return  true;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  chars.length!=  0)  {  return  true;  }	  if(chars    ==    null)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
50	[BUG]  [BUGGY]  if(chars  ==  null  ||  str.length()  ==  0)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  str.length()  ==  0)  {  return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  str.length()  ==  0)  {  return  false;  }	  if(str    ==    null    ||    str.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
51	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  str.length()  ==  0)return  false;  }	  if(str    ==    null    ||    str.length()    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
52	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    	non-compiled	[CE]  not  a  statement	66	None	replace
53	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    	non-compiled	[CE]  not  a  statement	66	None	replace
54	[BUG]  [BUGGY]  String  chars  =  str!=  null?  null  :  str.toCharArray();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  String  chars  =  str!=  null?  null  :  str.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars  =  str!=  null?  null  :  str.toCharArray();	  String    chars    =    str    ==    null?    null    :    str.toCharArray();    	non-compiled	[CE]  not  a  statement	26	None	replace
55	[BUG]  [BUGGY]  chars  =  str  ==  null?  null  :  str.toCharArray();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str  ==  null?  null  :  str.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str  ==  null?  null  :  str.toCharArray();	  String    chars    =    str    ==    null?    null    :    str.toCharArray();    	non-compiled	[CE]  not  a  statement	26	None	replace
56	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('-',  i);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('-',  i);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('-',  i);	  int    chars    =    str.lastIndexOf('-',    start);    	non-compiled	[CE]  not  a  statement	71	None	replace
57	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('-',  start  +  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('-',  start  +  1);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('-',  start  +  1);	  int    chars    =    str.lastIndexOf('-',    start);    	non-compiled	[CE]  not  a  statement	71	None	replace
58	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('.',  2);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('.',  2);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('.',  2);	  int    chars    =    str.lastIndexOf('.',    1);    	non-compiled	[CE]  not  a  statement	7	None	replace
59	[BUG]  [BUGGY]  int  chars  =  str.indexOf('.',  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.indexOf('.',  1);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.indexOf('.',  1);	  int    chars    =    str.lastIndexOf('.',    1);    	non-compiled	[CE]  not  a  statement	7	None	replace
60	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('.',  4);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('.',  4);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('.',  4);	  int    chars    =    str.lastIndexOf('.',    1);    	non-compiled	[CE]  not  a  statement	7	None	replace
61	[BUG]  [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  null  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  null  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  null	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	3	None	replace
62	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	3	None	replace
63	[BUG]  [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	3	None	replace
64	[BUG]  [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	3	None	replace
65	[BUG]  [BUGGY]  chars  =  str.indexOf('-');  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.indexOf('-');  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.indexOf('-');	  int    chars    =    str.indexOf('-');    	non-compiled	[CE]  not  a  statement	72	None	replace
66	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    	non-compiled	[CE]  not  a  statement	48	None	replace
67	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    	non-compiled	[CE]  not  a  statement	48	None	replace
68	[BUG]  [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    	non-compiled	[CE]  not  a  statement	48	None	replace
69	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	1	None	replace
70	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  null  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  null  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  null	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	1	None	replace
71	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  null  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  null  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  null	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    null    	non-compiled	[CE]  not  a  statement	32	None	replace
72	[BUG]  [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  null  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  null  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  null	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    null    	non-compiled	[CE]  not  a  statement	32	None	replace
73	[BUG]  [BUGGY]  int  charsStart  =  str.length()  +  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  charsStart  =  str.length()  +  1;  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  charsStart  =  str.length()  +  1;	  int    charsStart    =    str.length();    	non-compiled	[CE]  not  a  statement	60	None	replace
74	[BUG]  [BUGGY]  int  charsStart  =  str.length()  -  1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  charsStart  =  str.length()  -  1;  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  charsStart  =  str.length()  -  1;	  int    charsStart    =    str.length();    	non-compiled	[CE]  not  a  statement	60	None	replace
75	[BUG]  [BUGGY]  charsStart  =  str.length();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  charsStart  =  str.length();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	charsStart  =  str.length();	  int    charsStart    =    str.length();    	non-compiled	[CE]  not  a  statement	60	None	replace
76	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  nu	  if(sz    >    start)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	65	None	replace
77	[BUG]  [BUGGY]  if(chars!=  null)  {  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars!=  null)  {  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&	  if(sz    >    start)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	65	None	replace
78	[BUG]  [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&	  if(sz    >    start)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	65	None	replace
79	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  chars.length  <  2)  {  return  false;  }	  if(str    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
80	[BUG]  [BUGGY]  if(chars  ==  null  ||  str.length  <  2)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  str.length  <  2)  {  return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  str.length  <  2)  {  return  false;  }	  if(str    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
81	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length  <  2)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null  ||  str.length  <  2)  {  return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  str.length  <  2)  {  return  false;  }	  if(str    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
82	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(sz)]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(sz)]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(sz)]);	  char[]    chars    =    str.toCharArray(new    String[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	76	None	replace
83	[BUG]  [BUGGY]  char[]  chars  =  new  String[StringUtils.indexOf(str)];  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  new  String[StringUtils.indexOf(str)];  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  new  String[StringUtils.indexOf(str)];	  char[]    chars    =    str.toCharArray(new    String[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	76	None	replace
84	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(suffix)]);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(suffix)]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(suffix)]);	  char[]    chars    =    str.toCharArray(new    String[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	76	None	replace
85	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf('')]);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf('')]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf('')]);	  char[]    chars    =    str.toCharArray(new    String[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	76	None	replace
86	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu	  if(sz    >    start)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	64	None	replace
87	[BUG]  [BUGGY]  if(chars!=  null)  {  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars!=  null)  {  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&	  if(sz    >    start)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	64	None	replace
88	[BUG]  [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&	  if(sz    >    start)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	64	None	replace
89	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[this.chars.length()  ]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[this.chars.length()  ]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[this.chars.length()  ]);	  char[]    chars    =    this.chars.toCharArray(new    char[str.length()    ]);    	non-compiled	[CE]  not  a  statement	85	None	replace
90	[BUG]  [BUGGY]  char[]  chars  =  this.chars.toCharArray(new  char[str.length()  -  1]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  this.chars.toCharArray(new  char[str.length()  -  1]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  this.chars.toCharArray(new  char[str.length()  -  1]);	  char[]    chars    =    this.chars.toCharArray(new    char[str.length()    ]);    	non-compiled	[CE]  not  a  statement	85	None	replace
91	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  }	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	19	None	replace
92	[BUG]  [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars!=  null  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars!=  null  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars!=  null	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	19	None	replace
93	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  char  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  char  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  char	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	19	None	replace
94	[BUG]  [BUGGY]  int  chars  =  str.indexOf('.',  0);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.indexOf('.',  0);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.indexOf('.',  0);	  int    chars    =    str.lastIndexOf('.',    0);    	non-compiled	[CE]  not  a  statement	5	None	replace
95	[BUG]  [BUGGY]  int  chars  =  str.indexOf('-',  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.indexOf('-',  1);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.indexOf('-',  1);	  int    chars    =    str.indexOf('-',    0);    	non-compiled	[CE]  not  a  statement	10	None	replace
96	[BUG]  [BUGGY]  int  chars  =  str.indexOf('-',  4);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.indexOf('-',  4);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.indexOf('-',  4);	  int    chars    =    str.indexOf('-',    0);    	non-compiled	[CE]  not  a  statement	10	None	replace
97	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('.',  0);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  start  =  str.lastIndexOf('.',  0);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  start  =  str.lastIndexOf('.',  0);	  int    start    =    str.lastIndexOf('.');    	non-compiled	[CE]  not  a  statement	90	None	replace
98	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('.',  chars.length);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  start  =  str.lastIndexOf('.',  chars.length);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  start  =  str.lastIndexOf('.',  chars.length);	  int    start    =    str.lastIndexOf('.');    	non-compiled	[CE]  not  a  statement	90	None	replace
99	[BUG]  [BUGGY]  int  start  =  str.indexOf('.');  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  start  =  str.indexOf('.');  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  start  =  str.indexOf('.');	  int    start    =    str.lastIndexOf('.');    	non-compiled	[CE]  not  a  statement	90	None	replace
100	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('.',  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  start  =  str.lastIndexOf('.',  1);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  start  =  str.lastIndexOf('.',  1);	  int    start    =    str.lastIndexOf('.');    	non-compiled	[CE]  not  a  statement	90	None	replace
101	[BUG]  [BUGGY]  char[]  chars  =  getChars(str),  str.length();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str),  str.length();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str),  str.length();	  char[]    chars    =    getChars(str),    str.toCharArray();    	non-compiled	[CE]  not  a  statement	33	None	replace
102	[BUG]  [BUGGY]  char[]  chars  =  getChars(str),  SHORT_MINUS_ONE.toCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str),  SHORT_MINUS_ONE.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str),  SHORT_MINUS_ONE.toCharArray();	  char[]    chars    =    getChars(str),    str.toCharArray();    	non-compiled	[CE]  not  a  statement	33	None	replace
103	[BUG]  [BUGGY]  char[]  chars  =  getChars(str),  SHORT_ZERO.toCharArray();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str),  SHORT_ZERO.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str),  SHORT_ZERO.toCharArray();	  char[]    chars    =    getChars(str),    str.toCharArray();    	non-compiled	[CE]  not  a  statement	33	None	replace
104	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(i,  0);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.getChars(i,  0);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(i,  0);	  char[]    chars    =    str.getChars(i);    	non-compiled	[CE]  not  a  statement	57	None	replace
105	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(i  +  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.getChars(i  +  1);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(i  +  1);	  char[]    chars    =    str.getChars(i);    	non-compiled	[CE]  not  a  statement	57	None	replace
106	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(i  +  1,  str.length);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.getChars(i  +  1,  str.length);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(i  +  1,  str.length);	  char[]    chars    =    str.getChars(i);    	non-compiled	[CE]  not  a  statement	57	None	replace
107	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)  {  return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  chars.length  ==  0)  {  return  false;  }	  if(str    ==    null    ||    chars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
108	[BUG]  [BUGGY]  if(chars  ==  null  ||  str.length  ==  0)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  str.length  ==  0)  {  return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  str.length  ==  0)  {  return  false;  }	  if(str    ==    null    ||    chars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
109	[BUG]  [BUGGY]  if(str  ==  null  ||  chars.length!=  0)  {  return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null  ||  chars.length!=  0)  {  return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  chars.length!=  0)  {  return  false;  }	  if(str    ==    null    ||    chars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
110	[BUG]  [BUGGY]  if(chars  ==  null  ||  str.length  ==  0)  {  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  str.length  ==  0)  {  return  true;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  str.length  ==  0)  {  return  true;  }	  if(str    ==    null    ||    chars.length    ==    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	89	None	replace
111	[BUG]  [BUGGY]  chars  =  str.indexOf('.');  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.indexOf('.');  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.indexOf('.');	  int    chars    =    str.indexOf('.');    	non-compiled	[CE]  not  a  statement	6	None	replace
112	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('.',  start  +  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('.',  start  +  1);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('.',  start  +  1);	  int    chars    =    str.lastIndexOf('.',    start);    	non-compiled	[CE]  not  a  statement	68	None	replace
113	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('.',  i);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('.',  i);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('.',  i);	  int    chars    =    str.lastIndexOf('.',    start);    	non-compiled	[CE]  not  a  statement	68	None	replace
114	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('.',  start  +  2);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('.',  start  +  2);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('.',  start  +  2);	  int    chars    =    str.lastIndexOf('.',    start);    	non-compiled	[CE]  not  a  statement	68	None	replace
115	[BUG]  [BUGGY]  chars[]  =  str  ==  null?  null  :  str.toCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars[]  =  str  ==  null?  null  :  str.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars[]  =  str  ==  null?  null  :  str.toCharArray();	  chars[]    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	86	None	replace
116	[BUG]  [BUGGY]  char[]  chars  =  new  String[str.length()  +  1];  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  new  String[str.length()  +  1];  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  new  String[str.length()  +  1];	  char[]    chars    =    new    String[str.length()    ];    	non-compiled	[CE]  not  a  statement	43	None	replace
117	[BUG]  [BUGGY]  char[]  chars  =  new  String[str.length()  +  2];  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  new  String[str.length()  +  2];  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  new  String[str.length()  +  2];	  char[]    chars    =    new    String[str.length()    ];    	non-compiled	[CE]  not  a  statement	43	None	replace
118	[BUG]  [BUGGY]  char[]  chars  =  new  String[str.length()  *  2];  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  new  String[str.length()  *  2];  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  new  String[str.length()  *  2];	  char[]    chars    =    new    String[str.length()    ];    	non-compiled	[CE]  not  a  statement	43	None	replace
119	[BUG]  [BUGGY]  Integer  start  =  str.length();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  Integer  start  =  str.length();  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  start  =  str.length();	  int    start    =    str.length()    +    1;    	non-compiled	[CE]  not  a  statement	37	None	replace
120	[BUG]  [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  char[str.length()  -  1]);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  char[str.length()  -  1]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  char[str.length()  -  1]);	  char[]    chars    =    str    ==    null?    null    :    str.toCharArray(new    char[str.length()    ]);    	non-compiled	[CE]  not  a  statement	82	None	replace
121	[BUG]  [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  char[str.length()  +  1]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  char[str.length()  +  1]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  char[str.length()  +  1]);	  char[]    chars    =    str    ==    null?    null    :    str.toCharArray(new    char[str.length()    ]);    	non-compiled	[CE]  not  a  statement	82	None	replace
122	[BUG]  [BUGGY]  char[]  chars  =  this.chars.getChars(str);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  this.chars.getChars(str);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  this.chars.getChars(str);	  char[]    chars    =    this.chars.getChars();    	non-compiled	[CE]  not  a  statement	39	None	replace
123	[BUG]  [BUGGY]  String  chars  =  this.chars.getChars();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  String  chars  =  this.chars.getChars();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars  =  this.chars.getChars();	  char[]    chars    =    this.chars.getChars();    	non-compiled	[CE]  not  a  statement	39	None	replace
124	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  >=  0)  {  return  true;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null  ||  str.length()  >=  0)  {  return  true;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  str.length()  >=  0)  {  return  true;  }	  if(str    ==    null    ||    str.length()!=    0)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	56	None	replace
125	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  chars.length!=  0)  {  return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  chars.length!=  0)  {  return  false;  }	  if(chars    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
126	[BUG]  [BUGGY]  char[]  chars  =  new  char[str.length()];  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  new  char[str.length()];  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  new  char[str.length()];	  char[]    chars    =    str.toCharArray(new    char[str.length()    +    1]);    	non-compiled	[CE]  not  a  statement	12	None	replace
127	[BUG]  [BUGGY]  char[]  chars  =  getChars();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars();	  char[]    chars    =    getChars().toCharArray();    	non-compiled	[CE]  not  a  statement	34	None	replace
128	[BUG]  [BUGGY]  char[]  chars  =  getChars().toCharArray(str);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars().toCharArray(str);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars().toCharArray(str);	  char[]    chars    =    getChars().toCharArray();    	non-compiled	[CE]  not  a  statement	34	None	replace
129	[BUG]  [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  String[str.length()  +  1]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  String[str.length()  +  1]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  String[str.length()  +  1]);	  char[]    chars    =    str    ==    null?    null    :    str.toCharArray(new    String[str.length()    ]);    	non-compiled	[CE]  not  a  statement	83	None	replace
130	[BUG]  [BUGGY]  String  chars  =  getString(str).toCharArray();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  String  chars  =  getString(str).toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars  =  getString(str).toCharArray();	  String    chars    =    getChars(str).toCharArray();    	non-compiled	[CE]  not  a  statement	35	None	replace
131	[BUG]  [BUGGY]  chars  =  getChars(str).toCharArray();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  getChars(str).toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  getChars(str).toCharArray();	  String    chars    =    getChars(str).toCharArray();    	non-compiled	[CE]  not  a  statement	35	None	replace
132	[BUG]  [BUGGY]  String  chars  =  getChars(str).toString();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  String  chars  =  getChars(str).toString();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars  =  getChars(str).toString();	  String    chars    =    getChars(str).toCharArray();    	non-compiled	[CE]  not  a  statement	35	None	replace
133	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('-',  2);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('-',  2);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('-',  2);	  int    chars    =    str.lastIndexOf('-',    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
134	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('-',  4);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('-',  4);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('-',  4);	  int    chars    =    str.lastIndexOf('-',    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
135	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('-',  3);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('-',  3);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('-',  3);	  int    chars    =    str.lastIndexOf('-',    1);    	non-compiled	[CE]  not  a  statement	9	None	replace
136	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars!=  null  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars!=  null  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars!=  null	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	18	None	replace
137	[BUG]  [BUGGY]  String  chars[]  chars  =  str.toCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  String  chars[]  chars  =  str.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars[]  chars  =  str.toCharArray();	  chars[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	27	None	replace
138	[BUG]  [BUGGY]  chars[]  chars  =  getChars(str);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars[]  chars  =  getChars(str);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars[]  chars  =  getChars(str);	  chars[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	27	None	replace
139	[BUG]  [BUGGY]  chars  =  str.charAt(start  +  1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.charAt(start  +  1);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.charAt(start  +  1);	  int    chars    =    str.charAt(start);    	non-compiled	[CE]  not  a  statement	73	None	replace
140	[BUG]  [BUGGY]  chars  =  str.charAt(i);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.charAt(i);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.charAt(i);	  int    chars    =    str.charAt(start);    	non-compiled	[CE]  not  a  statement	73	None	replace
141	[BUG]  [BUGGY]  chars  =  str.charAt(start);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.charAt(start);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.charAt(start);	  int    chars    =    str.charAt(start);    	non-compiled	[CE]  not  a  statement	73	None	replace
142	[BUG]  [BUGGY]  int  chars  =  str.charAt(i);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.charAt(i);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.charAt(i);	  int    chars    =    str.charAt(start);    	non-compiled	[CE]  not  a  statement	73	None	replace
143	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(0,  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.getChars(0,  1);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(0,  1);	  char[]    chars    =    str.getChars(0,    0);    	non-compiled	[CE]  not  a  statement	16	None	replace
144	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(0,  4);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.getChars(0,  4);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(0,  4);	  char[]    chars    =    str.getChars(0,    0);    	non-compiled	[CE]  not  a  statement	16	None	replace
145	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(0,  3);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.getChars(0,  3);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(0,  3);	  char[]    chars    =    str.getChars(0,    0);    	non-compiled	[CE]  not  a  statement	16	None	replace
146	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	79	None	replace
147	[BUG]  [BUGGY]  if(str!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	79	None	replace
148	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(0,  Integer.MAX_VALUE);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.getChars(0,  Integer.MAX_VALUE);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(0,  Integer.MAX_VALUE);	  char[]    chars    =    str.getChars(intValue);    	non-compiled	[CE]  not  a  statement	17	None	replace
149	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(0,  intValue);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.getChars(0,  intValue);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(0,  intValue);	  char[]    chars    =    str.getChars(intValue);    	non-compiled	[CE]  not  a  statement	17	None	replace
150	[BUG]  [BUGGY]  chars  =  str.trim();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.trim();  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.trim();	  chars    =    str.length();    	non-compiled	[CE]  not  a  statement	46	None	replace
151	[BUG]  [BUGGY]  chars  =  str.charAt(0);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.charAt(0);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.charAt(0);	  chars    =    str.length();    	non-compiled	[CE]  not  a  statement	46	None	replace
152	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    	non-compiled	[CE]  not  a  statement	63	None	replace
153	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	91	None	replace
154	[BUG]  [BUGGY]  if(sz  ==  0)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  ==  0)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  ==  0)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	91	None	replace
155	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    null    	non-compiled	[CE]  not  a  statement	49	None	replace
156	[BUG]  [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    null    	non-compiled	[CE]  not  a  statement	49	None	replace
157	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  0);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  0);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  0);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_OBJECT);    	non-compiled	[CE]  not  a  statement	67	None	replace
158	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  true);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  true);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  true);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_OBJECT);    	non-compiled	[CE]  not  a  statement	67	None	replace
159	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  false);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  false);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  false);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_OBJECT);    	non-compiled	[CE]  not  a  statement	67	None	replace
160	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  >=  0)  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null  ||  str.length()  >=  0)  {  return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  str.length()  >=  0)  {  return  false;  }	  if(str    ==    null    ||    str.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
161	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()!=  0)return  false;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null  ||  str.length()!=  0)return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  str.length()!=  0)return  false;  }	  if(str    ==    null    ||    str.length()!=    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	24	None	replace
162	[BUG]  [BUGGY]  char[]  chars  =  str.trim().toCharArray();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.trim().toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.trim().toCharArray();	  char[]    chars    =    str.trim();    	non-compiled	[CE]  not  a  statement	88	None	replace
163	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars[i]  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars[i]    }    	non-compiled	[CE]  not  a  statement	58	None	replace
164	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  true);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  true);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  true);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    false);    	non-compiled	[CE]  not  a  statement	15	None	replace
165	[BUG]  [BUGGY]  String  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  false);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  String  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  false);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  false);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    false);    	non-compiled	[CE]  not  a  statement	15	None	replace
166	[BUG]  [BUGGY]  char[]  chars  =  string.toCharArray(CharacterEncodingNames.US_ASCII,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  string.toCharArray(CharacterEncodingNames.US_ASCII,  true);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  string.toCharArray(CharacterEncodingNames.US_ASCII,  true);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    false);    	non-compiled	[CE]  not  a  statement	15	None	replace
167	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  null);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  null);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  null);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    false);    	non-compiled	[CE]  not  a  statement	15	None	replace
168	[BUG]  [BUGGY]  char[]  chars  =  getChars(start,  str).toCharArray();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(start,  str).toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(start,  str).toCharArray();	  char[]    chars    =    getChars(str,    start).toCharArray();    	non-compiled	[CE]  not  a  statement	61	None	replace
169	[BUG]  [BUGGY]  char[]  chars  =  getChars(str,  start),  str.toCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str,  start),  str.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str,  start),  str.toCharArray();	  char[]    chars    =    getChars(str,    start).toCharArray();    	non-compiled	[CE]  not  a  statement	61	None	replace
170	[BUG]  [BUGGY]  String  chars  =  getChars(str,  start).toCharArray();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  String  chars  =  getChars(str,  start).toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars  =  getChars(str,  start).toCharArray();	  char[]    chars    =    getChars(str,    start).toCharArray();    	non-compiled	[CE]  not  a  statement	61	None	replace
171	[BUG]  [BUGGY]  char  start  =  str.length();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char  start  =  str.length();  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char  start  =  str.length();	  int    start    =    str.length()    -    1;    	non-compiled	[CE]  not  a  statement	36	None	replace
172	[BUG]  [BUGGY]  char[]  chars  =  getChars(str,  i);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str,  i);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str,  i);	  char[]    chars    =    getChars(str);    	non-compiled	[CE]  not  a  statement	87	None	replace
173	[BUG]  [BUGGY]  char[]  chars  =  getChars(str,  0);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str,  0);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str,  0);	  char[]    chars    =    getChars(str);    	non-compiled	[CE]  not  a  statement	87	None	replace
174	[BUG]  [BUGGY]  char[]  chars  =  getChars(str,  false);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str,  false);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str,  false);	  char[]    chars    =    getChars(str);    	non-compiled	[CE]  not  a  statement	87	None	replace
175	[BUG]  [BUGGY]  char[]  chars  =  getChars(str,  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str,  1);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str,  1);	  char[]    chars    =    getChars(str);    	non-compiled	[CE]  not  a  statement	87	None	replace
176	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  char  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  char  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  char	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars[i]!=    	non-compiled	[CE]  not  a  statement	2	None	replace
177	[BUG]  [BUGGY]  char  chars  =  str.charAt(str.length());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char  chars  =  str.charAt(str.length());  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char  chars  =  str.charAt(str.length());	  int    chars    =    str.charAt(str.lastIndexOf('.'));    	non-compiled	[CE]  not  a  statement	69	None	replace
178	[BUG]  [BUGGY]  char[]  chars  =  str.charAt(str.length());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.charAt(str.length());  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.charAt(str.length());	  int    chars    =    str.charAt(str.lastIndexOf('.'));    	non-compiled	[CE]  not  a  statement	69	None	replace
179	[BUG]  [BUGGY]  char  chars  =  str.charAt(str.indexOf('.'));  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char  chars  =  str.charAt(str.indexOf('.'));  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char  chars  =  str.charAt(str.indexOf('.'));	  int    chars    =    str.charAt(str.lastIndexOf('.'));    	non-compiled	[CE]  not  a  statement	69	None	replace
180	[BUG]  [BUGGY]  int  chars  =  str.charAt(str.length());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.charAt(str.length());  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.charAt(str.length());	  int    chars    =    str.charAt(str.lastIndexOf('.'));    	non-compiled	[CE]  not  a  statement	69	None	replace
181	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	92	None	replace
182	[BUG]  [BUGGY]  if(sz  >  start)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	92	None	replace
183	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  char  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  char  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  char	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	92	None	replace
184	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(start);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.getChars(start);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(start);	  char[]    chars    =    str.getChars(i);    	non-compiled	[CE]  not  a  statement	57	None	replace
185	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(start,  i);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.getChars(start,  i);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(start,  i);	  char[]    chars    =    str.getChars(i);    	non-compiled	[CE]  not  a  statement	57	None	replace
186	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(i,  start);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.getChars(i,  start);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(i,  start);	  char[]    chars    =    str.getChars(i);    	non-compiled	[CE]  not  a  statement	57	None	replace
187	[BUG]  [BUGGY]  char[]  chars  =  this.chars.getChars(0,  str);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  this.chars.getChars(0,  str);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  this.chars.getChars(0,  str);	  char[]    chars    =    this.chars.getChars();    	non-compiled	[CE]  not  a  statement	39	None	replace
188	[BUG]  [BUGGY]  if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars    }    	non-compiled	[CE]  not  a  statement	47	None	replace
189	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  char  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  char  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  char	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars    }    	non-compiled	[CE]  not  a  statement	47	None	replace
190	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf('-')]);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf('-')]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf('-')]);	  char[]    chars    =    str.toCharArray(new    char[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	70	None	replace
191	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf('0')]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf('0')]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf('0')]);	  char[]    chars    =    str.toCharArray(new    char[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	70	None	replace
192	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf('+')]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf('+')]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf('+')]);	  char[]    chars    =    str.toCharArray(new    char[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	70	None	replace
193	[BUG]  [BUGGY]  int  charsStart  =  str.lastIndexOf('.');  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  charsStart  =  str.lastIndexOf('.');  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  charsStart  =  str.lastIndexOf('.');	  int    charsStart    =    str.length();    	non-compiled	[CE]  not  a  statement	60	None	replace
194	[BUG]  [BUGGY]  Integer  charsStart  =  str.length();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  Integer  charsStart  =  str.length();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  charsStart  =  str.length();	  int    charsStart    =    str.length();    	non-compiled	[CE]  not  a  statement	60	None	replace
195	[BUG]  [BUGGY]  &&(chars[i]!=  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar  zahar  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  &&(chars[i]!=  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar  zahar  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	&&(chars[i]!=  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar  zahar	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    	non-compiled	[CE]  not  a  statement	66	None	replace
196	[BUG]  [BUGGY]  &&(chars[i]!=  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  &&(chars[i]!=  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	&&(chars[i]!=  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    	non-compiled	[CE]  not  a  statement	66	None	replace
197	[BUG]  [BUGGY]  &&(str  ==  null  ||  chars.length!=  0))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  &&(str  ==  null  ||  chars.length!=  0))  {  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	&&(str  ==  null  ||  chars.length!=  0))  {	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    	non-compiled	[CE]  not  a  statement	66	None	replace
198	[BUG]  [BUGGY]  &&(str  ==  null  ||!str.equals( " ")))  {  return  false;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  &&(str  ==  null  ||!str.equals( " ")))  {  return  false;  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	&&(str  ==  null  ||!str.equals( " ")))  {  return  false;	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    	non-compiled	[CE]  not  a  statement	66	None	replace
199	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('.',  0,  1);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('.',  0,  1);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('.',  0,  1);	  int    chars    =    str.lastIndexOf('.',    1);    	non-compiled	[CE]  not  a  statement	7	None	replace
200	[BUG]  [BUGGY]  chars[]  chars  =  getChars();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars[]  chars  =  getChars();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars[]  chars  =  getChars();	  chars[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	27	None	replace
201	[BUG]  [BUGGY]  chars[]  =  str!=  null?  null  :  str.toCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars[]  =  str!=  null?  null  :  str.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars[]  =  str!=  null?  null  :  str.toCharArray();	  chars[]    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	86	None	replace
202	[BUG]  [BUGGY]  char[]  chars  =  this.chars.trim();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  this.chars.trim();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  this.chars.trim();	  char[]    chars    =    str.trim();    	non-compiled	[CE]  not  a  statement	88	None	replace
203	[BUG]  [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    	non-compiled	[CE]  not  a  statement	48	None	replace
204	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    	non-compiled	[CE]  not  a  statement	48	None	replace
205	[BUG]  [BUGGY]  if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    	non-compiled	[CE]  not  a  statement	48	None	replace
206	[BUG]  [BUGGY]  char[]  chars  =  getChars(str),  this.chars.toCharArray();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str),  this.chars.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str),  this.chars.toCharArray();	  char[]    chars    =    getChars(str),    str.toCharArray();    	non-compiled	[CE]  not  a  statement	33	None	replace
207	[BUG]  [BUGGY]  char[]  chars  =  getChars(str),  start,  str.toCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str),  start,  str.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str),  start,  str.toCharArray();	  char[]    chars    =    getChars(str),    str.toCharArray();    	non-compiled	[CE]  not  a  statement	33	None	replace
208	[BUG]  [BUGGY]  char[]  chars  =  getChars(str),  start.toCharArray();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str),  start.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str),  start.toCharArray();	  char[]    chars    =    getChars(str),    str.toCharArray();    	non-compiled	[CE]  not  a  statement	33	None	replace
209	[BUG]  [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    	non-compiled	[CE]  not  a  statement	31	None	replace
210	[BUG]  [BUGGY]  if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    	non-compiled	[CE]  not  a  statement	31	None	replace
211	[BUG]  [BUGGY]  char[]  chars  =  getChars(start);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(start);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(start);	  char[]    chars    =    getChars(str);    	non-compiled	[CE]  not  a  statement	87	None	replace
212	[BUG]  [BUGGY]  char[]  chars  =  getChars(str,  start);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str,  start);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str,  start);	  char[]    chars    =    getChars(str);    	non-compiled	[CE]  not  a  statement	87	None	replace
213	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0,  chars.length);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(0,  chars.length);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(0,  chars.length);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    chars.length);    	non-compiled	[CE]  not  a  statement	14	None	replace
214	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(1,  chars.length);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(1,  chars.length);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(1,  chars.length);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    chars.length);    	non-compiled	[CE]  not  a  statement	14	None	replace
215	[BUG]  [BUGGY]  String  chars  =  getChars(start).toCharArray();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  String  chars  =  getChars(start).toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars  =  getChars(start).toCharArray();	  String    chars    =    getChars(str).toCharArray();    	non-compiled	[CE]  not  a  statement	35	None	replace
216	[BUG]  [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  null  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  null  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  null	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	1	None	replace
217	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  nu  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  nu  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  nu	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	1	None	replace
218	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0,  false);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(0,  false);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(0,  false);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    false);    	non-compiled	[CE]  not  a  statement	15	None	replace
219	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(false);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(false);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(false);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    false);    	non-compiled	[CE]  not  a  statement	15	None	replace
220	[BUG]  [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	18	None	replace
221	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	18	None	replace
222	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  char  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  char  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  char	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	3	None	replace
223	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	3	None	replace
224	[BUG]  [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  }	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	3	None	replace
225	[BUG]  [BUGGY]  Integer  chars[]  =  getChars(str).toCharArray();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  Integer  chars[]  =  getChars(str).toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  chars[]  =  getChars(str).toCharArray();	  Integer    chars[]    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	28	None	replace
226	[BUG]  [BUGGY]  Integer  chars[]  =  this.chars.toCharArray();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  Integer  chars[]  =  this.chars.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  chars[]  =  this.chars.toCharArray();	  Integer    chars[]    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	28	None	replace
227	[BUG]  [BUGGY]  Integer  chars[]  =  getChars(str);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  Integer  chars[]  =  getChars(str);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  chars[]  =  getChars(str);	  Integer    chars[]    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	28	None	replace
228	[BUG]  [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    null    	non-compiled	[CE]  not  a  statement	49	None	replace
229	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    null    	non-compiled	[CE]  not  a  statement	49	None	replace
230	[BUG]  [BUGGY]  Integer  charsLength  =  str.length();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  Integer  charsLength  =  str.length();  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  charsLength  =  str.length();	  int    charsLength    =    str.length();    	non-compiled	[CE]  not  a  statement	45	None	replace
231	[BUG]  [BUGGY]  &&(chars[i]  ==  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  &&(chars[i]  ==  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	&&(chars[i]  ==  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    	non-compiled	[CE]  not  a  statement	63	None	replace
232	[BUG]  [BUGGY]  &&(chars[i]  ==  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar  zahar  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  &&(chars[i]  ==  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar  zahar  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	&&(chars[i]  ==  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar  zahar	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    	non-compiled	[CE]  not  a  statement	63	None	replace
233	[BUG]  [BUGGY]  &&(chars[i]  ==  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'A'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar  zahar  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  &&(chars[i]  ==  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'A'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar  zahar  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	&&(chars[i]  ==  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'A'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  zahar  zahar	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    	non-compiled	[CE]  not  a  statement	63	None	replace
234	[BUG]  [BUGGY]  &&(chars[i]  ==  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  &&(chars[i]  ==  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	&&(chars[i]  ==  '.'  ||  chars[i]  ==  'a'  ||  chars[i]  ==  'a'  ||  chars  zahar  zahar  zahar  zahar  zahar  zahar	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    	non-compiled	[CE]  not  a  statement	63	None	replace
235	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  char  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  char  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  char	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars    }    	non-compiled	[CE]  not  a  statement	30	None	replace
236	[BUG]  [BUGGY]  if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars    }    	non-compiled	[CE]  not  a  statement	30	None	replace
237	[BUG]  [BUGGY]  char  chars  =  str.charAt(start);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char  chars  =  str.charAt(start);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char  chars  =  str.charAt(start);	  int    chars    =    str.charAt(start);    	non-compiled	[CE]  not  a  statement	73	None	replace
238	[BUG]  [BUGGY]  int  chars  =  str.charAt(start  +  1);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.charAt(start  +  1);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.charAt(start  +  1);	  int    chars    =    str.charAt(start);    	non-compiled	[CE]  not  a  statement	73	None	replace
239	[BUG]  [BUGGY]  char  chars  =  str.charAt(start  +  1);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char  chars  =  str.charAt(start  +  1);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char  chars  =  str.charAt(start  +  1);	  int    chars    =    str.charAt(start);    	non-compiled	[CE]  not  a  statement	73	None	replace
240	[BUG]  [BUGGY]  char[]  chars  =  str.charAt(start);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.charAt(start);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.charAt(start);	  int    chars    =    str.charAt(start);    	non-compiled	[CE]  not  a  statement	73	None	replace
241	[BUG]  [BUGGY]  char[]  chars  =  getChars().getChars();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars().getChars();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars().getChars();	  char[]    chars    =    getChars().toCharArray();    	non-compiled	[CE]  not  a  statement	34	None	replace
242	[BUG]  [BUGGY]  if(str  ==  null  ||  chars.length!=  2)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null  ||  chars.length!=  2)  {  return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  chars.length!=  2)  {  return  false;  }	  if(str    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
243	[BUG]  [BUGGY]  if(str  ==  null  ||  chars.length  >=  2)  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null  ||  chars.length  >=  2)  {  return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  chars.length  >=  2)  {  return  false;  }	  if(str    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
244	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[chars.length()  -  1]);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  String[chars.length()  -  1]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[chars.length()  -  1]);	  char[]    chars    =    str.toCharArray(new    String[chars.length()    ]);    	non-compiled	[CE]  not  a  statement	75	None	replace
245	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf('0')]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf('0')]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf('0')]);	  char[]    chars    =    str.toCharArray(new    String[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	76	None	replace
246	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf('-')]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf('-')]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf('-')]);	  char[]    chars    =    str.toCharArray(new    String[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	76	None	replace
247	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf('+')]);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf('+')]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf('+')]);	  char[]    chars    =    str.toCharArray(new    String[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	76	None	replace
248	[BUG]  [BUGGY]  int  chars  =  str.indexOf('-',  -1);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.indexOf('-',  -1);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.indexOf('-',  -1);	  int    chars    =    str.indexOf('-',    0);    	non-compiled	[CE]  not  a  statement	10	None	replace
249	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  chars.length);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  chars.length);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  chars.length);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_OBJECT);    	non-compiled	[CE]  not  a  statement	67	None	replace
250	[BUG]  [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    	non-compiled	[CE]  not  a  statement	93	None	replace
251	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0,  0);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(0,  0);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(0,  0);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    0);    	non-compiled	[CE]  not  a  statement	13	None	replace
252	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0,  1);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(0,  1);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(0,  1);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    0);    	non-compiled	[CE]  not  a  statement	13	None	replace
253	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0L);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(0L);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(0L);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    0);    	non-compiled	[CE]  not  a  statement	13	None	replace
254	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(0,  4);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(0,  4);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(0,  4);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    0);    	non-compiled	[CE]  not  a  statement	13	None	replace
255	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  '-');  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  '-');  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  '-');	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    chars);    	non-compiled	[CE]  not  a  statement	81	None	replace
256	[BUG]  [BUGGY]  char[]  chars  =  string.toCharArray(CharacterEncodingNames.US_ASCII,  chars);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  string.toCharArray(CharacterEncodingNames.US_ASCII,  chars);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  string.toCharArray(CharacterEncodingNames.US_ASCII,  chars);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    chars);    	non-compiled	[CE]  not  a  statement	81	None	replace
257	[BUG]  [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }	  if(sz    >    start)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	64	None	replace
258	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(0);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.getChars(0);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(0);	  char[]    chars    =    str.getChars(0,    0);    	non-compiled	[CE]  not  a  statement	16	None	replace
259	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	19	None	replace
260	[BUG]  [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  String[str.length()  -  1]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  String[str.length()  -  1]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str  ==  null?  null  :  str.toCharArray(new  String[str.length()  -  1]);	  char[]    chars    =    str    ==    null?    null    :    str.toCharArray(new    String[str.length()    ]);    	non-compiled	[CE]  not  a  statement	83	None	replace
261	[BUG]  [BUGGY]  int  chars  =  str.indexOf('-')+  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.indexOf('-')+  1;  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.indexOf('-')+  1;	  int    chars    =    str.indexOf('-');    	non-compiled	[CE]  not  a  statement	72	None	replace
262	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('.',  0,  chars.length);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('.',  0,  chars.length);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('.',  0,  chars.length);	  int    chars    =    str.lastIndexOf('.',    0);    	non-compiled	[CE]  not  a  statement	5	None	replace
263	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  1]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[str.length()  1]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[str.length()  1]);	  char[]    chars    =    str.toCharArray(new    char[str.length()    +    1]);    	non-compiled	[CE]  not  a  statement	12	None	replace
264	[BUG]  [BUGGY]  int  chars  =  str.indexOf('.',  start);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.indexOf('.',  start);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.indexOf('.',  start);	  int    chars    =    str.indexOf('.');    	non-compiled	[CE]  not  a  statement	6	None	replace
265	[BUG]  [BUGGY]  int  chars  =  str.indexOf('.')+  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.indexOf('.')+  1;  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.indexOf('.')+  1;	  int    chars    =    str.indexOf('.');    	non-compiled	[CE]  not  a  statement	6	None	replace
266	[BUG]  [BUGGY]  if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(!allowSigns)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	29	None	replace
267	[BUG]  [BUGGY]  if(sz  >  start)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	91	None	replace
268	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  char  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  char  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  char	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	91	None	replace
269	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	91	None	replace
270	[BUG]  [BUGGY]  int  chars  =  str.indexOf('-',  start);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.indexOf('-',  start);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.indexOf('-',  start);	  int    chars    =    str.lastIndexOf('-',    start);    	non-compiled	[CE]  not  a  statement	71	None	replace
271	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('-',  start  +  2);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('-',  start  +  2);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('-',  start  +  2);	  int    chars    =    str.lastIndexOf('-',    start);    	non-compiled	[CE]  not  a  statement	71	None	replace
272	[BUG]  [BUGGY]  int  chars  =  str.lastIndexOf('-',  start  +  1,  sz);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  chars  =  str.lastIndexOf('-',  start  +  1,  sz);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  chars  =  str.lastIndexOf('-',  start  +  1,  sz);	  int    chars    =    str.lastIndexOf('-',    start);    	non-compiled	[CE]  not  a  statement	71	None	replace
273	[BUG]  [BUGGY]  char[]  chars  =  new  String[str.length()  -  1];  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  new  String[str.length()  -  1];  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  new  String[str.length()  -  1];	  char[]    chars    =    new    String[str.length()    ];    	non-compiled	[CE]  not  a  statement	43	None	replace
274	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('.',  16);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  start  =  str.lastIndexOf('.',  16);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  start  =  str.lastIndexOf('.',  16);	  int    start    =    str.lastIndexOf('.');    	non-compiled	[CE]  not  a  statement	90	None	replace
275	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars[i]!=    	non-compiled	[CE]  not  a  statement	4	None	replace
276	[BUG]  [BUGGY]  char[]  chars  =  str.trim().toLowerCase();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.trim().toLowerCase();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.trim().toLowerCase();	  char[]    chars    =    str.trim();    	non-compiled	[CE]  not  a  statement	88	None	replace
277	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  nu	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	29	None	replace
278	[BUG]  [BUGGY]  char[]  chars  =  getChars(str,  start,  i).toCharArray();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str,  start,  i).toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str,  start,  i).toCharArray();	  char[]    chars    =    getChars(str,    start).toCharArray();    	non-compiled	[CE]  not  a  statement	61	None	replace
279	[BUG]  [BUGGY]  char[]  chars  =  getChars(str,  start  +  1).toCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str,  start  +  1).toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str,  start  +  1).toCharArray();	  char[]    chars    =    getChars(str,    start).toCharArray();    	non-compiled	[CE]  not  a  statement	61	None	replace
280	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(chars)]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(chars)]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(chars)]);	  char[]    chars    =    str.toCharArray(new    String[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	76	None	replace
281	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(chars,  start)]);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(chars,  start)]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[StringUtils.indexOf(chars,  start)]);	  char[]    chars    =    str.toCharArray(new    String[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	76	None	replace
282	[BUG]  [BUGGY]  if(str.length()  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str.length()  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str.length()  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars  }	  if(sz    >    start)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	65	None	replace
283	[BUG]  [BUGGY]  chars  =  str.substring(start,  start);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.substring(start,  start);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.substring(start,  start);	  chars    =    str.length();    	non-compiled	[CE]  not  a  statement	46	None	replace
284	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    	non-compiled	[CE]  not  a  statement	48	None	replace
285	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)return  false;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)return  false;  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  chars.length  <  2)return  false;	  if(str    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
286	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  chars.length  <  2)return  false;  }	  if(str    ==    null    ||    chars.length    <    2)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	77	None	replace
287	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  chars.length  <  1)  {  return  false;  }	  if(chars    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
288	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	3	None	replace
289	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    	non-compiled	[CE]  not  a  statement	93	None	replace
290	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)return  false;  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)return  false;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  chars.length  ==  0)return  false;  }	  if(str    ==    null    ||    chars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
291	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)return  false;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  chars.length  ==  0)return  false;  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  chars.length  ==  0)return  false;	  if(str    ==    null    ||    chars.length    ==    0)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
292	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  String[str.length()  1]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  String[str.length()  1]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  String[str.length()  1]);	  char[]    chars    =    str.toCharArray(new    String[str.length()    -    1]);    	non-compiled	[CE]  not  a  statement	42	None	replace
293	[BUG]  [BUGGY]  char[]  chars  =  str.charAt(str.lastIndexOf('.'));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.charAt(str.lastIndexOf('.'));  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.charAt(str.lastIndexOf('.'));	  int    chars    =    str.charAt(str.lastIndexOf('.'));    	non-compiled	[CE]  not  a  statement	69	None	replace
294	[BUG]  [BUGGY]  chars  =  str.charAt(str.lastIndexOf('.',  start));  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars  =  str.charAt(str.lastIndexOf('.',  start));  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars  =  str.charAt(str.lastIndexOf('.',  start));	  int    chars    =    str.charAt(str.lastIndexOf('.'));    	non-compiled	[CE]  not  a  statement	69	None	replace
295	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  &&  chars!=	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    &&    chars!=    	non-compiled	[CE]  not  a  statement	66	None	replace
296	[BUG]  [BUGGY]  int  i  =  start  +  2  *  chars.length;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  i  =  start  +  2  *  chars.length;  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  i  =  start  +  2  *  chars.length;	  int    i    =    start    +    2;    	non-compiled	[CE]  not  a  statement	51	None	replace
297	[BUG]  [BUGGY]  chars[]  chars  =  this.chars.toCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars[]  chars  =  this.chars.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars[]  chars  =  this.chars.toCharArray();	  chars[]    chars    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	27	None	replace
298	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	91	None	replace
299	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  null  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  null  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  null	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	1	None	replace
300	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars!=	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	1	None	replace
301	[BUG]  [BUGGY]  int  charsStart  =  str.lastIndexOf('-');  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  charsStart  =  str.lastIndexOf('-');  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  charsStart  =  str.lastIndexOf('-');	  int    charsStart    =    str.length();    	non-compiled	[CE]  not  a  statement	60	None	replace
302	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  return  true;  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  chars.length  <  2)  {  return  true;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  chars.length  <  2)  {  return  true;  }	  if(chars    ==    null)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
303	[BUG]  [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  return  true;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null  ||  chars.length  <  1)  {  return  true;  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null  ||  chars.length  <  1)  {  return  true;  }	  if(chars    ==    null)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
304	[BUG]  [BUGGY]  if(str  ==  null  ||  chars.length  <  2)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null  ||  chars.length  <  2)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null  ||  chars.length  <  2)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  ||  chars	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    ||    chars[i]!=    	non-compiled	[CE]  not  a  statement	2	None	replace
305	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	92	None	replace
306	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars	  if(chars!=    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	92	None	replace
307	[BUG]  [BUGGY]  char[]  chars  =  str.getChars(0,  2);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.getChars(0,  2);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.getChars(0,  2);	  char[]    chars    =    str.getChars(0,    0);    	non-compiled	[CE]  not  a  statement	16	None	replace
308	[BUG]  [BUGGY]  String  chars  =  getChars(str);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  String  chars  =  getChars(str);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	String  chars  =  getChars(str);	  String    chars    =    getChars(str).toCharArray();    	non-compiled	[CE]  not  a  statement	35	None	replace
309	[BUG]  [BUGGY]  Integer  chars  =  str.substring(start  +  1,  str.length()  -  start);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  Integer  chars  =  str.substring(start  +  1,  str.length()  -  start);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	Integer  chars  =  str.substring(start  +  1,  str.length()  -  start);	  Integer    chars    =    str.substring(start    +    1,    str.length());    	non-compiled	[CE]  not  a  statement	59	None	replace
310	[BUG]  [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars!=  null  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars!=  null  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars!=  null	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	18	None	replace
311	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars!=  null  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars!=  null  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars!=  null	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	18	None	replace
312	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]!=  '0'  ||  chars	  if(chars    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]!=    '0'    ||    chars    	non-compiled	[CE]  not  a  statement	19	None	replace
313	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length)+  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length)+  1;  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_ASCII,  chars.length)+  1;	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    chars.length);    	non-compiled	[CE]  not  a  statement	14	None	replace
314	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('.')-  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  start  =  str.lastIndexOf('.')-  1;  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  start  =  str.lastIndexOf('.')-  1;	  int    start    =    str.length()    -    1;    	non-compiled	[CE]  not  a  statement	36	None	replace
315	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('-')-  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  start  =  str.lastIndexOf('-')-  1;  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  start  =  str.lastIndexOf('-')-  1;	  int    start    =    str.length()    -    1;    	non-compiled	[CE]  not  a  statement	36	None	replace
316	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('.')+  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  start  =  str.lastIndexOf('.')+  1;  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  start  =  str.lastIndexOf('.')+  1;	  int    start    =    str.length()    -    1;    	non-compiled	[CE]  not  a  statement	36	None	replace
317	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  chars);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  chars);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(CharacterEncodingNames.US_OBJECT,  chars);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_OBJECT);    	non-compiled	[CE]  not  a  statement	67	None	replace
318	[BUG]  [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars!=  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    	non-compiled	[CE]  not  a  statement	31	None	replace
319	[BUG]  [BUGGY]  if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(sz  >  start  +  1)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  }	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    	non-compiled	[CE]  not  a  statement	31	None	replace
320	[BUG]  [BUGGY]  if(str.length()  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(str.length()  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(str.length()  ==  0)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars  }	  if(sz    >    start)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    nu    	non-compiled	[CE]  not  a  statement	64	None	replace
321	[BUG]  [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	if(chars  ==  null)  {  for(int  i  =  start;  i  <  chars.length;  i++)  {  char[]  chars  =  str.toCharArray();  if(chars[i]  ==  '0'  &&  chars!=	  if(str    ==    null)    {    for(int    i    =    start;    i    <    chars.length;    i++)    {    char[]    chars    =    str.toCharArray();    if(chars[i]    ==    '0'    &&    chars!=    	non-compiled	[CE]  not  a  statement	63	None	replace
322	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(1,  0);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(1,  0);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(1,  0);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    0);    	non-compiled	[CE]  not  a  statement	13	None	replace
323	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(2,  0);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(2,  0);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(2,  0);	  char[]    chars    =    str.toCharArray(CharacterEncodingNames.US_ASCII,    0);    	non-compiled	[CE]  not  a  statement	13	None	replace
324	[BUG]  [BUGGY]  char[]  chars  =  getChars(str.toCharArray());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  getChars(str.toCharArray());  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  getChars(str.toCharArray());	  char[]    chars    =    getChars(str);    	non-compiled	[CE]  not  a  statement	87	None	replace
325	[BUG]  [BUGGY]  int  start  =  str.lastIndexOf('.',  i);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  int  start  =  str.lastIndexOf('.',  i);  [BUGGY]      char[]  chars  =  str.toCharArray();  int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	int  start  =  str.lastIndexOf('.',  i);	  int    start    =    str.lastIndexOf('.');    	non-compiled	[CE]  not  a  statement	90	None	replace
326	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(str.charAt(0))]);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(str.charAt(0))]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(str.charAt(0))]);	  char[]    chars    =    str.toCharArray(new    char[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	70	None	replace
327	[BUG]  [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(str,  0)]);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(str,  0)]);  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	char[]  chars  =  str.toCharArray(new  char[StringUtils.indexOf(str,  0)]);	  char[]    chars    =    str.toCharArray(new    char[StringUtils.indexOf(str)]);    	non-compiled	[CE]  not  a  statement	70	None	replace
328	[BUG]  [BUGGY]  chars[]  =  this.chars.toCharArray();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars[]  =  this.chars.toCharArray();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars[]  =  this.chars.toCharArray();	  chars[]    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	86	None	replace
329	[BUG]  [BUGGY]  chars[]  =  str.trim();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isNumber(String  str)  {  if  (StringUtils.isEmpty(str))  {  return  false;  }      [BUGGY]  chars[]  =  str.trim();  [BUGGY]      int  sz  =  chars.length;  boolean  hasExp  =  false;  boolean  hasDecPoint  =  false;  boolean  allowSigns  =  false;  boolean  foundDigit  =  false;  int  start  =  (chars[0]  ==  '-')  ?  1  :  0;  if  (sz  >  start  +  1)  {  if  (chars[start]  ==  '0'  &&  chars[start  +  1]  ==  'x')  {  int  i  =  start  +  2;  [CLASS]  NumberUtils  [METHOD]  isNumber  [RETURN_TYPE]  boolean  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allowSigns  foundDigit  hasDecPoint  hasExp  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  String  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  i  start  sz  char[]  chars  	projects/Lang24/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	1.0	1323	1323	1	replace	chars[]  =  str.trim();	  chars[]    =    str.toCharArray();    	non-compiled	[CE]  not  a  statement	86	None	replace
