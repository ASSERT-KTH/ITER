bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(length  <  1  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  1  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  1  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0xfff)  ==  0)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0xfff)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0  ||(buffer[offset]  &  0xfff)  ==  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  >=  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  if(offset  <  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(offset  <  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(offset  <  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
5	[BUG]  [BUGGY]  if(length  <  0)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  if(length  ==  0)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  ==  0)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
7	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  >  length)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||  buffer.length  >  length)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||  buffer.length  >  length)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
8	[BUG]  [BUGGY]  if(length  <  =  1)  {  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  1)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  1)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
9	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  <  =  length)  {  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||  buffer.length  <  =  length)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||  buffer.length  <  =  length)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
10	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||  buffer.length  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||  buffer.length  ==  0)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
11	[BUG]  [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(buffer.length    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
12	[BUG]  [BUGGY]  if(length!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(buffer.length    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
13	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer.length  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer.length  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {	  if(buffer.length    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
14	[BUG]  [BUGGY]  if(offset  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(offset  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(offset  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(buffer.length    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
15	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x80)!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
16	[BUG]  [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer!=  null  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
17	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)||(buffer[offset]  >=  0x80))  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)||(buffer[offset]  >=  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||(buffer[offset]  <  0x80)||(buffer[offset]  >=  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
18	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)||(buffer[offset]!=  0x80))  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)||(buffer[offset]!=  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||(buffer[offset]  <  0x80)||(buffer[offset]!=  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
19	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)||(buffer[offset]  >>  0x80))  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)||(buffer[offset]  >>  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||(buffer[offset]  <  0x80)||(buffer[offset]  >>  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
20	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0xfff)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0xfff)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0xfff)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
21	[BUG]  [BUGGY]  final  int  length  =  getWrappedField().parse(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  int  length  =  getWrappedField().parse(buffer,  offset,  length);  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	final  int  length  =  getWrappedField().parse(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
22	[BUG]  [BUGGY]  final  int  length  =  getLength();  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  int  length  =  getLength();  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	final  int  length  =  getLength();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
23	[BUG]  [BUGGY]  final  int  length  =  getWrappedField().parseBinary(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  int  length  =  getWrappedField().parseBinary(buffer,  offset,  length);  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	final  int  length  =  getWrappedField().parseBinary(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
24	[BUG]  [BUGGY]  final  int  length  =  buffer.length();  [CE]  <identifier>  expected  [FE]                          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  int  length  =  buffer.length();  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	final  int  length  =  buffer.length();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
25	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length);  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	final  byte[]  buffer  =  getBytes(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
26	[BUG]  [BUGGY]  final  int  length  =  getWrappedField().parseInt(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  int  length  =  getWrappedField().parseInt(buffer,  offset,  length);  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	final  int  length  =  getWrappedField().parseInt(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
27	[BUG]  [BUGGY]  final  int  length  =  getWrappedField().parseOctal(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  int  length  =  getWrappedField().parseOctal(buffer,  offset,  length);  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	final  int  length  =  getWrappedField().parseOctal(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
28	[BUG]  [BUGGY]  if(length  <  0x80  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0x80  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0x80  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
29	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
30	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x800)  ==  0)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x800)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x800)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
31	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7F)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7F)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x7F)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
32	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer!=  null  ||  buffer[offset]  ==  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer!=  null  ||  buffer[offset]  ==  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
33	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0x90)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0x90)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||  buffer[offset]  ==  0x90)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
34	[BUG]  [BUGGY]  if(buff  ==  null  ||  buffer[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buff  ==  null  ||  buffer[offset]  ==  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buff  ==  null  ||  buffer[offset]  ==  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
35	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0x800)  {  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0x800)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||  buffer[offset]  ==  0x800)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
36	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  >=  0x80)  {  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  >=  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||  buffer[offset]  >=  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
37	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer!=  null  ||  buffer[offset]!=  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer!=  null  ||  buffer[offset]!=  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
38	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x90)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x90)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||  buffer[offset]!=  0x90)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
39	[BUG]  [BUGGY]  if(buff  ==  null  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buff  ==  null  ||  buffer[offset]!=  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buff  ==  null  ||  buffer[offset]!=  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x800)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x800)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||  buffer[offset]!=  0x800)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
41	[BUG]  [BUGGY]  if(buff!=  null  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buff!=  null  ||  buffer[offset]!=  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buff!=  null  ||  buffer[offset]!=  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
42	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||  length  >  buffer.length)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||  length  >  buffer.length)  {	  if(length    <    =    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
43	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||  length  >  BYTE_MASK)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||  length  >  BYTE_MASK)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||  length  >  BYTE_MASK)  {	  if(length    <    =    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
44	[BUG]  [BUGGY]  if(length  <  =  0x7FF)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7FF)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7FF)  {	  if(length    <    =    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
45	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||  length  >  buffer[offset])  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||  length  >  buffer[offset])  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||  length  >  buffer[offset])  {	  if(length    <    =    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
46	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||  length  >  buffer[offset  +  offset])  {  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||  length  >  buffer[offset  +  offset])  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||  length  >  buffer[offset  +  offset])  {	  if(length    <    =    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
47	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||  buffer.length  >  0x7F)  {  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||  buffer.length  >  0x7F)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||  buffer.length  >  0x7F)  {	  if(length    <    =    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
48	[BUG]  [BUGGY]  if(length  <  0x7F  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0x7F  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0x7F  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
49	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
50	[BUG]  [BUGGY]  if(length  <  =  0x7FF  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7FF  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7FF  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
51	[BUG]  [BUGGY]  if(length  <  =  0x7f  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7f  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7f  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
52	[BUG]  [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  >=  0  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
53	[BUG]  [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
54	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x800)!=  0)  {  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x800)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x800)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
55	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x90)!=  0)  {  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x90)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x90)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
56	[BUG]  [BUGGY]  if(length  <  0  ||  buffer[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0  ||  buffer[offset]  ==  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0  ||  buffer[offset]  ==  0x80)  {	  if(length    <    =    0    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
57	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||  buffer[offset]!=  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||  buffer[offset]!=  0x80)  {	  if(length    <    =    0    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
58	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  ==  0  ||  buffer[offset]  ==  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  ==  0  ||  buffer[offset]  ==  0x80)  {	  if(length    <    =    0    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
59	[BUG]  [BUGGY]  if(length  >=  0  ||  buffer[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  >=  0  ||  buffer[offset]  ==  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  >=  0  ||  buffer[offset]  ==  0x80)  {	  if(length    <    =    0    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
60	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[offset]  ==  0x90)  {  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||  buffer[offset]  ==  0x90)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||  buffer[offset]  ==  0x90)  {	  if(length    <    =    0    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
61	[BUG]  [BUGGY]  if(length!=  0  ||  buffer[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]                        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length!=  0  ||  buffer[offset]  ==  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length!=  0  ||  buffer[offset]  ==  0x80)  {	  if(length    <    =    0    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
62	[BUG]  [BUGGY]  if(length  <  0x10  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0x10  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0x10  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x10    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
63	[BUG]  [BUGGY]  if(length  <  =  0x10  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x10  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x10  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    =    0x10    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
64	[BUG]  [BUGGY]  if(length  <  =  0x20  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x20  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x20  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x10    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
65	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x10)  ==  0)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x10)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x10)  ==  0)  {	  if(length    <    =    0x10    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
66	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0xfff)  ==  0)  {  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0xfff)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0xfff)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
67	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7F)  ==  0)  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7F)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x7F)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
68	[BUG]  [BUGGY]  if(length  <  1  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  1  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  1  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
69	[BUG]  [BUGGY]  if(offset  <  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(offset  <  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(offset  <  0  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
70	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0xfff)!=  0)  {  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0xfff)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0  ||(buffer[offset]  &  0xfff)!=  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
71	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(offset);  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  byte[]  buffer  =  getBytes(offset);  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	final  byte[]  buffer  =  getBytes(offset);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
72	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteArray(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  byte[]  buffer  =  getByteArray(buffer,  offset,  length);  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	final  byte[]  buffer  =  getByteArray(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
73	[BUG]  [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
74	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteArray();  [CE]  <identifier>  expected  [FE]                          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  byte[]  buffer  =  getByteArray();  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	final  byte[]  buffer  =  getByteArray();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
75	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBuffer();  [CE]  <identifier>  expected  [FE]                            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  byte[]  buffer  =  getBuffer();  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	final  byte[]  buffer  =  getBuffer();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
76	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteArray(buffer);  [CE]  <identifier>  expected  [FE]                              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  byte[]  buffer  =  getByteArray(buffer);  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	final  byte[]  buffer  =  getByteArray(buffer);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
77	[BUG]  [BUGGY]  if(length  <  =  0  &&(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  &&(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  &&(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
78	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0xff)!=  0)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0xff)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0xff)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
79	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7F)!=  0)  {  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7F)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x7F)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
80	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0)  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||  buffer[offset]!=  0)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
81	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||  buffer[offset]  ==  0)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
82	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0xff)  ==  0)  {  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0xff)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0xff)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
83	[BUG]  [BUGGY]  if(length  <  =  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  &&(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
84	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  >>  0x80))  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0  ||(buffer[offset]  >>  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0  ||(buffer[offset]  >>  0x80))  {	  if(length    <    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
85	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  {  0x80))  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0  ||(buffer[offset]  {  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0  ||(buffer[offset]  {  0x80))  {	  if(length    <    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
86	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  ==  0x80))  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0  ||(buffer[offset]  ==  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0  ||(buffer[offset]  ==  0x80))  {	  if(length    <    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
87	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  >>  0x80))  {  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  >>  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||(buffer[offset]  >>  0x80))  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
88	[BUG]  [BUGGY]  if(length  <  =  0x7F  &&(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  &&(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  &&(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
89	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  ==  0x80))  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  ==  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||(buffer[offset]  ==  0x80))  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
90	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  {  0x80))  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  {  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||(buffer[offset]  {  0x80))  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
91	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]!=  0x80))  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]!=  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||(buffer[offset]!=  0x80))  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
92	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length!=  0)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||  buffer.length!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||  buffer.length!=  0)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
93	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  >=  0)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||  buffer.length  >=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||  buffer.length  >=  0)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
94	[BUG]  [BUGGY]  if(length  <  =  0x10  ||(buffer[offset]  >>  0x80))  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x10  ||(buffer[offset]  >>  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x10  ||(buffer[offset]  >>  0x80))  {	  if(length    <    =    0x10    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
95	[BUG]  [BUGGY]  if(length  <  =  0x10  ||(buffer[offset]  {  0x80))  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x10  ||(buffer[offset]  {  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x10  ||(buffer[offset]  {  0x80))  {	  if(length    <    =    0x10    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
96	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||  buffer.length  >  0x80)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||  buffer.length  >  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||  buffer.length  >  0x80)  {	  if(length    <    =    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
97	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||  buffer.length  >  0x1F)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||  buffer.length  >  0x1F)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||  buffer.length  >  0x1F)  {	  if(length    <    =    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
98	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0xff)!=  0)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0xff)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0  ||(buffer[offset]  &  0xff)!=  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
99	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x7F)!=  0)  {  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x7F)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0  ||(buffer[offset]  &  0x7F)!=  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
100	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >>  0x80))  {  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >>  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||(buffer[offset]  >>  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
101	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]!=  0x80))  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||(buffer[offset]!=  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||(buffer[offset]!=  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
102	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >=  0x80))  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >=  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||(buffer[offset]  >=  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
103	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  [Delete]  0x80))  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  [Delete]  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||(buffer[offset]  [Delete]  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
104	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  {  0x80))  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  {  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||(buffer[offset]  {  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
105	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80))  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||(buffer[offset]  ==  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
106	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(buffer.length    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
107	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer!=  null  ||  buffer.length  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(buffer.length    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
108	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  >=  0x80))  {  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  >=  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||(buffer[offset]  >=  0x80))  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
109	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  >  0x80)  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  >  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||(buffer[offset]  >  0x80)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
110	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  >>  0x80))  {  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||(buffer[offset]  >>  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||(buffer[offset]  >>  0x80))  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
111	[BUG]  [BUGGY]  if(length  <  =  1  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  1  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  1  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
112	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x80)  >=  0)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x80)  >=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x80)  >=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
113	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  {  0x80))  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||(buffer[offset]  {  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||(buffer[offset]  {  0x80))  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
114	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  >  length())  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||  buffer.length  >  length())  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||  buffer.length  >  length())  {	  if(length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
115	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length!=  length)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||  buffer.length!=  length)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||  buffer.length!=  length)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
116	[BUG]  [BUGGY]  if(length  <  =(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
117	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]!=  0x80))  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0  ||(buffer[offset]!=  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0  ||(buffer[offset]!=  0x80))  {	  if(length    <    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
118	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  >=  0x80))  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0  ||(buffer[offset]  >=  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0  ||(buffer[offset]  >=  0x80))  {	  if(length    <    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
119	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]!=  0x80)  {  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]!=  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||  buffer[offset  +  length]!=  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
120	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffered  ==  null  ||  buffer[offset]!=  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffered  ==  null  ||  buffer[offset]!=  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
121	[BUG]  [BUGGY]  if(length  <  =  1  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  1  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  1  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
122	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)||  buffer[offset]  ==  0)  {  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)||  buffer[offset]  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||(buffer[offset]  <  0x80)||  buffer[offset]  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
123	[BUG]  [BUGGY]  if(length  >  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  >  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  >  0  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
124	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x90)!=  0)  {  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x90)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0  ||(buffer[offset]  &  0x90)!=  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
125	[BUG]  [BUGGY]  if(length  <  =(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
126	[BUG]  [BUGGY]  if(length  <  0x7F)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  0x7F)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  0x7F)  {	  if(length    <    =    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
127	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x80)  >=  0)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x80)  >=  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x80)  >=  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
128	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset  +  length)&  0x80)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x80  ||(buffer[offset  +  length)&  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x80  ||(buffer[offset  +  length)&  0x80)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
129	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  >>  0x80))  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  >>  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x80  ||(buffer[offset]  >>  0x80))  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
130	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
131	[BUG]  [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
132	[BUG]  [BUGGY]  final  byte[]  buffer  =  new  byte[length];  [CE]  <identifier>  expected  [FE]                        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  byte[]  buffer  =  new  byte[length];  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	final  byte[]  buffer  =  new  byte[length];	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
133	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]  ==  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||  buffer[offset  +  length]  ==  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
134	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0x80)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||  buffer.length  <  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
135	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0,  length)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0,  length)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer  ==  null  ||  buffer[offset]  ==  0,  length)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
136	[BUG]  [BUGGY]  if(length  <  =  0x80  ||  buffer[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x80  ||  buffer[offset]  ==  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x80  ||  buffer[offset]  ==  0x80)  {	  if(length    <    =    0    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
137	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||  buffer[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0x7F  ||  buffer[offset]  ==  0x80)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0x7F  ||  buffer[offset]  ==  0x80)  {	  if(length    <    =    0    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
138	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  =  0  ||  buffer.length  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(length  <  =  0  ||  buffer.length  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(buffer.length    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
139	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||(buffer[offset]!=  0x80))  {  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer.length  ==  0  ||(buffer[offset]!=  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer.length  ==  0  ||(buffer[offset]!=  0x80))  {	  if(buffer.length    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
140	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||(buffer[offset]  >>  0x80))  {  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(buffer.length  ==  0  ||(buffer[offset]  >>  0x80))  {  [BUGGY]    return  parseOctal(buffer,  offset,  length);  }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	167	167	1	replace	if(buffer.length  ==  0  ||(buffer[offset]  >>  0x80))  {	  if(buffer.length    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
