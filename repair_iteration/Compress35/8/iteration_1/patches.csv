bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(end  <  0)?  0L  :  buffer[start];  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return(end  <  0)?  0L  :  buffer[start];  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	return(end  <  0)?  0L  :  buffer[start];	  return(end    <    0)?    0L    :    end;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
2	[BUG]  [BUGGY]  return(end  <  0)?  0L  :  BYTE_MASK;  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return(end  <  0)?  0L  :  BYTE_MASK;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	return(end  <  0)?  0L  :  BYTE_MASK;	  return(end    <    0)?    0L    :    end;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
3	[BUG]  [BUGGY]  return(end  <  0)?  0L  :  length;  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return(end  <  0)?  0L  :  length;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	return(end  <  0)?  0L  :  length;	  return(end    <    0)?    0L    :    end;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
4	[BUG]  [BUGGY]  return(end  <  0)?  0L  :  1;  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return(end  <  0)?  0L  :  1;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	return(end  <  0)?  0L  :  1;	  return(end    <    0)?    0L    :    end;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
5	[BUG]  [BUGGY]  return(end  <  0)?  0L  :  buffer.length;  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return(end  <  0)?  0L  :  buffer.length;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	return(end  <  0)?  0L  :  buffer.length;	  return(end    <    0)?    0L    :    end;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
6	[BUG]  [BUGGY]  return(end  <  0)?  0L  :  end  +  length;  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return(end  <  0)?  0L  :  end  +  length;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	return(end  <  0)?  0L  :  end  +  length;	  return(end    <    0)?    0L    :    end;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");	  return    0;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");	  return    0;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.equals(buffer));  [CE]  illegal  start  of  expression  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.equals(buffer));  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( " "  +  length.equals(buffer));	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
10	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.equals(length));  [CE]  illegal  start  of  expression  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.equals(length));  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( " "  +  length.equals(length));	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
11	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ");  [CE]  illegal  start  of  expression  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+length+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
12	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ");  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+end+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
13	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ");  [CE]  illegal  start  of  expression  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ");  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+offset+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
15	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ");  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+start+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
16	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end);  [CE]  <identifier>  expected  [FE]                        ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] ",  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
17	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ");  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2. ");  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2. ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  less  than  2. ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  <identifier>  expected	6	None	replace
19	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2. ");  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2. ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2 ");  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ");  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
24	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ");  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  buffer[ "+buffer.length+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
25	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  end);  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  end);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  end);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
26	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ");  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
27	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ".] ");  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ".] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ ".] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
28	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
29	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  result  =  parseOctal(buffer,  offset,  length);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	result  =  parseOctal(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                        ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  end  =  offset  +  length;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  length);  end  =  offset  +  length;	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
31	[BUG]  [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
32	[BUG]  [BUGGY]  result  =  parseOctal(buffer,  start,  length);  [CE]  <identifier>  expected  [FE]                            ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  result  =  parseOctal(buffer,  start,  length);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	result  =  parseOctal(buffer,  start,  length);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  [CE]  illegal  start  of  expression  [FE]                              ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  length);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  return(end  <  =  0)?  0L  :  0L;  [CE]  illegal  start  of  expression  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return(end  <  =  0)?  0L  :  0L;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	return(end  <  =  0)?  0L  :  0L;	  return(end    <    0)?    0L    :    0L;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
35	[BUG]  [BUGGY]  return(length  <  0)?  0L  :  0L;  [CE]  illegal  start  of  expression  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return(length  <  0)?  0L  :  0L;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	return(length  <  0)?  0L  :  0L;	  return(end    <    0)?    0L    :    0L;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  return(end  <  0)?  0L  :  1L;  [CE]  illegal  start  of  expression  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return(end  <  0)?  0L  :  1L;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	return(end  <  0)?  0L  :  1L;	  return(end    <    0)?    0L    :    0L;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  return(start  <  0)?  0L  :  0L;  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return(start  <  0)?  0L  :  0L;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	return(start  <  0)?  0L  :  0L;	  return(end    <    0)?    0L    :    0L;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
38	[BUG]  [BUGGY]  return(end  <  0)?  0L  :  0L  +  1;  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return(end  <  0)?  0L  :  0L  +  1;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	return(end  <  0)?  0L  :  0L  +  1;	  return(end    <    0)?    0L    :    0L;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
39	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(end));  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(end));  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( " ".equals(end));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
40	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalStateException( " ");	  return    0;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
41	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  end));  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  end));  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer,  end));	  return    0;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
42	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ");  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
43	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "]: ");  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "]: ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "]: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
44	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] "  +  length);  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] "  +  length);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+start+ "] "  +  length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  <identifier>  expected	11	None	replace
45	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".getMessage());  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".getMessage());  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( " ".getMessage());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
46	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer.length));  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer.length));  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer.length));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
47	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  start));  [CE]  illegal  start  of  expression  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(buffer,  start));  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( " ".equals(buffer,  start));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
48	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  less  than  2 ");  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  less  than  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  <identifier>  expected	6	None	replace
49	[BUG]  [BUGGY]  return(end  <  0)?  0L  :  end  +  1;  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return(end  <  0)?  0L  :  end  +  1;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	return(end  <  0)?  0L  :  end  +  1;	  return(end    <    0)?    0L    :    end;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
50	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2 ");  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
51	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.toString());  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " "  +  length.toString());  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( " "  +  length.toString());	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
52	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start);  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
53	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]: ");  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]: ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
54	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  length);  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  length);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "] ",  length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
55	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start);  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse  byte[ "+buffer.length+ "]  for  path: "+start);	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+buffer.length+   "]   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
56	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
57	[BUG]  [BUGGY]  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  end  =  offset  +  length;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	end  =  offset  +  length;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
58	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                        ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
59	[BUG]  [BUGGY]  start  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  start  =  offset  +  length;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	start  =  offset  +  length;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse   "+buffer.length+ "] ");  [CE]  illegal  start  of  expression  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse   "+buffer.length+ "] ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Failed  to  parse   "+buffer.length+ "] ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    byte[   "+start+   "]   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
61	[BUG]  [BUGGY]  return(end  <  0)?  0L  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  return(end  <  0)?  0L  :  Integer.MAX_VALUE;  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	return(end  <  0)?  0L  :  Integer.MAX_VALUE;	  return(end    <    0)?    0L    :    0L;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
62	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ".equals(length));  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ".equals(length));  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ".equals(length));	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
63	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  3 ");  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  3 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  3 ");	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  <identifier>  expected	9	None	replace
64	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
65	[BUG]  [BUGGY]  if(end  <  length)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  if(end  <  length)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	if(end  <  length)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  if(end  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  if(end  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	if(end  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                        ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
68	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  less  than  2 ");  [CE]  illegal  start  of  expression  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  if  (buffer[start]  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  less  than  2 ");  [BUGGY]    }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	111	111	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    less    than    2   ");    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
