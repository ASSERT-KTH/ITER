bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
2	[BUG]  [BUGGY]  return  parseBinaryLong(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinaryLong(buffer,  offset,  length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinaryLong(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
3	[BUG]  [BUGGY]  return  parseOctalOrBinaryLong(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinaryLong(buffer,  offset,  length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctalOrBinaryLong(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
4	[BUG]  [BUGGY]  if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
5	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  -  2);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length  -  2);	  return    parseOctal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  -  1);	  return    parseOctal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
7	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length  -  1,  buffer.length);	  return    parseOctal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
8	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  -  4);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length  -  4);	  return    parseOctal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
9	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  3);  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  -  3);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length  -  3);	  return    parseOctal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
10	[BUG]  [BUGGY]  return  parseLong(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseLong(buffer,  offset,  length,  buffer.length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseLong(buffer,  offset,  length,  buffer.length);	  return    parseLong(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
11	[BUG]  [BUGGY]  return  parseLong(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseLong(buffer,  offset,  length,  negative);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseLong(buffer,  offset,  length,  negative);	  return    parseLong(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
12	[BUG]  [BUGGY]  return  parseInt(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseInt(buffer,  offset,  length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseInt(buffer,  offset,  length);	  return    parseLong(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
13	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  +  1);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  +  1);	  return    parseOctal(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  +  2);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length  +  2);	  return    parseOctal(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
15	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  +  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  +  1,  buffer.length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length  +  1,  buffer.length);	  return    parseOctal(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
16	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  +  1);	  return    parseOctal(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
17	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length,  negative);	  return    parseBinaryBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
18	[BUG]  [BUGGY]  return  parseOctalBigInteger(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalBigInteger(buffer,  offset,  length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctalBigInteger(buffer,  offset,  length);	  return    parseBinaryBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
19	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  buffer.length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length,  buffer.length);	  return    parseBinaryBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
20	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  negative);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBigInteger(buffer,  offset,  length,  negative);	  return    parseBinaryBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
21	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length,  0);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length,  0);	  return    parseBinaryBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
22	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length);	  return    parseOctalOrBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
23	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  negative);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  negative);	  return    parseOctalOrBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
24	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  0);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  0);	  return    parseOctalOrBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
25	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  false);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  false);	  return    parseOctalOrBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
26	[BUG]  [BUGGY]  return  parseBinaryOrBinary(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinaryOrBinary(buffer,  offset,  length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinaryOrBinary(buffer,  offset,  length);	  return    parseOctalOrBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
27	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  -  1);	  return    parseOctal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
28	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset]);  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset]);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  buffer[offset]);	  return    parseOctal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
29	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  2);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  -  2);	  return    parseOctal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
30	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  1);  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  1);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  1);	  return    parseOctal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
31	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  2);  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  2);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  2);	  return    parseOctal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
32	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  buffer.length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  0,  buffer.length);	  return    parseOctal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  false);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  false);	  return    parseOctal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  0xff);  [CE]  <identifier>  expected  [FE]                        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  0xff);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  0xff);	  return    parseOctal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
35	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinary(buffer,  offset,  length,  buffer.length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinary(buffer,  offset,  length,  buffer.length);	  return    parseBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
36	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinary(buffer,  offset,  length,  negative);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinary(buffer,  offset,  length,  negative);	  return    parseBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
37	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinary(buffer,  offset,  length,  0);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinary(buffer,  offset,  length,  0);	  return    parseBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
38	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  buffer.length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBigInteger(buffer,  offset,  length,  buffer.length);	  return    parseBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
39	[BUG]  [BUGGY]  return  parseBigDecimal(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBigDecimal(buffer,  offset,  length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBigDecimal(buffer,  offset,  length);	  return    parseBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
40	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  0);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBigInteger(buffer,  offset,  length,  0);	  return    parseBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
41	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBigInteger(buffer,  offset,  length  -  1);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBigInteger(buffer,  offset,  length  -  1);	  return    parseBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
42	[BUG]  [BUGGY]  if(length  >  0)  {  return  parseBigInteger(buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  if(length  >  0)  {  return  parseBigInteger(buffer,  offset,  length);  }  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	if(length  >  0)  {  return  parseBigInteger(buffer,  offset,  length);  }	  return    parseBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
43	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  buffer.length);  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  buffer.length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  buffer.length);	  return    parseOctal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
44	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  0);	  return    parseOctal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
45	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  null);  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  null);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  null);	  return    parseOctal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
46	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  false);  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  false);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  false);	  return    parseOctal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
47	[BUG]  [BUGGY]  return  parseDouble(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseDouble(buffer,  offset,  length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseDouble(buffer,  offset,  length);	  return    parseLong(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
48	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinary(buffer,  offset,  length  -  1);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinary(buffer,  offset,  length  -  1);	  return    parseBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
49	[BUG]  [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinaryBigDecimal(buffer,  offset,  length,  negative);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinaryBigDecimal(buffer,  offset,  length,  negative);	  return    parseOctal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
50	[BUG]  [BUGGY]  return  parseBinaryLong(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinaryLong(buffer,  offset,  length,  negative);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinaryLong(buffer,  offset,  length,  negative);	  return    parseOctal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
51	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1  +  1);  [CE]  <identifier>  expected  [FE]            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1  +  1);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length  -  1  +  1);	  return    parseOctal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
52	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  1);  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  1);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  1);	  return    parseOctal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
53	[BUG]  [BUGGY]  if(length  >  0)  {  return  parseOctalOrBinary(buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  if(length  >  0)  {  return  parseOctalOrBinary(buffer,  offset,  length);  }  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	if(length  >  0)  {  return  parseOctalOrBinary(buffer,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
54	[BUG]  [BUGGY]  if(length  <  =  0)  {  return  parseOctalOrBinaryLong(buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  if(length  <  =  0)  {  return  parseOctalOrBinaryLong(buffer,  offset,  length);  }  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	if(length  <  =  0)  {  return  parseOctalOrBinaryLong(buffer,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
55	[BUG]  [BUGGY]  if(length  <  =  0)  {  return  parseOctalOrBinary(buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  if(length  <  =  0)  {  return  parseOctalOrBinary(buffer,  offset,  length);  }  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	if(length  <  =  0)  {  return  parseOctalOrBinary(buffer,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
56	[BUG]  [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
57	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBigInteger(buffer,  offset,  length  +  1);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBigInteger(buffer,  offset,  length  +  1);	  return    parseBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
58	[BUG]  [BUGGY]  return  parseBinary(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                    ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinary(buffer,  offset,  length  +  1);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinary(buffer,  offset,  length  +  1);	  return    parseOctal(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
59	[BUG]  [BUGGY]  return  parseBinaryInteger(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinaryInteger(buffer,  offset,  length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinaryInteger(buffer,  offset,  length);	  return    parseBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                      ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
61	[BUG]  [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]        ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinaryBigInteger(buffer,  offset,  length  -  1);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinaryBigInteger(buffer,  offset,  length  -  1);	  return    parseBinaryBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
62	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  0x80);  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  0x80);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  0x80);	  return    parseOctal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
63	[BUG]  [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  0xff);  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBigInteger(buffer,  offset,  length,  0xff);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBigInteger(buffer,  offset,  length,  0xff);	  return    parseBigInteger(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
64	[BUG]  [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]          ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  buffer.length);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctalBinary(buffer,  offset,  length,  buffer.length);	  return    parseOctal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
65	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0xff);  [CE]  <identifier>  expected  [FE]              ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  negative,  0xff);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctal(buffer,  offset,  length,  negative,  0xff);	  return    parseOctal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
66	[BUG]  [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalBinary(buffer,  offset,  length,  negative);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseOctalBinary(buffer,  offset,  length,  negative);	  return    parseOctal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
67	[BUG]  [BUGGY]  return  parseBinaryOctal(buffer,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                  ArchiveException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseBinaryOctal(buffer,  offset,  length,  negative);  [BUGGY]    }  final  boolean  negative  =  buffer[offset]  ==  (byte)  0xff;  if  (length  <  9)  {  return  parseBinaryLong(buffer,  offset,  length,  negative);  }  return  parseBinaryBigInteger(buffer,  offset,  length,  negative);  }  [CLASS]  TarUtils  1  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	168	168	1	replace	return  parseBinaryOctal(buffer,  offset,  length,  negative);	  return    parseOctal(buffer,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
