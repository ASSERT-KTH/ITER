bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  length)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  length)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
2	[BUG]  [BUGGY]  if(length  <  =  0  ||  start  >  buffer.length  ||  end  >  end)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  ||  start  >  buffer.length  ||  end  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  ||  start  >  buffer.length  ||  end  >  end)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
3	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  end)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  end)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
4	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  offset)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  offset)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  offset)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
5	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  end  >  end)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  end  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer.length  ||  end  >  end)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
6	[BUG]  [BUGGY]  if(start  <  =  0  ||  start  >  buffer.length  ||  end  >  length)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  start  >  buffer.length  ||  end  >  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  start  >  buffer.length  ||  end  >  length)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
7	[BUG]  [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length  ||  end  >  length)  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length  ||  end  >  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  end  >  buffer.length  ||  end  >  length)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
8	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  offset  +  length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  offset  +  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  ==  offset  +  length)  {	  if(buffer[start]    ==    0    ||    end    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
9	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  offset)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  offset)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  ==  offset)  {	  if(buffer[start]    ==    0    ||    end    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
10	[BUG]  [BUGGY]  if(end  ==  0  ||  buffer[start]  ==  0  ||  end  ==  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  ==  0  ||  buffer[start]  ==  0  ||  end  ==  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  ==  0  ||  buffer[start]  ==  0  ||  end  ==  buffer.length)  {	  if(buffer[start]    ==    0    ||    end    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
11	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  ==  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  ==  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  ==  buffer.length)  {	  if(buffer[start]    ==    0    ||    end    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
12	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  length)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  ==  length)  {	  if(buffer[start]    ==    0    ||    end    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
13	[BUG]  [BUGGY]  aughtException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  aughtException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	aughtException( "Length "+length+ "  must  be  at  least  2 ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
14	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  aughtInvalidArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	aughtInvalidArgumentException( "Length "+length+ "  must  be  at  least  2 ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
15	[BUG]  [BUGGY]  aughtInvalidOctalException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  aughtInvalidOctalException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	aughtInvalidOctalException( "Length "+length+ "  must  be  at  least  2 ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
16	[BUG]  [BUGGY]  aughtInvalidException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  aughtInvalidException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	aughtInvalidException( "Length "+length+ "  must  be  at  least  2 ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
17	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Length "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  aughtInvalidArgumentException( "Length "+length+ "  must  be  at  least  2. ");  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	aughtInvalidArgumentException( "Length "+length+ "  must  be  at  least  2. ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
18	[BUG]  [BUGGY]  aughtInvalidOctalException( "Length "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  aughtInvalidOctalException( "Length "+length+ "  must  be  at  least  2. ");  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	aughtInvalidOctalException( "Length "+length+ "  must  be  at  least  2. ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
19	[BUG]  [BUGGY]  aughtException( "Length "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  aughtException( "Length "+length+ "  must  be  at  least  2. ");  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	aughtException( "Length "+length+ "  must  be  at  least  2. ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
20	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  -  1;  [CE]  illegal  start  of  expression  [FE]                                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  buffer.length()  -  1;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  buffer.length()  -  1;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
21	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  -  2;  [CE]  illegal  start  of  expression  [FE]                                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  buffer.length()  -  2;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  buffer.length()  -  2;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
22	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  +  1;  [CE]  illegal  start  of  expression  [FE]                                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  buffer.length()  +  1;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  buffer.length()  +  1;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
23	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  -  start;  [CE]  illegal  start  of  expression  [FE]                                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  buffer.length()  -  start;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  buffer.length()  -  start;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
24	[BUG]  [BUGGY]  final  int  end  =  offset.length();  [CE]  illegal  start  of  expression  [FE]                                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  offset.length();  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  offset.length();	  final    int    end    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
25	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  +  2;  [CE]  illegal  start  of  expression  [FE]                                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  buffer.length()  +  2;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  buffer.length()  +  2;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
26	[BUG]  [BUGGY]  if(end  <  0  ||  end  >  buffer.length  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  end  >  buffer.length  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  end  >  buffer.length  ||  end  >  buffer.length)  {	  if(end    <    0L)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
27	[BUG]  [BUGGY]  if(length  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  1)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  1)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
28	[BUG]  [BUGGY]  if(length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  ==  0)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
29	[BUG]  [BUGGY]  if(length  <  =  0  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  ||  end  >  buffer.length)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
30	[BUG]  [BUGGY]  if(length  <  =  2)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  2)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  2)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
31	[BUG]  [BUGGY]  if(length  <  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  buffer[start]  ==  0)  {	  if(end    <    0L    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
32	[BUG]  [BUGGY]  if(start  <  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  buffer[start]  ==  0)  {	  if(end    <    0L    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
33	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer[start])  {	  if(end    <    0L    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
34	[BUG]  [BUGGY]  if(end  <  0  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  buffer[start]!=  0)  {	  if(end    <    0L    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
35	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer[offset]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  buffer[offset]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  buffer[offset]  ==  0)  {	  if(buffer[start]    ==    0    ||    buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
36	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer[end]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  buffer[end]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  buffer[end]!=  0)  {	  if(buffer[start]    ==    0    ||    buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
37	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  0  ||  end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  0  ||  end]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  ||  buffer[start]  ==  0  ||  end]  ==  0)  {	  if(buffer[start]    ==    0    ||    buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
38	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  0  ||  buffer[end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  0  ||  buffer[end]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  ||  buffer[start]  ==  0  ||  buffer[end]  ==  0)  {	  if(buffer[start]    ==    0    ||    buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  end);	  System.arraycopy(buffer,    start,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
40	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
41	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
42	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  end);  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  end);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  offset,  buffer,  start,  end);	  System.arraycopy(buffer,    start,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
43	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end);	  System.arraycopy(buffer,    start,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
44	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
45	[BUG]  [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  end[start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  end[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  start  >  buffer.length  ||  end  >  end[start])  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
46	[BUG]  [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  end)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  start  >  buffer.length  ||  end  >  end)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
47	[BUG]  [BUGGY]  if(end  <  0  ||  end  >  buffer[start]  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  end  >  buffer[start]  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  end  >  buffer[start]  ||  end  >  buffer[start])  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
48	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer[start].length  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer[start].length  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer[start].length  ||  end  >  buffer[start])  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
49	[BUG]  [BUGGY]  if(end  <  0  ||  end  >  buffer.length  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  end  >  buffer.length  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  end  >  buffer.length  ||  end  >  buffer[start])  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
50	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  start  <  length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  start  <  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  start  <  length)  {	  if(buffer[start]    ==    0    ||    start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
51	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  start  >=  end)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  start  >=  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  start  >=  end)  {	  if(buffer[start]    ==    0    ||    start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
52	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start  +  length)  <  end)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start  +  length)  <  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  buffer[start  +  length)  <  end)  {	  if(buffer[start]    ==    0    ||    start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
53	[BUG]  [BUGGY]  final  int  end  =  offset  +  length  -  1;  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  offset  +  length  -  1;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  offset  +  length  -  1;	  final    int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
54	[BUG]  [BUGGY]  final  int  end  =  offset  +  length  -  2;  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  offset  +  length  -  2;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  offset  +  length  -  2;	  final    int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
55	[BUG]  [BUGGY]  final  int  end  =  buffer.length  +  length;  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  buffer.length  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  buffer.length  +  length;	  final    int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
56	[BUG]  [BUGGY]  final  int  end  =  offset  +  length  /  2;  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  offset  +  length  /  2;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  offset  +  length  /  2;	  final    int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
57	[BUG]  [BUGGY]  final  int  end  =  offset  +  length  -  4;  [CE]  illegal  start  of  expression  [FE]                              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  offset  +  length  -  4;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  offset  +  length  -  4;	  final    int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
58	[BUG]  [BUGGY]  final  int  end  =  offset  +  length,  buffer.length;  [CE]  illegal  start  of  expression  [FE]                                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  offset  +  length,  buffer.length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  offset  +  length,  buffer.length;	  final    int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
59	[BUG]  [BUGGY]  if(start  <  =  0  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  buffer[start]!=  0)  {	  if(end    <    =    0    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
60	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  ||  buffer[start]!=  0)  {	  if(end    <    =    0    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
61	[BUG]  [BUGGY]  if(end  >=  0  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  >=  0  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  >=  0  ||  buffer[start]!=  0)  {	  if(end    <    =    0    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
62	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  =  offset)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  =  offset)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  =  offset)  {	  if(buffer[start]    ==    0    ||    end    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
63	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  end)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  end)  {	  if(buffer[start]    ==    0    ||    end    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
64	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end!=  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end!=  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end!=  buffer.length)  {	  if(buffer[start]    ==    0    ||    end    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
65	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  end  >  start)  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer.length  <  0  ||  end  >  start)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer.length  <  0  ||  end  >  start)  {	  if(start    <    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
66	[BUG]  [BUGGY]  if(length  <  0  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  end  >  buffer.length)  {	  if(start    <    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
67	[BUG]  [BUGGY]  if(offset  <  0  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(offset  <  0  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(offset  <  0  ||  end  >  buffer.length)  {	  if(start    <    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
68	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer[offset  +  length])  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer[offset  +  length])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer[offset  +  length])  {	  if(start    <    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
69	[BUG]  [BUGGY]  if(end  <  0  ||  end  >  buffer[offset  +  length])  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  end  >  buffer[offset  +  length])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  end  >  buffer[offset  +  length])  {	  if(end    <    0    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
70	[BUG]  [BUGGY]  if(end  <  0  ||  end  >  buffer[offset])  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  end  >  buffer[offset])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  end  >  buffer[offset])  {	  if(end    <    0    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
71	[BUG]  [BUGGY]  if(end  <  0  ||  end  >  buffer[start  +  1])  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  end  >  buffer[start  +  1])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  end  >  buffer[start  +  1])  {	  if(end    <    0    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
72	[BUG]  [BUGGY]  if(length  <  0  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  end  >  buffer[start])  {	  if(end    <    0    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
73	[BUG]  [BUGGY]  if(end  <  0  ||  end  >  buffer[start  +  offset])  {  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  end  >  buffer[start  +  offset])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  end  >  buffer[start  +  offset])  {	  if(end    <    0    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
74	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  ==  0)  {	  if(buffer[start]    ==    0    ||    end    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
75	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  =  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  =  0)  {	  if(buffer[start]    ==    0    ||    end    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
76	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >=  0)  {	  if(buffer[start]    ==    0    ||    end    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
77	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  =  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  =  length)  {	  if(buffer[start]    ==    0    ||    end    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
78	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end!=  0)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end!=  0)  {	  if(buffer[start]    ==    0    ||    end    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
79	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  length])  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  length])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  length])  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    length]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
80	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer[offset  +  length])  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer[offset  +  length])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >=  buffer[offset  +  length])  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    length]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
81	[BUG]  [BUGGY]  if(buffer[start]  ==  0  &&  end  >  buffer[offset  +  length]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  &&  end  >  buffer[offset  +  length]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  &&  end  >  buffer[offset  +  length]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    length]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
82	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[offset  +  length]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[offset  +  length]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >  buffer[offset  +  length]!=  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    length]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
83	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end!=  buffer[offset  +  length])  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end!=  buffer[offset  +  length])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end!=  buffer[offset  +  length])  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    length]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
84	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  length]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  length]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  length]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    length]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
85	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
86	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
87	[BUG]  [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
88	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
89	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[end]  ==  0L)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[end]  ==  0L)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  buffer[end]  ==  0L)  {	  if(buffer[start]    ==    0L    ||    buffer[start]    ==    0L)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
90	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[start]!=  0L)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[start]!=  0L)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  buffer[start]!=  0L)  {	  if(buffer[start]    ==    0L    ||    buffer[start]    ==    0L)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
91	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
92	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);  [CE]  illegal  start  of  expression  [FE]                              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
93	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length);  [CE]  illegal  start  of  expression  [FE]                                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
94	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  length);  [CE]  illegal  start  of  expression  [FE]                                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  end,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
95	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length,  length);  [CE]  illegal  start  of  expression  [FE]                                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  length,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
96	[BUG]  [BUGGY]  if(start  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  ==  0)  {	  if(start    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
97	[BUG]  [BUGGY]  if(start  <  =  end)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  end)  {	  if(start    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
98	[BUG]  [BUGGY]  if(start  <  =  0  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  end  >  buffer[start])  {	  if(start    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
99	[BUG]  [BUGGY]  if(start  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  >=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  >=  0)  {	  if(start    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
100	[BUG]  [BUGGY]  if(length  >  0)  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  >  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  >  0)  {	  if(length    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
101	[BUG]  [BUGGY]  if(offset  <  0  ||  buffer[start]  ==  0  ||  end  <  end)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(offset  <  0  ||  buffer[start]  ==  0  ||  end  <  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(offset  <  0  ||  buffer[start]  ==  0  ||  end  <  end)  {	  if(buffer[start]    ==    0    ||    end    <    offset)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
102	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  offset)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  offset)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  <  offset)  {	  if(buffer[start]    ==    0    ||    end    <    offset)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
103	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
104	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  length);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  end,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
105	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
106	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
107	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
108	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
109	[BUG]  [BUGGY]  if(start  <  0  ||  end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end]  ==  0)  {	  if(end    <    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
110	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[offset])  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[offset])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  buffer[offset])  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
111	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer[offset])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer[offset])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >=  buffer[offset])  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
112	[BUG]  [BUGGY]  if(buffer[start]  ==  0  &&  end  >  buffer[offset]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  &&  end  >  buffer[offset]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  &&  end  >  buffer[offset]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
113	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset]  ==  0L)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset]  ==  0L)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  >  buffer[offset]  ==  0L)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
114	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end!=  buffer[offset])  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end!=  buffer[offset])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end!=  buffer[offset])  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
115	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
116	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  start  >  end)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer.length  <  0  ||  start  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer.length  <  0  ||  start  >  end)  {	  if(end    <    0    ||    start    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
117	[BUG]  [BUGGY]  if(end  <  0  ||  start  >=  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >=  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >=  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
118	[BUG]  [BUGGY]  if(end  <  0  ||  start  ==  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  ==  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  ==  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
119	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  <  buffer[start])  {	  if(buffer[start]    ==    0L    ||    end    >    buffer[start]    ==    0L)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
120	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  >=  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  >=  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  >=  buffer[start])  {	  if(buffer[start]    ==    0L    ||    end    >    buffer[start]    ==    0L)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
121	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  =  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  =  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  <  =  buffer[start])  {	  if(buffer[start]    ==    0L    ||    end    >    buffer[start]    ==    0L)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
122	[BUG]  [BUGGY]  if(buffer[start]  ==''  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==''  ||  buffer[start]  ==  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==''  ||  buffer[start]  ==  end)  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
123	[BUG]  [BUGGY]  if(buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  end)  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
124	[BUG]  [BUGGY]  if(buffer[start]  ==  'n'  ||  buffer[start]  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  'n'  ||  buffer[start]  ==  'r')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  'n'  ||  buffer[start]  ==  'r')  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
125	[BUG]  [BUGGY]  if(buffer[start]  ==''  ||  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==''  ||  buffer[start]  ==  '-')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==''  ||  buffer[start]  ==  '-')  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
126	[BUG]  [BUGGY]  if(buffer[start]  ==  'n'  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  'n'  ||  buffer[start]  ==  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  'n'  ||  buffer[start]  ==  end)  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
127	[BUG]  [BUGGY]  if(buffer[start]  ==''  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==''  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==''  ||  end  >  buffer[start])  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
128	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  ||  buffer[start]  ==  end)  {	  if(length    <    =    0L    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
129	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
130	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
131	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
132	[BUG]  [BUGGY]  if(start  <  =  0  ||  start  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  start  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  start  >  buffer[start])  {	  if(end    <    =    0    ||    start    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
133	[BUG]  [BUGGY]  if(length  <  =  0  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  ||  end  >  buffer[start])  {	  if(end    <    =    0    ||    start    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
134	[BUG]  [BUGGY]  if(length  <  =  0  ||  start  >  buffer[start])  {  [CE]  <identifier>  expected  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  ||  start  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  ||  start  >  buffer[start])  {	  if(end    <    =    0    ||    start    >    buffer[start])    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
135	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
136	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
137	[BUG]  [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
138	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  length))  {  [CE]  <identifier>  expected  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  length))  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  length))  {	  if(buffer[start]    ==    0    ||    end    <    buffer[start])    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
139	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
140	[BUG]  [BUGGY]  if(end  <  0  ||  start  >=  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >=  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >=  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
141	[BUG]  [BUGGY]  if(end  <  0  ||  start  >=  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >=  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >=  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
142	[BUG]  [BUGGY]  if(end  <  0  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  buffer[start]  ==  '')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  buffer[start]  ==  '')  {	  if(end    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
143	[BUG]  [BUGGY]  if(start  <  =  0  ||  buffer[start]  ==  '')  {  [CE]  <identifier>  expected  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  buffer[start]  ==  '')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  buffer[start]  ==  '')  {	  if(end    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
144	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  '')  {  [CE]  <identifier>  expected  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  ||  buffer[start]  ==  '')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  ||  buffer[start]  ==  '')  {	  if(end    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
145	[BUG]  [BUGGY]  if(start  <  =  0  ||  end[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  end[start]  ==  '')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  end[start]  ==  '')  {	  if(end    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
146	[BUG]  [BUGGY]  if(start  <  =  0  ||  end]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  end]  ==  '')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  end]  ==  '')  {	  if(end    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
147	[BUG]  [BUGGY]  while(start  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  while(start  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	while(start  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(start    <    end)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
148	[BUG]  [BUGGY]  bucket  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  bucket  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	bucket  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(start    <    end)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
149	[BUG]  [BUGGY]  bucket  <  =  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  bucket  <  =  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	bucket  <  =  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(start    <    end)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
150	[BUG]  [BUGGY]  while(end  <  start)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  while(end  <  start)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	while(end  <  start)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(start    <    end)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
151	[BUG]  [BUGGY]  while(start  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  while(start  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	while(start  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");	  if(start    <    end)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
152	[BUG]  [BUGGY]  if(end  <  =  0L  ||  start  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  =  0L  ||  start  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  =  0L  ||  start  >  buffer[start])  {	  if(start    <    =    0L    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
153	[BUG]  [BUGGY]  if(start  <  =  0  ||  end  >  buffer[offset  +  length])  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  end  >  buffer[offset  +  length])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  end  >  buffer[offset  +  length])  {	  if(start    <    =    0L    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
154	[BUG]  [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  end  >  buffer.length)  {	  if(end    <    =    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
155	[BUG]  [BUGGY]  if(buffer.length  <  =  0  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer.length  <  =  0  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer.length  <  =  0  ||  end  >  buffer.length)  {	  if(end    <    =    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
156	[BUG]  [BUGGY]  if(buffer.length  <  =  0  ||  end  >  end)  {  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer.length  <  =  0  ||  end  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer.length  <  =  0  ||  end  >  end)  {	  if(end    <    =    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
157	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  >  buffer[offset]  ==  0)  {	  if(buffer[start]    ==    0L    ||    end    >    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
158	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
159	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
160	[BUG]  [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
161	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end!=  offset)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end!=  offset)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end!=  offset)  {	  if(buffer[start]    ==    0    ||    end    >=    offset)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
162	[BUG]  [BUGGY]  if(end  <  =  0L  ||  start  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  =  0L  ||  start  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  =  0L  ||  start  >  buffer.length)  {	  if(start    <    =    0L    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
163	[BUG]  [BUGGY]  if(buffer.length  <  =  0  ||  end  >  start)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer.length  <  =  0  ||  end  >  start)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer.length  <  =  0  ||  end  >  start)  {	  if(start    <    =    0L    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
164	[BUG]  [BUGGY]  if(buffer[start]!=  0  ||  end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]!=  0  ||  end]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]!=  0  ||  end]  ==  0)  {	  if(buffer[start]    ==    0    ||    end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
165	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end]  ==  0L)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end]  ==  0L)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end]  ==  0L)  {	  if(buffer[start]    ==    0    ||    end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
166	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
167	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
168	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
169	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
170	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
171	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
172	[BUG]  [BUGGY]  if(start  >=  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  >=  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  >=  0  ||  buffer[start]  ==  0)  {	  if(start    <    =    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
173	[BUG]  [BUGGY]  if(offset  <  =  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(offset  <  =  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(offset  <  =  0  ||  buffer[start]  ==  0)  {	  if(start    <    =    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
174	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  end  ||  buffer[start]  ==  0)  {	  if(start    <    =    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
175	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer[offset])  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer[offset])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer[offset])  {	  if(end    <    0    ||    start    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
176	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer[offset  +  length])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer[offset  +  length])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer[offset  +  length])  {	  if(end    <    0    ||    start    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
177	[BUG]  [BUGGY]  if(end  <  0  ||  start  >=  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >=  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >=  buffer[start])  {	  if(end    <    0    ||    start    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
178	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer[start])  {	  if(end    <    0    ||    start    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
179	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[start]  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[start]  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  buffer[start]  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
180	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[offset]  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  type  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[offset]  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >  buffer[offset]  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
181	[BUG]  [BUGGY]  if(end  <  0  ||  buffer[start]  ==  0  ||  end  >  buffer[start]  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  type  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  buffer[start]  ==  0  ||  end  >  buffer[start]  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  buffer[start]  ==  0  ||  end  >  buffer[start]  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
182	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  length  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  length  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  length  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
183	[BUG]  [BUGGY]  if(end  >  buffer[start]  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  >  buffer[start]  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  >  buffer[start]  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
184	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer[start]  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer[start]  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >=  buffer[start]  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
185	[BUG]  [BUGGY]  if(end  <  0  ||  buffer[start]  >  buffer[start]  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  buffer[start]  >  buffer[start]  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  buffer[start]  >  buffer[start]  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
186	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  ==  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  ==  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  ==  buffer[start])  {	  if(buffer[start]    ==    0L    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
187	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  ==  buffer[start])  {	  if(buffer[start]    ==    0L    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
188	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  <  length)  {	  if(buffer[start]    ==    0L    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
189	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  length]  {  0)  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  length]  {  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  length]  {  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
190	[BUG]  [BUGGY]  if(buffer[start]  ==  0  &&  end  >  buffer[offset  +  start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  &&  end  >  buffer[offset  +  start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  &&  end  >  buffer[offset  +  start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
191	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  start])  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
192	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  start  >  buffer[offset  +  length]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  start  >  buffer[offset  +  length]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  start  >  buffer[offset  +  length]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
193	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[offset]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  ||  buffer[offset]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  ||  buffer[offset]  ==  0)  {	  if(length    <    =    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
194	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  end,  length);  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  end,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  offset,  buffer,  end,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
195	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  length);  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
196	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
197	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  +  1);  [CE]  illegal  start  of  expression  [FE]                              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  +  1);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length  +  1);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
198	[BUG]  [BUGGY]  if(start  <  =  0  ||  end  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  end  <  =  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  end  <  =  0)  {	  if(start    <    =    0L)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
199	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset])  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  >  buffer[offset])  {	  if    (buffer[start]    ==    0    ||    end    >    buffer[offset])    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
200	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  length])  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  length])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  length])  {	  if    (buffer[start]    ==    0    ||    end    >    buffer[offset    +    length])    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
201	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[offset]  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[offset]  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >  buffer[offset]  ||  buffer[start]!=  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
202	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[start]  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[start]  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  buffer[start]  ||  buffer[start]!=  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
203	[BUG]  [BUGGY]  if(end  <  0  ||  buffer[start]  ==  0  ||  end  >  buffer[start]  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  buffer[start]  ==  0  ||  end  >  buffer[start]  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  buffer[start]  ==  0  ||  end  >  buffer[start]  ||  buffer[start]!=  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
204	[BUG]  [BUGGY]  if(end  >  buffer[start]  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  >  buffer[start]  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  >  buffer[start]  ||  buffer[start]!=  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
205	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  length  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  length  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  length  ||  buffer[start]!=  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
206	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer[start]  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer[start]  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >=  buffer[start]  ||  buffer[start]!=  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
207	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[start]  ||  buffer[start]  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[start]  ||  buffer[start]  >=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  buffer[start]  ||  buffer[start]  >=  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
208	[BUG]  [BUGGY]  if(end  <  0  ||  end  ==  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  end  ==  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  end  ==  buffer.length)  {	  if(end    <    =    0    ||    end    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
209	[BUG]  [BUGGY]  if(start  <  =  0  ||  end  ==  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  end  ==  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  end  ==  buffer.length)  {	  if(end    <    =    0    ||    end    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
210	[BUG]  [BUGGY]  if(length  <  =  0  ||  end  ==  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  ||  end  ==  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  ||  end  ==  buffer.length)  {	  if(end    <    =    0    ||    end    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
211	[BUG]  [BUGGY]  if(start  <  =  0  ||  end  >=  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  end  >=  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  end  >=  buffer.length)  {	  if(end    <    =    0    ||    end    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
212	[BUG]  [BUGGY]  if(end  <  0  ||  end  >=  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  end  >=  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  end  >=  buffer.length)  {	  if(end    <    =    0    ||    end    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
213	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  offset  +  length)  {  [CE]  <identifier>  expected  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  offset  +  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >=  offset  +  length)  {	  if(buffer[start]    ==    0    ||    end    >=    buffer[start])    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
214	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  buffer[offset  +  length))  {  [CE]  <identifier>  expected  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  buffer[offset  +  length))  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  ==  buffer[offset  +  length))  {	  if(buffer[start]    ==    0    ||    end    >=    buffer[start])    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
215	[BUG]  [BUGGY]  if(end  >=  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  >=  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  >=  0  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >=    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
216	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer[offset  +  length))  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer[offset  +  length))  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >=  buffer[offset  +  length))  {	  if(buffer[start]    ==    0    ||    end    >=    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
217	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end!=  offset  +  length)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end!=  offset  +  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end!=  offset  +  length)  {	  if(buffer[start]    ==    0    ||    end    >=    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
218	[BUG]  [BUGGY]  if(start  <  0L  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0L  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0L  ||  buffer[start]  ==  0)  {	  if(start    <    =    0L    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
219	[BUG]  [BUGGY]  if(end  ==  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  ==  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  ==  0  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end!=    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
220	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  buffer[offset+length])  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  buffer[offset+length])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  ==  buffer[offset+length])  {	  if(buffer[start]    ==    0    ||    end!=    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
221	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  =  buffer[offset])  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  =  buffer[offset])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  =  buffer[offset])  {	  if(buffer[start]    ==    0    ||    end    <    =    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
222	[BUG]  [BUGGY]  if(end  <  =  0  ||  end  >  buffer[offset])  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  =  0  ||  end  >  buffer[offset])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  =  0  ||  end  >  buffer[offset])  {	  if(end    <    =    0L    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
223	[BUG]  [BUGGY]  if(buffer[start]  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  >=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  >=  0)  {	  if(buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
224	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer[start  +  start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer[start  +  start])  {	  if(start    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
225	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  length);  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  offset,  buffer,  start,  length);	  System.arraycopy(buffer,    start,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
226	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  start,  length);  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  start,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  end,  buffer,  start,  length);	  System.arraycopy(buffer,    start,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
227	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  1;  [CE]  illegal  start  of  expression  [FE]                              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  end  =  offset  +  length  -  1;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	int  end  =  offset  +  length  -  1;	  int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
228	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  2;  [CE]  illegal  start  of  expression  [FE]                                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  end  =  offset  +  length  -  2;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	int  end  =  offset  +  length  -  2;	  int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
229	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  4;  [CE]  illegal  start  of  expression  [FE]                                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  end  =  offset  +  length  -  4;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	int  end  =  offset  +  length  -  4;	  int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
230	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  2;  [CE]  illegal  start  of  expression  [FE]                                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  end  =  offset  +  length  /  2;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	int  end  =  offset  +  length  /  2;	  int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
231	[BUG]  [BUGGY]  int  end  =  offset  +  length,  buffer.length;  [CE]  illegal  start  of  expression  [FE]                                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  end  =  offset  +  length,  buffer.length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	int  end  =  offset  +  length,  buffer.length;	  int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
232	[BUG]  [BUGGY]  int  end  =  buffer.length  +  length;  [CE]  illegal  start  of  expression  [FE]                                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  end  =  buffer.length  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	int  end  =  buffer.length  +  length;	  int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
233	[BUG]  [BUGGY]  if(end  <  =  0  ||  end  >  buffer[start  +  1])  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  =  0  ||  end  >  buffer[start  +  1])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  =  0  ||  end  >  buffer[start  +  1])  {	  if(end    <    =    0    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
234	[BUG]  [BUGGY]  if(end  <  =  0  ||  end  >  buffer[offset  +  length])  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  =  0  ||  end  >  buffer[offset  +  length])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  =  0  ||  end  >  buffer[offset  +  length])  {	  if(end    <    =    0    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
235	[BUG]  [BUGGY]  if(end  <  0  ||  end  >  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  end  >  buffer[start  +  start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  end  >  buffer[start  +  start])  {	  if(end    <    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
236	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  end  >  end)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer.length  <  0  ||  end  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer.length  <  0  ||  end  >  end)  {	  if(end    <    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
237	[BUG]  [BUGGY]  if(start  <  =  0  ||  start  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  start  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  start  >  buffer.length)  {	  if(end    <    =    0    ||    start    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
238	[BUG]  [BUGGY]  if(buffer.length  <  =  0  ||  start  >  end)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer.length  <  =  0  ||  start  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer.length  <  =  0  ||  start  >  end)  {	  if(end    <    =    0    ||    start    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
239	[BUG]  [BUGGY]  if(length  <  =  0  ||  start  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  ||  start  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  ||  start  >  buffer.length)  {	  if(end    <    =    0    ||    start    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
240	[BUG]  [BUGGY]  if(length[start]  ==  0  ||  end  <  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length[start]  ==  0  ||  end  <  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length[start]  ==  0  ||  end  <  buffer.length)  {	  if(buffer[start]    ==    0    ||    end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
241	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  length)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >=  length)  {	  if(buffer[start]    ==    0    ||    end    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
242	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  offset  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  offset  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  offset  ||  end  >  buffer.length)  {	  if(buffer[start]    ==    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
243	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start]  ==  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  buffer[start]  ==  end)  {	  if(buffer[start]    ==    0L    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
244	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[start]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[start]!=  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  buffer[start]!=  end)  {	  if(buffer[start]    ==    0L    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
245	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start]!=  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  buffer[start]!=  end)  {	  if(buffer[start]    ==    0L    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
246	[BUG]  [BUGGY]  if(buffer[start]!=  0L  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]!=  0L  ||  buffer[start]  ==  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]!=  0L  ||  buffer[start]  ==  end)  {	  if(buffer[start]    ==    0L    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
247	[BUG]  [BUGGY]  if(buffer[start]!=  0  ||  buffer[start]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]!=  0  ||  buffer[start]  ==  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]!=  0  ||  buffer[start]  ==  end)  {	  if(buffer[start]    ==    0L    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
248	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[end]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[end]  ==  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  buffer[end]  ==  end)  {	  if(buffer[start]    ==    0L    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
249	[BUG]  [BUGGY]  if(length  <  0  ||  buffer[start]  ==  0  ||  end  <  offset  +  length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  buffer[start]  ==  0  ||  end  <  offset  +  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  buffer[start]  ==  0  ||  end  <  offset  +  length)  {	  if(buffer[start]    ==    0    ||    end    <    offset    +    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
250	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer.length  +  length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer.length  +  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  buffer.length  +  length)  {	  if(buffer[start]    ==    0    ||    end    <    offset    +    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
251	[BUG]  [BUGGY]  if(buffer[start]  ==  0  &&  end  <  offset  +  length)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  &&  end  <  offset  +  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  &&  end  <  offset  +  length)  {	  if(buffer[start]    ==    0    ||    end    <    offset    +    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
252	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  offset  +  length)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  offset  +  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  <  offset  +  length)  {	  if(buffer[start]    ==    0    ||    end    <    offset    +    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
253	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  start  <  end  +  length)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  start  <  end  +  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  start  <  end  +  length)  {	  if(buffer[start]    ==    0    ||    end    <    offset    +    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
254	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer[start]  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer[start]  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer[start]  ||  end  >  buffer[start])  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
255	[BUG]  [BUGGY]  if(length  <  =  0  ||  start  >  buffer.length  ||  end  >  end[start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  ||  start  >  buffer.length  ||  end  >  end[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  ||  start  >  buffer.length  ||  end  >  end[start])  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
256	[BUG]  [BUGGY]  if(start  <  =  0  ||  start  >  buffer.length  ||  end  >  end)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  start  >  buffer.length  ||  end  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  start  >  buffer.length  ||  end  >  end)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
257	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
258	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
259	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  start);  [CE]  illegal  start  of  expression  [FE]                              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  start);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
260	[BUG]  [BUGGY]  if(end  <  start)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  start)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  start)  {	  if(start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
261	[BUG]  [BUGGY]  if(start  <  length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  length)  {	  if(start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
262	[BUG]  [BUGGY]  if(start  <  end  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  end  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  end  ||  end  >  buffer.length)  {	  if(start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
263	[BUG]  [BUGGY]  if(start  <  end  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  end  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  end  ||  end  >  buffer[start])  {	  if(start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
264	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  0  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  0  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  end  ||  buffer[start]  ==  0  ||  buffer[start]!=  0)  {	  if(buffer[start]    ==    0    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
265	[BUG]  [BUGGY]  if(buffer[start]!=  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]!=  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]!=  0  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
266	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
267	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  end);  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  end);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  start,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
268	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  start);  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  start);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  end,  start);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
269	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
270	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  end,  buffer,  start,  end);  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  end,  buffer,  start,  end);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  end,  buffer,  start,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
271	[BUG]  [BUGGY]  if(end  <  start  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  start  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  start  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
272	[BUG]  [BUGGY]  if(end  <  end  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  end  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  end  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
273	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]  ==  0  ||  length  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  end  ||  buffer[start]  ==  0  ||  length  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  end  ||  buffer[start]  ==  0  ||  length  >  buffer[start])  {	  if(start    <    end    ||    buffer[start]    ==    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
274	[BUG]  [BUGGY]  if(length  <  end  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  end  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  end  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
275	[BUG]  [BUGGY]  if(end  <  offset  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  offset  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  offset  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
276	[BUG]  [BUGGY]  if(offset  <  end  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(offset  <  end  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(offset  <  end  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
277	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[end]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  buffer[end]  ==  0)  {	  if(buffer[start]    ==    0L    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
278	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  end  >  buffer[offset  +  length  -  1])  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if  (buffer[start]  ==  0  ||  end  >  buffer[offset  +  length  -  1])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if  (buffer[start]  ==  0  ||  end  >  buffer[offset  +  length  -  1])  {	  if    (buffer[start]    ==    0    ||    end    >    buffer[offset    +    length])    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
279	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  end  >  buffer[offset  +  length  -  1)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if  (buffer[start]  ==  0  ||  end  >  buffer[offset  +  length  -  1)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if  (buffer[start]  ==  0  ||  end  >  buffer[offset  +  length  -  1)  {	  if    (buffer[start]    ==    0    ||    end    >    buffer[offset    +    length])    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
280	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  end)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  end)  {	  if(end    <    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
281	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
282	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
283	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  end  ==  buffer[offset])  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if  (buffer[start]  ==  0  ||  end  ==  buffer[offset])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if  (buffer[start]  ==  0  ||  end  ==  buffer[offset])  {	  if    (buffer[start]    ==    0    ||    end    >    buffer[offset])    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
284	[BUG]  [BUGGY]  if  (buffer[start]  ==  0  ||  end  >  buffer[offset  +  length))  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if  (buffer[start]  ==  0  ||  end  >  buffer[offset  +  length))  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if  (buffer[start]  ==  0  ||  end  >  buffer[offset  +  length))  {	  if    (buffer[start]    ==    0    ||    end    >    buffer[offset])    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
285	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length  -  start);  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length  -  start);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  length  -  start);	  System.arraycopy(buffer,    0,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
286	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
287	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer[start]  {  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer[start]  {  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer[start]  {  0)  {	  if(end    <    =    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
288	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer[start]  ==  0)  {	  if(end    <    =    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
289	[BUG]  [BUGGY]  if(start  <  =  0L  ||  start  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0L  ||  start  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0L  ||  start  >  buffer.length)  {	  if(end    <    =    0L    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
290	[BUG]  [BUGGY]  if(end  <  0L  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0L  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0L  ||  end  >  buffer.length)  {	  if(end    <    =    0L    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
291	[BUG]  [BUGGY]  if(offset  <  0  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(offset  <  0  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(offset  <  0  ||  end  >  buffer[start])  {	  if(start    <    =    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
292	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  +  start;  [CE]  illegal  start  of  expression  [FE]                                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  buffer.length()  +  start;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  buffer.length()  +  start;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
293	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  +  length;  [CE]  [FE]                                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  buffer.length()  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  buffer.length()  +  length;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  	24	None	replace
294	[BUG]  [BUGGY]  readFully(buffer,  start,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  readFully(buffer,  start,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	readFully(buffer,  start,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
295	[BUG]  [BUGGY]  mutableToJava2D(buffer,  start,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  mutableToJava2D(buffer,  start,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	mutableToJava2D(buffer,  start,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
296	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  [Delete]  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	[Delete]	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
297	[BUG]  [BUGGY]  aughtInvalidEOF( "  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  aughtInvalidEOF( "  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	aughtInvalidEOF( "  <  =  0)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
298	[BUG]  [BUGGY]  mutableToJava2D(end,  buffer,  start,  length))  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  mutableToJava2D(end,  buffer,  start,  length))  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	mutableToJava2D(end,  buffer,  start,  length))  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
299	[BUG]  [BUGGY]  aughtInvalidEOF( "  <  =  0 ")  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  aughtInvalidEOF( "  <  =  0 ")  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	aughtInvalidEOF( "  <  =  0 ")  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
300	[BUG]  [BUGGY]  mutableToJava2D(end,  buffer,  start,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  mutableToJava2D(end,  buffer,  start,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	mutableToJava2D(end,  buffer,  start,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
301	[BUG]  [BUGGY]  if(start  <  0  ||  end  ==  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  ==  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  ==  buffer.length)  {	  if(end    <    =    0    ||    end    ==    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
302	[BUG]  [BUGGY]  if(start  <  =  0  ||  start  >  buffer[end])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  start  >  buffer[end])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  start  >  buffer[end])  {	  if(end    <    =    0    ||    start    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
303	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer[start]  ==  '')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer[start]  ==  '')  {	  if(end    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
304	[BUG]  [BUGGY]  if(start  <  0  ||  buffer[start]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  buffer[start]  ==  '')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  buffer[start]  ==  '')  {	  if(end    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
305	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer[start]  {  '')  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer[start]  {  '')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer[start]  {  '')  {	  if(end    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
306	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer[end])  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer[end])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer[end])  {	  if(end    <    0    ||    start    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
307	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer[offset  +  start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer[offset  +  start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer[offset  +  start])  {	  if(end    <    0    ||    start    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
308	[BUG]  [BUGGY]  if(buffer[start]  ==  0  &&  end  <  offset)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  &&  end  <  offset)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  &&  end  <  offset)  {	  if(buffer[start]    ==    0    ||    end    <    offset)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
309	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >  offset)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >  offset)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >  offset)  {	  if(buffer[start]    ==    0    ||    end    <    offset)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
310	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end,  length);  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  end,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
311	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  -  start);  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  -  start);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length  -  start);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
312	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end!=  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end!=  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end!=  buffer[start])  {	  if(buffer[start]    ==    0    ||    end!=    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
313	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  buffer[offset  +  start])  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  buffer[offset  +  start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  ==  buffer[offset  +  start])  {	  if(buffer[start]    ==    0    ||    end!=    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
314	[BUG]  [BUGGY]  if(end  <  =  0  ||  end  >  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  =  0  ||  end  >  buffer[start  +  start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  =  0  ||  end  >  buffer[start  +  start])  {	  if(end    <    =    0    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
315	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  >  buffer.length)  {	  if(buffer[start]    ==    0L    ||    end    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
316	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  >=  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  >=  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  >=  buffer.length)  {	  if(buffer[start]    ==    0L    ||    end    <    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
317	[BUG]  [BUGGY]  if(start  <  end  ||  end  >  buffer.length  ||  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  end  ||  end  >  buffer.length  ||  buffer[start]  =='')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  end  ||  end  >  buffer.length  ||  buffer[start]  =='')  {	  if(start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
318	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  length]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  length]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  buffer[offset  +  length]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
319	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  0L)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  0L)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  <  0L)  {	  if(buffer[start]    ==    0L    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
320	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
321	[BUG]  [BUGGY]  if(start  <  end  ||  buffer[start]!=  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  end  ||  buffer[start]!=  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  end  ||  buffer[start]!=  0  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
322	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[start]  ==  length)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  buffer[start]  ==  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  buffer[start]  ==  length)  {	  if(buffer[start]    ==    0L    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
323	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  ==  0  ||  buffer[start]  ==  0)  {	  if(length    <    =    0L    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
324	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  length]  ==  0L)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  length]  ==  0L)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  length]  ==  0L)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    length]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
325	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer[start])  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
326	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer.length  ||  end  >  buffer[start])  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
327	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  end  >  offset[start])  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  end  >  offset[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer.length  ||  end  >  offset[start])  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
328	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer[offset])  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer[offset])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer[offset])  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
329	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer[offset])  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer[offset])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer[offset])  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
330	[BUG]  [BUGGY]  if(end  <  0  ||  start  >=  buffer.length  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >=  buffer.length  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >=  buffer.length  ||  end  >  buffer[start])  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
331	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  start  <  offset)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  start  <  offset)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  start  <  offset)  {	  if(buffer[start]    ==    0    ||    start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
332	[BUG]  [BUGGY]  if(buffer[start]  ==  0  &&  start  <  end)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  &&  start  <  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  &&  start  <  end)  {	  if(buffer[start]    ==    0    ||    start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
333	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  offset);  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  offset);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  offset);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
334	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
335	[BUG]  [BUGGY]  if(start  <  =  0  ||  end  >  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  end  >  buffer[start  +  start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  end  >  buffer[start  +  start])  {	  if(start    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
336	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >  offset  +  length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >  offset  +  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >  offset  +  length)  {	  if(buffer[start]    ==    0    ||    end    <    offset    +    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
337	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start  +  offset  +  length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start  +  offset  +  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  buffer[start  +  offset  +  length)  {	  if(buffer[start]    ==    0    ||    end    <    offset    +    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
338	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  start]  ==  0)  {	  if(buffer[start]    ==    0L    ||    end    >    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
339	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  offset  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  <  offset  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  <  offset  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0L    ||    end    >    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
340	[BUG]  [BUGGY]  if(length  <  =  0L  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0L  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0L  ||  end  >  buffer[start])  {	  if(start    <    =    0L    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
341	[BUG]  [BUGGY]  if(start  <  0L  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0L  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0L  ||  end  >  buffer[start])  {	  if(start    <    =    0L    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
342	[BUG]  [BUGGY]  if(buffer[start]  ==''  ||  end  >  buffer[start]  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==''  ||  end  >  buffer[start]  ==  '-')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==''  ||  end  >  buffer[start]  ==  '-')  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
343	[BUG]  [BUGGY]  if(buffer[start]  ==''  ||  end  >  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==''  ||  end  >  buffer[start]  ==  '.')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==''  ||  end  >  buffer[start]  ==  '.')  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
344	[BUG]  [BUGGY]  if(buffer[start]  ==''  ||  end  >  buffer[start]  ==  ')')  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==''  ||  end  >  buffer[start]  ==  ')')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==''  ||  end  >  buffer[start]  ==  ')')  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
345	[BUG]  [BUGGY]  if(buffer[start]  ==  'n'  ||  end  >  buffer[start]  ==  'r')  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  'n'  ||  end  >  buffer[start]  ==  'r')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  'n'  ||  end  >  buffer[start]  ==  'r')  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
346	[BUG]  [BUGGY]  if(buffer[start],  end!=  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start],  end!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start],  end!=  0)  {	  if(buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
347	[BUG]  [BUGGY]  if(buffer[start],  end  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start],  end  >=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start],  end  >=  0)  {	  if(buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
348	[BUG]  [BUGGY]  if(buffer.length  <  =  0L  ||  end  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer.length  <  =  0L  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer.length  <  =  0L  ||  end  >  buffer.length)  {	  if(start    <    =    0L    ||    end    >    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
349	[BUG]  [BUGGY]  if(start  <  0L  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0L  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0L  ||  end  >  buffer.length)  {	  if(start    <    =    0L    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
350	[BUG]  [BUGGY]  if(end  <  0  ||  buffer[start]  ==  -1)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  buffer[start]  ==  -1)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  buffer[start]  ==  -1)  {	  if(end    <    0L    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
351	[BUG]  [BUGGY]  if(start  <  0L  ||  end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0L  ||  end]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0L  ||  end]  ==  0)  {	  if(end    <    0L    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
352	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length  -  start);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length  -  start);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  length  -  start);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
353	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
354	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length  +  1);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length  +  1);  end  =  offset  +  length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  length  +  1);  end  =  offset  +  length;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
355	[BUG]  [BUGGY]  if(start  <  0L)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0L)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0L)  {	  if(end    <    0L)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
356	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  start;  [CE]  illegal  start  of  expression  [FE]                              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  end  =  offset  +  length  -  start;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	int  end  =  offset  +  length  -  start;	  int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
357	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  buffer.length;  [CE]  illegal  start  of  expression  [FE]                                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  end  =  offset  +  length  -  buffer.length;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	int  end  =  offset  +  length  -  buffer.length;	  int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
358	[BUG]  [BUGGY]  int  end  =  offset  +  length  +  1;  [CE]  illegal  start  of  expression  [FE]                                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  end  =  offset  +  length  +  1;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	int  end  =  offset  +  length  +  1;	  int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
359	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  start]  ==  0L)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  start]  ==  0L)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  start]  ==  0L)  {	  if(buffer[start]    ==    0L    ||    end    >    buffer[start]    ==    0L)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
360	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[end])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[end])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  >  buffer[end])  {	  if(buffer[start]    ==    0L    ||    end    >    buffer[start]    ==    0L)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
361	[BUG]  [BUGGY]  if(start  <  =  0  ||  start  >  buffer.length  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  start  >  buffer.length  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  start  >  buffer.length  ||  end  >  buffer[start])  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
362	[BUG]  [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  end  >  buffer.length  ||  end  >  buffer[start])  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
363	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
364	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
365	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
366	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
367	[BUG]  [BUGGY]  if(start  <  =  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
368	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer.length  ||  end  >  buffer.length)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
369	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
370	[BUG]  [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  end  >  buffer.length  ||  end  >  buffer.length)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
371	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  start  >  end)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  start  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer.length  ||  start  >  end)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
372	[BUG]  [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length  ||  end  >  offset)  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length  ||  end  >  offset)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  0  ||  end  >  buffer.length  ||  end  >  offset)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
373	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
374	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[offset  +  length)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[offset  +  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >  buffer[offset  +  length)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
375	[BUG]  [BUGGY]  final  int  end  =  offset  +  length  -  start;  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  offset  +  length  -  start;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  offset  +  length  -  start;	  final    int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
376	[BUG]  [BUGGY]  final  int  end  =  offset  +  length  *  2;  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  offset  +  length  *  2;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  offset  +  length  *  2;	  final    int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
377	[BUG]  [BUGGY]  if(end  <  0  ||  buffer[start]  ==  0  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  buffer[start]  ==  0  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  buffer[start]  ==  0  ||  buffer[start]!=  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
378	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >  offset  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >  offset  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >  offset  ||  buffer[start]!=  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
379	[BUG]  [BUGGY]  safeThan  <  End)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  safeThan  <  End)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	safeThan  <  End)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(start    <    end)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
380	[BUG]  [BUGGY]  mutableTo(start,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  mutableTo(start,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	mutableTo(start,  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(start    <    end)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
381	[BUG]  [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	safeThan  <  =  false)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(start    <    end)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
382	[BUG]  [BUGGY]  if(end  <  0L  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0L  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0L  ||  end  >  buffer[start])  {	  if(end    <    =    0L    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
383	[BUG]  [BUGGY]  if(buffer[start]  ==  0  &&  end  >=  offset)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  &&  end  >=  offset)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  &&  end  >=  offset)  {	  if(buffer[start]    ==    0    ||    end    >=    offset)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
384	[BUG]  [BUGGY]  if(end  <  0  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
385	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >  offset  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >  offset  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >  offset  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
386	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  length)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end  >  buffer[offset  +  length)  {	  if(buffer[start]    ==    0L    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
387	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  offset  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  offset  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  offset  ||  end  >  buffer[start])  {	  if(buffer[start]    ==    0    ||    end    <    =    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
388	[BUG]  [BUGGY]  if(start  <  0  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  buffer[start]!=  0)  {	  if(end    <    =    0    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
389	[BUG]  [BUGGY]  if(length  <  =  0  &&  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0  &&  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  =  0  &&  buffer[start]  ==  0)  {	  if(length    <    =    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
390	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
391	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
392	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  buffer.length  >  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  buffer.length  >  length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
393	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
394	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
395	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
396	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
397	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
398	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
399	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  offset  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  type  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  ==  offset  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  ==  offset  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end!=    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
400	[BUG]  [BUGGY]  if(end  <  0  ||  end  >  buffer[start]  ||  length  >  buffer[start])  {  [CE]  illegal  start  of  type  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  end  >  buffer[start]  ||  length  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  end  >  buffer[start]  ||  length  >  buffer[start])  {	  if(end    <    0    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
401	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[offset]  >>  0)  {  [CE]  illegal  start  of  type  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[offset]  >>  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >  buffer[offset]  >>  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
402	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  offset  >  length)  {  [CE]  illegal  start  of  type  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  offset  >  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer.length  ||  offset  >  length)  {	  if(start    <    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
403	[BUG]  [BUGGY]  aughtInvalidByteException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  aughtInvalidByteException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	aughtInvalidByteException( "Length "+length+ "  must  be  at  least  2 ");	  if(start    <    end)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
404	[BUG]  [BUGGY]  while(start  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");  }  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  while(start  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");  }  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	while(start  <  end)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");  }	  if(start    <    end)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
405	[BUG]  [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer[start])  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
406	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer[start]  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer[start]  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer[start]  ||  end  >  buffer[start])  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
407	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[offset  +  length]  >>  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[offset  +  length]  >>  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >  buffer[offset  +  length]  >>  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    length]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
408	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start  +  length]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start  +  length]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  buffer[start  +  length]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    length]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
409	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	int  end  =  offset  +  length  /  BYTE_MASK;	  int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
410	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[start]  ||  buffer[end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[start]  ||  buffer[end]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >  buffer[start]  ||  buffer[end]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
411	[BUG]  [BUGGY]  if(start  <  0  ||  end]  ==  '')  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end]  ==  '')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end]  ==  '')  {	  if(end    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
412	[BUG]  [BUGGY]  if(end  <  =  0  ||  buffer[start]  ==  '.')  {  [CE]  illegal  start  of  type  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  =  0  ||  buffer[start]  ==  '.')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  =  0  ||  buffer[start]  ==  '.')  {	  if(end    <    =    0    ||    buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
413	[BUG]  [BUGGY]  if(end  <  0  ||  start  >=  end  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [CE]  illegal  start  of  type  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >=  end  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >=  end  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
414	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  end)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  end)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
415	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
416	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  end  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  end  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  end  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
417	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  offset  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  offset  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  offset  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
418	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  end)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  end)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
419	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end  ||  length  >  buffer.length)  {	  if(end    <    0    ||    start    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
420	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  2);  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  2);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  +  2);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
421	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end]!=  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end]!=  0)  {	  if(buffer[start]    ==    0    ||    end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
422	[BUG]  [BUGGY]  if(buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  'e'  ||  buffer[start]  ==  'E')  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
423	[BUG]  [BUGGY]  if(buffer[start]  ==  'n'  ||  buffer[start]  ==  't')  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  'n'  ||  buffer[start]  ==  't')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  'n'  ||  buffer[start]  ==  't')  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
424	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  end)  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
425	[BUG]  [BUGGY]  if(buffer[start]  ==  'n'  ||  buffer[start]  ==  'r'  ||  buffer[start]  ==  'n')  {  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  'n'  ||  buffer[start]  ==  'r'  ||  buffer[start]  ==  'n')  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  'n'  ||  buffer[start]  ==  'r'  ||  buffer[start]  ==  'n')  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
426	[BUG]  [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                          ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  '0'  &&  buffer[start]  ==  'a'  &&  buffer[start]  ==  'a'  &&  buffer[start]!=  end)  {	  if(buffer[start]    =='')    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
427	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start]  ==  0  ||  end  >  buffer[start]  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start]  ==  0  ||  end  >  buffer[start]  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  buffer[start]  ==  0  ||  end  >  buffer[start]  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
428	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  start  >  buffer[start]  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  start  >  buffer[start]  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  start  >  buffer[start]  ||  end  >  buffer[start])  {	  if(buffer[start]    ==    0    ||    end    >    buffer[start]    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
429	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer[offset  +  length]  {  0)  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >=  buffer[offset  +  length]  {  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >=  buffer[offset  +  length]  {  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
430	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start  +  end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  buffer[start  +  end]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  buffer[start  +  end]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    >    buffer[offset    +    start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
431	[BUG]  [BUGGY]  if(end  <  =  0  ||  end  >  buffer[start]  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  =  0  ||  end  >  buffer[start]  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  =  0  ||  end  >  buffer[start]  ||  end  >  buffer[start])  {	  if(end    <    =    0    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
432	[BUG]  [BUGGY]  if(end  <  =  0  ||  end  >  buffer[start]  ||  length  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  =  0  ||  end  >  buffer[start]  ||  length  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  =  0  ||  end  >  buffer[start]  ||  length  >  buffer[start])  {	  if(end    <    =    0    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
433	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end]  ==  0)  {	  if(buffer[start]    ==    0L    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
434	[BUG]  [BUGGY]  if(end  <  0L  ||  buffer[start]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0L  ||  buffer[start]!=  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0L  ||  buffer[start]!=  0)  {	  if(end    <    0L    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
435	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer.length  <  0  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer.length  <  0  ||  end  >  buffer.length)  {	  if(end    <    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
436	[BUG]  [BUGGY]  if(end  <  0  ||  end  >  buffer.length  ||  start  >  end)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  end  >  buffer.length  ||  start  >  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  end  >  buffer.length  ||  start  >  end)  {	  if(end    <    0    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
437	[BUG]  [BUGGY]  final  int  end  =  offset  +  length  /  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  offset  +  length  /  BYTE_MASK;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  offset  +  length  /  BYTE_MASK;	  final    int    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
438	[BUG]  [BUGGY]  if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
439	[BUG]  [BUGGY]  if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
440	[BUG]  [BUGGY]  if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
441	[BUG]  [BUGGY]  if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
442	[BUG]  [BUGGY]  if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  end  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
443	[BUG]  [BUGGY]  if(buffer[start]  ==  0L  ||  end]  ==  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0L  ||  end]  ==  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0L  ||  end]  ==  buffer[start])  {	  if(buffer[start]    ==    0L    ||    buffer[start]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
444	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  start  <  =  end)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  start  <  =  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  start  <  =  end)  {	  if(buffer[start]    ==    0    ||    start    <    end)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
445	[BUG]  [BUGGY]  if(end  <  buffer[start]  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  buffer[start]  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  buffer[start]  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
446	[BUG]  [BUGGY]  if(end  <  buffer[start]  ||  buffer[start]  ==  0  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  buffer[start]  ||  buffer[start]  ==  0  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  buffer[start]  ||  buffer[start]  ==  0  ||  end  >  buffer[start])  {	  if(start    <    end    ||    buffer[start]    ==    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
447	[BUG]  [BUGGY]  if(start  <  =  end  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  =  end  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  =  end  ||  buffer[start]  ==  0  ||  buffer[start]  ==  0)  {	  if(start    <    end    ||    buffer[start]    ==    0    ||    buffer[start]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
448	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length  -  1;  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length  -  1;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);  end  =  offset  +  length  -  1;	  System.arraycopy(buffer,    0,    buffer,    start,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
449	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  offset  ||  buffer.length  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  offset  ||  buffer.length  <  =  length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  offset  ||  buffer.length  <  =  length)  {	  if(buffer[start]    ==    0    ||    end    <    =    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
450	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  <  offset  ||  buffer[start]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  <  offset  ||  buffer[start]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  <  offset  ||  buffer[start]  ==  0)  {	  if(buffer[start]    ==    0    ||    end    <    =    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
451	[BUG]  [BUGGY]  if(buffer[start]  ==  0,  end  ||  buffer[end]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0,  end  ||  buffer[end]  ==  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0,  end  ||  buffer[end]  ==  0)  {	  if(buffer[start]    ==    0    ||    buffer[end]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
452	[BUG]  [BUGGY]  if(buffer.length  <  =  0  ||  start  >  end  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer.length  <  =  0  ||  start  >  end  ||  end  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer.length  <  =  0  ||  start  >  end  ||  end  >  buffer.length)  {	  if(end    <    =    0    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
453	[BUG]  [BUGGY]  if(end  <  =  0  ||  start  >  buffer[start]  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  =  0  ||  start  >  buffer[start]  ||  end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  =  0  ||  start  >  buffer[start]  ||  end  >  buffer[start])  {	  if(end    <    =    0    ||    start    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
454	[BUG]  [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[start]  >>  0)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(buffer[start]  ==  0  ||  end  >  buffer[start]  >>  0)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(buffer[start]  ==  0  ||  end  >  buffer[start]  >>  0)  {	  if(buffer[start]    ==    0L    ||    end    >    buffer[start]    ==    0L)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
455	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  0,  length);  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  0,  length);  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
456	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  start  >=  end)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  start  >=  end)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(start  <  0  ||  end  >  buffer.length  ||  start  >=  end)  {	  if(start    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
457	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                      ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  aught(new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	aught(new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
458	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "));  [CE]  illegal  start  of  expression  [FE]                        ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  aught(new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "));  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	aught(new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "));	  if(end    <    =    0)    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
459	[BUG]  [BUGGY]  if(end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  >  buffer[start])  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  >  buffer[start])  {	  if(buffer[start]!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
460	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  -  offset;  [CE]  illegal  start  of  expression  [FE]                                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  end  =  buffer.length()  -  offset;  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	final  int  end  =  buffer.length()  -  offset;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
461	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer[start]  ||  end  >  buffer[start].length)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer[start]  ||  end  >  buffer[start].length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer[start]  ||  end  >  buffer[start].length)  {	  if(end    <    0    ||    start    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
462	[BUG]  [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(end  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(end    <    0L)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
463	[BUG]  [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
464	[BUG]  [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
465	[BUG]  [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
466	[BUG]  [BUGGY]  if(length  <  0  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  ArchiveException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  1  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress35/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	110	110	1	replace	if(length  <  0  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
