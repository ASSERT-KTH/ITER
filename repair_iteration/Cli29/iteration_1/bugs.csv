bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }  [BUGGY]  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	17	None	add
2	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  [BUGGY]  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	17	None	add
3	[BUG]  [BUGGY]    if(str.startsWith( "- "))  {  str.substring(0,  str.length());  if(str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]    if(str.startsWith( "- "))  {  str.substring(0,  str.length());  if(str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [BUGGY]  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	    if(str.startsWith( "- "))  {  str.substring(0,  str.length());  if(str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	17	None	add
4	[BUG]  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [BUGGY]  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	    if(str.startsWith( "- "))  {  if(str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	17	None	add
5	[BUG]  [BUGGY]    if(str.startsWith( "- "))  {  str.substring(0,  str.length());  if(str.startsWith( "- "))  {  return  str.substring(2,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]    if(str.startsWith( "- "))  {  str.substring(0,  str.length());  if(str.startsWith( "- "))  {  return  str.substring(2,  str.length());  }  [BUGGY]  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	    if(str.startsWith( "- "))  {  str.substring(0,  str.length());  if(str.startsWith( "- "))  {  return  str.substring(2,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	17	None	add
11	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    str  =  str.substring(0,  length  -  1);  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	add	    str  =  str.substring(0,  length  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	10	1
12	[BUG]  [BUGGY]    str  =  str.substring(0,  length  -  1);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    str  =  str.substring(0,  length  -  1);  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	    str  =  str.substring(0,  length  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	10	1	add
12	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    str  =  str.substring(0,  length);  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	add	    str  =  str.substring(0,  length);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	10	1
13	[BUG]  [BUGGY]    str  =  str.substring(0,  length);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    str  =  str.substring(0,  length);  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	    str  =  str.substring(0,  length);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	10	1	add
13	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    str  =  str.substring(2,  length);  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	add	    str  =  str.substring(2,  length);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	10	1
14	[BUG]  [BUGGY]    str  =  str.substring(2,  length);  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    str  =  str.substring(2,  length);  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	    str  =  str.substring(2,  length);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	10	1	add
14	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    length  =  str.length()  -  1;  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	add	    length  =  str.length()  -  1;		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	10	1
15	[BUG]  [BUGGY]    length  =  str.length()  -  1;  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    length  =  str.length()  -  1;  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	    length  =  str.length()  -  1;		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	10	1	add
15	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    str  =  str.substring(2,  length  -  1);  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	add	    str  =  str.substring(2,  length  -  1);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	10	1
16	[BUG]  [BUGGY]    str  =  str.substring(2,  length  -  1);  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    str  =  str.substring(2,  length  -  1);  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	    str  =  str.substring(2,  length  -  1);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	10	1	add
21	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    str  =  str.substring(0,  str.length()  -  1);  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	add	    str  =  str.substring(0,  str.length()  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	6	1
22	[BUG]  [BUGGY]    str  =  str.substring(0,  str.length()  -  1);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    str  =  str.substring(0,  str.length()  -  1);  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	    str  =  str.substring(0,  str.length()  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	6	1	add
22	[BUG]  [BUGGY]    if(str.endsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length());  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    if(str.endsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	    if(str.endsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length());  }		non-compiled	[CE]  	6	None	add
23	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    str  =  str.substring(2,  str.length());  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	add	    str  =  str.substring(2,  str.length());		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	6	1
24	[BUG]  [BUGGY]    str  =  str.substring(2,  str.length());  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    str  =  str.substring(2,  str.length());  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	    str  =  str.substring(2,  str.length());		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	6	1	add
24	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    str  =  str.substring(1,  str.length());  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	add	    str  =  str.substring(1,  str.length());		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	6	1
25	[BUG]  [BUGGY]    str  =  str.substring(1,  str.length());  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    str  =  str.substring(1,  str.length());  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	    str  =  str.substring(1,  str.length());		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	6	1	add
25	[BUG]  [BUGGY]    if(str.endsWith( " " "))  {  if(str.endsWith( " " "))  {  str  =  str.substring(1,  str.length());  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    if(str.endsWith( " " "))  {  if(str.endsWith( " " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	    if(str.endsWith( " " "))  {  if(str.endsWith( " " "))  {  str  =  str.substring(1,  str.length());  }		non-compiled	[CE]  	6	None	add
31	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]  return  str.substring(length  -  1);  [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	return  str.substring(length  -  1);	return  str;  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	11	1
32	[BUG]  [BUGGY]  return  str.substring(length  -  1);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]  return  str.substring(length  -  1);  [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	return  str.substring(length  -  1);	return  str;  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	11	1	replace
32	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]  return  str.substring(length  +  1);  [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	return  str.substring(length  +  1);	return  str;  	compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	11	1
33	[BUG]  [BUGGY]  return  str.substring(length  +  1);  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]  return  str.substring(length  +  1);  [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	return  str.substring(length  +  1);	return  str;  	compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	11	1	replace
33	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]  return  str.substring(length  -  1,  str.length());  [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	return  str.substring(length  -  1,  str.length());	return  str;  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	11	1
34	[BUG]  [BUGGY]  return  str.substring(length  -  1,  str.length());  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]  return  str.substring(length  -  1,  str.length());  [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	return  str.substring(length  -  1,  str.length());	return  str;  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	11	1	replace
34	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]  return  str.substring(length  +  1,  str.length());  [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	return  str.substring(length  +  1,  str.length());	return  str;  	compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	11	1
35	[BUG]  [BUGGY]  return  str.substring(length  +  1,  str.length());  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]  return  str.substring(length  +  1,  str.length());  [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	return  str.substring(length  +  1,  str.length());	return  str;  	compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	11	1	replace
35	[BUG]  [BUGGY]    [CE]  missing  return  statement  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	  	return  str;  	non-compiled	[CE]  missing  return  statement	11	None	replace
41	[BUG]  [BUGGY]    String  str  =  stripLeadingHyphens(str.substring(0,  str.length()));  [CE]  variable  str  is  already  defined  in  method  stripLeadingHyphens(String)  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]    String  str  =  stripLeadingHyphens(str.substring(0,  str.length()));  [BUGGY]  if  (str  ==  null)  {  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	    String  str  =  stripLeadingHyphens(str.substring(0,  str.length()));		non-compiled	[CE]  variable  str  is  already  defined  in  method  stripLeadingHyphens(String)	15	None	add
42	[BUG]  [BUGGY]    boolean  null  =  str.startsWith( "-- ")||  str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  [CE]  not  a  statement  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]    boolean  null  =  str.startsWith( "-- ")||  str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  [BUGGY]  if  (str  ==  null)  {  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	    boolean  null  =  str.startsWith( "-- ")||  str.startsWith( "-- "))  {  return  str.substring(0,  str.length());		non-compiled	[CE]  not  a  statement	15	None	add
43	[BUG]  [BUGGY]    String  str  =  stripLeadingHyphens(str);  [CE]  variable  str  is  already  defined  in  method  stripLeadingHyphens(String)  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]    String  str  =  stripLeadingHyphens(str);  [BUGGY]  if  (str  ==  null)  {  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	    String  str  =  stripLeadingHyphens(str);		non-compiled	[CE]  variable  str  is  already  defined  in  method  stripLeadingHyphens(String)	15	None	add
44	[BUG]  [BUGGY]    boolean  null  =  str.startsWith( "-- ")||  str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  [CE]  not  a  statement  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]    boolean  null  =  str.startsWith( "-- ")||  str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  [BUGGY]  if  (str  ==  null)  {  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	    boolean  null  =  str.startsWith( "-- ")||  str.startsWith( "-- "))  {  return  str.substring(1,  str.length());		non-compiled	[CE]  not  a  statement	15	None	add
45	[BUG]  [BUGGY]    boolean  null  =  str.startsWith( "-- ")&&  str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  [CE]  not  a  statement  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]    boolean  null  =  str.startsWith( "-- ")&&  str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  [BUGGY]  if  (str  ==  null)  {  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	    boolean  null  =  str.startsWith( "-- ")&&  str.startsWith( "-- "))  {  return  str.substring(0,  str.length());		non-compiled	[CE]  not  a  statement	15	None	add
51	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }  [BUGGY]  if  (str.startsWith( "-- "))  {  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	19	None	add
52	[BUG]  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }  [BUGGY]  if  (str.startsWith( "-- "))  {  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	replace	    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	19	None	add
53	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }  [BUGGY]  if  (str.startsWith( "-- "))  {  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	19	None	add
54	[BUG]  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }  [BUGGY]  if  (str.startsWith( "-- "))  {  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	replace	    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	19	None	add
55	[BUG]  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  [BUGGY]  if  (str.startsWith( "-- "))  {  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	replace	    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	19	None	add
61	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    str  =  str.substring(0,  length  -  1);  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	add	    str  =  str.substring(0,  length  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	8	1
62	[BUG]  [BUGGY]    str  =  str.substring(0,  length  -  1);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    str  =  str.substring(0,  length  -  1);  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    str  =  str.substring(0,  length  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	8	1	add
62	[BUG]  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length());  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length());  }		non-compiled	[CE]  unclosed  string  literal	8	None	add
63	[BUG]  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  length);  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  length);  }  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  length);  }		non-compiled	[CE]  unclosed  string  literal	8	None	add
64	[BUG]  [BUGGY]    if(length  >  0)  {  if(str.endsWith( " " "))  {  str  =  str.substring(1,  length);  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    if(length  >  0)  {  if(str.endsWith( " " "))  {  str  =  str.substring(1,  length);  }  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    if(length  >  0)  {  if(str.endsWith( " " "))  {  str  =  str.substring(1,  length);  }		non-compiled	[CE]  unclosed  string  literal	8	None	add
65	[BUG]  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length);  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length);  }  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length);  }		non-compiled	[CE]  unclosed  string  literal	8	None	add
71	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  if  (str.startsWith( "-- "))  {  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }  [BUGGY]  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	44	44	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	21	None	add
72	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  if  (str.startsWith( "-- "))  {  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }  [BUGGY]  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	44	44	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	21	None	add
73	[BUG]  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  if  (str.startsWith( "-- "))  {  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }  [BUGGY]  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	44	44	1	replace	    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	21	None	add
74	[BUG]  [BUGGY]    if(str.endsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  if  (str.startsWith( "-- "))  {  [BUGGY]    if(str.endsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }  [BUGGY]  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	44	44	1	replace	    if(str.endsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(1,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	21	None	add
75	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  if  (str.startsWith( "-- "))  {  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  [BUGGY]  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	44	44	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	21	None	add
81	[BUG]  [BUGGY]  if(str.endsWith( " " ")||  str.endsWith( " " "))  {  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]  if(str.endsWith( " " ")||  str.endsWith( " " "))  {  [BUGGY]  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	if(str.endsWith( " " ")||  str.endsWith( " " "))  {	if  (str.endsWith( "\ " "))  {  	non-compiled	[CE]  	7	None	replace
82	[BUG]  [BUGGY]  if(str.endsWith( " " "))  {  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]  if(str.endsWith( " " "))  {  [BUGGY]  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	if(str.endsWith( " " "))  {	if  (str.endsWith( "\ " "))  {  	non-compiled	[CE]  unclosed  string  literal	7	None	replace
83	[BUG]  [BUGGY]  if(length  >  0  &&  str.endsWith( " " "))  {  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]  if(length  >  0  &&  str.endsWith( " " "))  {  [BUGGY]  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	if(length  >  0  &&  str.endsWith( " " "))  {	if  (str.endsWith( "\ " "))  {  	non-compiled	[CE]  unclosed  string  literal	7	None	replace
84	[BUG]  [BUGGY]  if(length  >  0  &&  str.startsWith( " " "))  {  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]  if(length  >  0  &&  str.startsWith( " " "))  {  [BUGGY]  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	if(length  >  0  &&  str.startsWith( " " "))  {	if  (str.endsWith( "\ " "))  {  	non-compiled	[CE]  unclosed  string  literal	7	None	replace
91	[BUG]  [BUGGY]  if(str.startsWith( " " ")||  str.endsWith( " " "))  {  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]  if(str.startsWith( " " ")||  str.endsWith( " " "))  {  [BUGGY]  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	if(str.startsWith( " " ")||  str.endsWith( " " "))  {	if  (str.startsWith( "\ " "))  {  	non-compiled	[CE]  	1	None	replace
92	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]  if(str.startsWith( "u ")||  str.startsWith( "u "))  {  [BUGGY]  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	add	if(str.startsWith( "u ")||  str.startsWith( "u "))  {	if  (str.startsWith( "\ " "))  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	1	1
93	[BUG]  [BUGGY]  if(str.startsWith( "u ")||  str.startsWith( "u "))  {  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]  if(str.startsWith( "u ")||  str.startsWith( "u "))  {  [BUGGY]  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	if(str.startsWith( "u ")||  str.startsWith( "u "))  {	if  (str.startsWith( "\ " "))  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	1	1	replace
93	[BUG]  [BUGGY]  if(str.startsWith( " " "))  {  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]  if(str.startsWith( " " "))  {  [BUGGY]  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	if(str.startsWith( " " "))  {	if  (str.startsWith( "\ " "))  {  	non-compiled	[CE]  unclosed  string  literal	1	None	replace
94	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]  if(str.startsWith( " ")||  str.endsWith( " "))  {  [BUGGY]  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	add	if(str.startsWith( " ")||  str.endsWith( " "))  {	if  (str.startsWith( "\ " "))  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	1	1
95	[BUG]  [BUGGY]  if(str.startsWith( " ")||  str.endsWith( " "))  {  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]  if(str.startsWith( " ")||  str.endsWith( " "))  {  [BUGGY]  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	if(str.startsWith( " ")||  str.endsWith( " "))  {	if  (str.startsWith( "\ " "))  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	1	1	replace
95	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    [BUGGY]  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	  	if  (str.startsWith( "\ " "))  {  	non-compiled	[CE]  illegal  start  of  type	1	None	replace
101	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(1,  str.length()  -  1);  [BUGGY]  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	add	str  =  str.substring(1,  str.length()  -  1);	str  =  str.substring(1,  str.length());  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	3	1
102	[BUG]  [BUGGY]  str  =  str.substring(1,  str.length()  -  1);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(1,  str.length()  -  1);  [BUGGY]  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	str  =  str.substring(1,  str.length()  -  1);	str  =  str.substring(1,  str.length());  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	3	1	replace
102	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(1,  str.length()  -  2);  [BUGGY]  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	add	str  =  str.substring(1,  str.length()  -  2);	str  =  str.substring(1,  str.length());  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	3	1
103	[BUG]  [BUGGY]  str  =  str.substring(1,  str.length()  -  2);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(1,  str.length()  -  2);  [BUGGY]  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	str  =  str.substring(1,  str.length()  -  2);	str  =  str.substring(1,  str.length());  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	3	1	replace
103	[BUG]  [BUGGY]  str  =  str.substring(1,  str.length  -  1);  [CE]  cannot  find  symbol  length  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(1,  str.length  -  1);  [BUGGY]  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	str  =  str.substring(1,  str.length  -  1);	str  =  str.substring(1,  str.length());  	non-compiled	[CE]  cannot  find  symbol  length	3	None	replace
104	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(1,  str.length()  +  1);  [BUGGY]  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	add	str  =  str.substring(1,  str.length()  +  1);	str  =  str.substring(1,  str.length());  	compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	3	1
105	[BUG]  [BUGGY]  str  =  str.substring(1,  str.length()  +  1);  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(1,  str.length()  +  1);  [BUGGY]  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	str  =  str.substring(1,  str.length()  +  1);	str  =  str.substring(1,  str.length());  	compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	3	1	replace
105	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]    [BUGGY]  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	add	  	str  =  str.substring(1,  str.length());  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	3	1
106	[BUG]  [BUGGY]    [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]    [BUGGY]  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	  	str  =  str.substring(1,  str.length());  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	3	1	replace
111	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]  if(str.startsWith( "-- ")||  str.startsWith( "-- "))  {  [BUGGY]  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	add	if(str.startsWith( "-- ")||  str.startsWith( "-- "))  {	if  (str.startsWith( "-- "))  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	18	1
112	[BUG]  [BUGGY]  if(str.startsWith( "-- ")||  str.startsWith( "-- "))  {  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]  if(str.startsWith( "-- ")||  str.startsWith( "-- "))  {  [BUGGY]  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	replace	if(str.startsWith( "-- ")||  str.startsWith( "-- "))  {	if  (str.startsWith( "-- "))  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	18	1	replace
114	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]  if(str.startsWith( "-- ")||  str.startsWith( "+ "))  {  [BUGGY]  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	add	if(str.startsWith( "-- ")||  str.startsWith( "+ "))  {	if  (str.startsWith( "-- "))  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	18	1
115	[BUG]  [BUGGY]  if(str.startsWith( "-- ")||  str.startsWith( "+ "))  {  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]  if(str.startsWith( "-- ")||  str.startsWith( "+ "))  {  [BUGGY]  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	replace	if(str.startsWith( "-- ")||  str.startsWith( "+ "))  {	if  (str.startsWith( "-- "))  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	18	1	replace
121	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length  -  1,  str.length());  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	    str  =  str.substring(length  -  1,  str.length());		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	12	1
122	[BUG]  [BUGGY]    str  =  str.substring(length  -  1,  str.length());  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length  -  1,  str.length());  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	    str  =  str.substring(length  -  1,  str.length());		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	12	1	add
122	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(1,  length);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	    str  =  str.substring(1,  length);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	12	1
123	[BUG]  [BUGGY]    str  =  str.substring(1,  length);  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(1,  length);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	    str  =  str.substring(1,  length);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	12	1	add
123	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length  +  1,  str.length());  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	    str  =  str.substring(length  +  1,  str.length());		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	12	1
124	[BUG]  [BUGGY]    str  =  str.substring(length  +  1,  str.length());  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length  +  1,  str.length());  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	    str  =  str.substring(length  +  1,  str.length());		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	12	1	add
124	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length  -  1);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	    str  =  str.substring(length  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	12	1
125	[BUG]  [BUGGY]    str  =  str.substring(length  -  1);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length  -  1);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	    str  =  str.substring(length  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	12	1	add
125	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(1,  length  -  1);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	    str  =  str.substring(1,  length  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	12	1
126	[BUG]  [BUGGY]    str  =  str.substring(1,  length  -  1);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(1,  length  -  1);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	    str  =  str.substring(1,  length  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	12	1	add
133	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(0,  length  -  2);  [BUGGY]  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	add	str  =  str.substring(0,  length  -  2);	str  =  str.substring(0,  length  -  1);  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	9	1
134	[BUG]  [BUGGY]  str  =  str.substring(0,  length  -  2);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(0,  length  -  2);  [BUGGY]  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	str  =  str.substring(0,  length  -  2);	str  =  str.substring(0,  length  -  1);  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	9	1	replace
134	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(0,  length  +  1);  [BUGGY]  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	add	str  =  str.substring(0,  length  +  1);	str  =  str.substring(0,  length  -  1);  	compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	9	1
135	[BUG]  [BUGGY]  str  =  str.substring(0,  length  +  1);  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(0,  length  +  1);  [BUGGY]  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	str  =  str.substring(0,  length  +  1);	str  =  str.substring(0,  length  -  1);  	compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	9	1	replace
151	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =  str.length()  -  1;  [BUGGY]  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	add	int  length  =  str.length()  -  1;	int  length  =  str.length();  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	5	1
152	[BUG]  [BUGGY]  int  length  =  str.length()  -  1;  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =  str.length()  -  1;  [BUGGY]  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	int  length  =  str.length()  -  1;	int  length  =  str.length();  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	5	1	replace
152	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =  str.length()  -  2;  [BUGGY]  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	add	int  length  =  str.length()  -  2;	int  length  =  str.length();  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	5	1
153	[BUG]  [BUGGY]  int  length  =  str.length()  -  2;  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =  str.length()  -  2;  [BUGGY]  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	int  length  =  str.length()  -  2;	int  length  =  str.length();  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	5	1	replace
153	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =  str.length()  +  1;  [BUGGY]  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	add	int  length  =  str.length()  +  1;	int  length  =  str.length();  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	5	1
154	[BUG]  [BUGGY]  int  length  =  str.length()  +  1;  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =  str.length()  +  1;  [BUGGY]  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	int  length  =  str.length()  +  1;	int  length  =  str.length();  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	5	1	replace
154	[BUG]  [BUGGY]  int  length  =  str.length  -  1;  [CE]  cannot  find  symbol  length  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =  str.length  -  1;  [BUGGY]  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	int  length  =  str.length  -  1;	int  length  =  str.length();  	non-compiled	[CE]  cannot  find  symbol  length	5	None	replace
161	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    str  =  str.substring(0,  str.length()  -  1);  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	add	    str  =  str.substring(0,  str.length()  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	2	1
162	[BUG]  [BUGGY]    str  =  str.substring(0,  str.length()  -  1);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    str  =  str.substring(0,  str.length()  -  1);  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	    str  =  str.substring(0,  str.length()  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	2	1	add
162	[BUG]  [BUGGY]    String  str  =  str.substring(0,  str.length()  -  1);  [CE]  variable  str  is  already  defined  in  method  stripLeadingAndTrailingQuotes(String)  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    String  str  =  str.substring(0,  str.length()  -  1);  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	    String  str  =  str.substring(0,  str.length()  -  1);		non-compiled	[CE]  variable  str  is  already  defined  in  method  stripLeadingAndTrailingQuotes(String)	2	None	add
163	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    str  =  str.substring(str.length()  -  1);  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	add	    str  =  str.substring(str.length()  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	2	1
164	[BUG]  [BUGGY]    str  =  str.substring(str.length()  -  1);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    str  =  str.substring(str.length()  -  1);  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	    str  =  str.substring(str.length()  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	2	1	add
164	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    str  =  str.substring(1,  str.length());  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	add	    str  =  str.substring(1,  str.length());		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	2	1
165	[BUG]  [BUGGY]    str  =  str.substring(1,  str.length());  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    str  =  str.substring(1,  str.length());  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	    str  =  str.substring(1,  str.length());		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	2	1	add
165	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    str  =  str.substring(2,  str.length());  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	add	    str  =  str.substring(2,  str.length());		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	2	1
166	[BUG]  [BUGGY]    str  =  str.substring(2,  str.length());  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    str  =  str.substring(2,  str.length());  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	    str  =  str.substring(2,  str.length());		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	2	1	add
174	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]  if(str  ==  null  ||  str.startsWith( ".- "))  {  [BUGGY]  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	add	if(str  ==  null  ||  str.startsWith( ".- "))  {	if  (str  ==  null)  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	14	1
175	[BUG]  [BUGGY]  if(str  ==  null  ||  str.startsWith( ".- "))  {  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]  if(str  ==  null  ||  str.startsWith( ".- "))  {  [BUGGY]  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	if(str  ==  null  ||  str.startsWith( ".- "))  {	if  (str  ==  null)  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	14	1	replace
182	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]    str  =  str.substring(0,  str.length()  -  1);  [BUGGY]  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	add	    str  =  str.substring(0,  str.length()  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	4	1
183	[BUG]  [BUGGY]    str  =  str.substring(0,  str.length()  -  1);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]    str  =  str.substring(0,  str.length()  -  1);  [BUGGY]  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	    str  =  str.substring(0,  str.length()  -  1);		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	4	1	add
183	[BUG]  [BUGGY]    if(str.endsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length());  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]    if(str.endsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	    if(str.endsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length());  }		non-compiled	[CE]  	4	None	add
184	[BUG]  [BUGGY]    if(str.endsWith( " " "))  {  if(str.endsWith( " " "))  {  str  =  str.substring(1,  str.length());  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]    if(str.endsWith( " " "))  {  if(str.endsWith( " " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	    if(str.endsWith( " " "))  {  if(str.endsWith( " " "))  {  str  =  str.substring(1,  str.length());  }		non-compiled	[CE]  	4	None	add
191	[BUG]  [BUGGY]  return  this;  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]  return  this;  [BUGGY]  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	return  this;	return  null;  	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	16	None	replace
192	[BUG]  [BUGGY]  return  ArrayUtils.stripLeadingHyphens(str);  [CE]  cannot  find  symbol  ArrayUtils  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]  return  ArrayUtils.stripLeadingHyphens(str);  [BUGGY]  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	return  ArrayUtils.stripLeadingHyphens(str);	return  null;  	non-compiled	[CE]  cannot  find  symbol  ArrayUtils	16	None	replace
193	[BUG]  [BUGGY]  return  ArrayUtilities.stripLeadingHyphens(str);  [CE]  cannot  find  symbol  ArrayUtilities  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]  return  ArrayUtilities.stripLeadingHyphens(str);  [BUGGY]  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	return  ArrayUtilities.stripLeadingHyphens(str);	return  null;  	non-compiled	[CE]  cannot  find  symbol  ArrayUtilities	16	None	replace
194	[BUG]  [BUGGY]  return  ArrayUtils.stripLeadingHyphens(str,  0,  str.length());  [CE]  cannot  find  symbol  ArrayUtils  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]  return  ArrayUtils.stripLeadingHyphens(str,  0,  str.length());  [BUGGY]  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	return  ArrayUtils.stripLeadingHyphens(str,  0,  str.length());	return  null;  	non-compiled	[CE]  cannot  find  symbol  ArrayUtils	16	None	replace
3	[BUG]  [BUGGY]  if(str.startsWith( "-- ")||  str.startsWith( "--))  {  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]  if(str.startsWith( "-- ")||  str.startsWith( "--))  {  [BUGGY]  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	replace	if(str.startsWith( "-- ")||  str.startsWith( "--))  {	if  (str.startsWith( "-- "))  {  	non-compiled	[CE]  unclosed  string  literal	18	None	replace
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(0,  str.length());  [BUGGY]  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	add	str  =  str.substring(0,  str.length());	str  =  str.substring(1,  str.length());  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	3	1
23	[BUG]  [BUGGY]  str  =  str.substring(0,  str.length());  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(0,  str.length());  [BUGGY]  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	str  =  str.substring(0,  str.length());	str  =  str.substring(1,  str.length());  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	3	1	replace
23	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(2,  str.length());  [BUGGY]  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	add	str  =  str.substring(2,  str.length());	str  =  str.substring(1,  str.length());  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	3	1
24	[BUG]  [BUGGY]  str  =  str.substring(2,  str.length());  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(2,  str.length());  [BUGGY]  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	str  =  str.substring(2,  str.length());	str  =  str.substring(1,  str.length());  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	3	1	replace
42	[BUG]  [BUGGY]  if(str.endsWith( " " ")||  str.startsWith( " " "))  {  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]  if(str.endsWith( " " ")||  str.startsWith( " " "))  {  [BUGGY]  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	if(str.endsWith( " " ")||  str.startsWith( " " "))  {	if  (str.endsWith( "\ " "))  {  	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  if(str.startsWith( " " ")||  str.endsWith( " " "))  {  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]  if(str.startsWith( " " ")||  str.endsWith( " " "))  {  [BUGGY]  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	if(str.startsWith( " " ")||  str.endsWith( " " "))  {	if  (str.endsWith( "\ " "))  {  	non-compiled	[CE]  	7	None	replace
61	[BUG]  [BUGGY]  if(str  ==  null  ||  stripLeadingHyphens(str))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]  if(str  ==  null  ||  stripLeadingHyphens(str))  {  [BUGGY]  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	if(str  ==  null  ||  stripLeadingHyphens(str))  {	if  (str  ==  null)  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	14	None	replace
62	[BUG]  [BUGGY]  if(str  ==  null  ||  stripLeadingHyphens(str.charAt(0)))  {  [CE]  method  stripLeadingHyphens  in  class  Util  cannot  be  applied  to  given  types;  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]  if(str  ==  null  ||  stripLeadingHyphens(str.charAt(0)))  {  [BUGGY]  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	if(str  ==  null  ||  stripLeadingHyphens(str.charAt(0)))  {	if  (str  ==  null)  {  	non-compiled	[CE]  method  stripLeadingHyphens  in  class  Util  cannot  be  applied  to  given  types;	14	None	replace
63	[BUG]  [BUGGY]  if(str  ==  null  ||  stripLeadingHyphens(str.substring(0,  str.length())))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]  if(str  ==  null  ||  stripLeadingHyphens(str.substring(0,  str.length())))  {  [BUGGY]  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	if(str  ==  null  ||  stripLeadingHyphens(str.substring(0,  str.length())))  {	if  (str  ==  null)  {  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	14	None	replace
82	[BUG]  [BUGGY]  [FE]  StackOverflowError  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    str  =  stripLeadingAndTrailingQuotes(str);  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	add	    str  =  stripLeadingAndTrailingQuotes(str);		compilable	  [FE]  StackOverflowError  testStripLeadingAndTrailingQuotes	2	1
83	[BUG]  [BUGGY]    str  =  stripLeadingAndTrailingQuotes(str);  [FE]  StackOverflowError  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    str  =  stripLeadingAndTrailingQuotes(str);  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	    str  =  stripLeadingAndTrailingQuotes(str);		compilable	  [FE]  StackOverflowError  testStripLeadingAndTrailingQuotes	2	1	add
83	[BUG]  [BUGGY]    String  str  =  stripLeadingAndTrailingQuotes(str);  [CE]  variable  str  is  already  defined  in  method  stripLeadingAndTrailingQuotes(String)  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    String  str  =  stripLeadingAndTrailingQuotes(str);  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	    String  str  =  stripLeadingAndTrailingQuotes(str);		non-compiled	[CE]  variable  str  is  already  defined  in  method  stripLeadingAndTrailingQuotes(String)	2	None	add
84	[BUG]  [BUGGY]    boolean  isLeadingAndTrailingQuotes(str);  [CE]  ';'  expected  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    boolean  isLeadingAndTrailingQuotes(str);  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	    boolean  isLeadingAndTrailingQuotes(str);		non-compiled	[CE]  ';'  expected	2	None	add
85	[BUG]  [BUGGY]    int  length  =  str.length();  [CE]  variable  length  is  already  defined  in  method  stripLeadingAndTrailingQuotes(String)  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    int  length  =  str.length();  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	    int  length  =  str.length();		non-compiled	[CE]  variable  length  is  already  defined  in  method  stripLeadingAndTrailingQuotes(String)	2	None	add
102	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    length  -=  str.length()  -  1;  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	add	    length  -=  str.length()  -  1;		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	10	1
103	[BUG]  [BUGGY]    length  -=  str.length()  -  1;  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    length  -=  str.length()  -  1;  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	    length  -=  str.length()  -  1;		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	10	1	add
103	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    length  =  str.length();  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	add	    length  =  str.length();		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	10	1
104	[BUG]  [BUGGY]    length  =  str.length();  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    length  =  str.length();  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	    length  =  str.length();		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	10	1	add
104	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    length  -=  str.length();  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	add	    length  -=  str.length();		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	10	1
105	[BUG]  [BUGGY]    length  -=  str.length();  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    length  -=  str.length();  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	    length  -=  str.length();		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	10	1	add
105	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    length  =  str.length()  +  1;  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	add	    length  =  str.length()  +  1;		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	10	1
106	[BUG]  [BUGGY]    length  =  str.length()  +  1;  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    length  =  str.length()  +  1;  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	    length  =  str.length()  +  1;		compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	10	1	add
121	[BUG]  [BUGGY]    ArrayUtil.stripLeadingHyphens(str);  [CE]  cannot  find  symbol  ArrayUtil  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]    ArrayUtil.stripLeadingHyphens(str);  [BUGGY]  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	    ArrayUtil.stripLeadingHyphens(str);		non-compiled	[CE]  cannot  find  symbol  ArrayUtil	17	None	add
122	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }  [BUGGY]  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	17	None	add
123	[BUG]  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }  [BUGGY]  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	    if(str.startsWith( "- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	17	None	add
125	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length()  -  1);  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length()  -  1);  }  [BUGGY]  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length()  -  1);  }		non-compiled	[CE]  illegal  start  of  expression	17	None	add
161	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]  if(str  ==  null)  {  [BUGGY]  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	add	if(str  ==  null)  {	if  (str.startsWith( "\ " "))  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	1	1
162	[BUG]  [BUGGY]  if(str  ==  null)  {  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]  if(str  ==  null)  {  [BUGGY]  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	if(str  ==  null)  {	if  (str.startsWith( "\ " "))  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	1	1	replace
162	[BUG]  [BUGGY]  if(str.startsWith( " " ")||  str.startsWith( " " "))  {  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]  if(str.startsWith( " " ")||  str.startsWith( " " "))  {  [BUGGY]  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	if(str.startsWith( " " ")||  str.startsWith( " " "))  {	if  (str.startsWith( "\ " "))  {  	non-compiled	[CE]  	1	None	replace
164	[BUG]  [BUGGY]  if(str.startsWith( "& " "))  {  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]  if(str.startsWith( "& " "))  {  [BUGGY]  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	if(str.startsWith( "& " "))  {	if  (str.startsWith( "\ " "))  {  	non-compiled	[CE]  unclosed  string  literal	1	None	replace
181	[BUG]  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(length  -  1);  if(str.startsWith( " " "))  {  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(length  -  1);  if(str.startsWith( " " "))  {  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(length  -  1);  if(str.startsWith( " " "))  {		non-compiled	[CE]  	8	None	add
182	[BUG]  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(length  -  1);  if(str.startsWith( " " "))  {  return  str;  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(length  -  1);  if(str.startsWith( " " "))  {  return  str;  }  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(length  -  1);  if(str.startsWith( " " "))  {  return  str;  }		non-compiled	[CE]  	8	None	add
183	[BUG]  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  length  =  str.substring(length  -  1);  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  length  =  str.substring(length  -  1);  }  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    if(length  >  0)  {  if(str.startsWith( " " "))  {  length  =  str.substring(length  -  1);  }		non-compiled	[CE]  unclosed  string  literal	8	None	add
184	[BUG]  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  return  str;  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  return  str;  }  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    if(length  >  0)  {  if(str.startsWith( " " "))  {  return  str;  }		non-compiled	[CE]  unclosed  string  literal	8	None	add
185	[BUG]  [BUGGY]  [FE]  StackOverflowError  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    stripLeadingAndTrailingQuotes(str);  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	add	    stripLeadingAndTrailingQuotes(str);		compilable	  [FE]  StackOverflowError  testStripLeadingAndTrailingQuotes	8	1
186	[BUG]  [BUGGY]    stripLeadingAndTrailingQuotes(str);  [FE]  StackOverflowError  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    stripLeadingAndTrailingQuotes(str);  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    stripLeadingAndTrailingQuotes(str);		compilable	  [FE]  StackOverflowError  testStripLeadingAndTrailingQuotes	8	1	add
203	[BUG]  [BUGGY]    ArrayUtil.stripLeadingHyphens(str);  [CE]  cannot  find  symbol  ArrayUtil  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]    ArrayUtil.stripLeadingHyphens(str);  [BUGGY]  if  (str  ==  null)  {  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	    ArrayUtil.stripLeadingHyphens(str);		non-compiled	[CE]  cannot  find  symbol  ArrayUtil	15	None	add
204	[BUG]  [BUGGY]    boolean  isLeadingHyphens(str);  [CE]  ';'  expected  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]    boolean  isLeadingHyphens(str);  [BUGGY]  if  (str  ==  null)  {  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	    boolean  isLeadingHyphens(str);		non-compiled	[CE]  ';'  expected	15	None	add
205	[BUG]  [BUGGY]    String  str  =  str.substring(0,  str.length()  -  1);  [CE]  variable  str  is  already  defined  in  method  stripLeadingHyphens(String)  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]    String  str  =  str.substring(0,  str.length()  -  1);  [BUGGY]  if  (str  ==  null)  {  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	    String  str  =  str.substring(0,  str.length()  -  1);		non-compiled	[CE]  variable  str  is  already  defined  in  method  stripLeadingHyphens(String)	15	None	add
245	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "+ "))  {  return  str.substring(0,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "+ "))  {  return  str.substring(0,  str.length());  }  [BUGGY]  if  (str.startsWith( "-- "))  {  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "+ "))  {  return  str.substring(0,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	19	None	add
263	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =(str.length()  >  0)?  -1  :  str.length();  [BUGGY]  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	add	int  length  =(str.length()  >  0)?  -1  :  str.length();	int  length  =  str.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	5	1
264	[BUG]  [BUGGY]  int  length  =(str.length()  >  0)?  -1  :  str.length();  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =(str.length()  >  0)?  -1  :  str.length();  [BUGGY]  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	int  length  =(str.length()  >  0)?  -1  :  str.length();	int  length  =  str.length();  	compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	5	1	replace
264	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =(str.length()  >  0)?  1  :  str.length();  [BUGGY]  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	add	int  length  =(str.length()  >  0)?  1  :  str.length();	int  length  =  str.length();  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	5	1
265	[BUG]  [BUGGY]  int  length  =(str.length()  >  0)?  1  :  str.length();  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =(str.length()  >  0)?  1  :  str.length();  [BUGGY]  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	int  length  =(str.length()  >  0)?  1  :  str.length();	int  length  =  str.length();  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	5	1	replace
282	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length  +  1);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	    str  =  str.substring(length  +  1);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	12	1
283	[BUG]  [BUGGY]    str  =  str.substring(length  +  1);  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length  +  1);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	    str  =  str.substring(length  +  1);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	12	1	add
284	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	    str  =  str.substring(length);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	12	1
285	[BUG]  [BUGGY]    str  =  str.substring(length);  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	    str  =  str.substring(length);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	12	1	add
285	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length  +  1,  str.length()  -  1);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	    str  =  str.substring(length  +  1,  str.length()  -  1);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	12	1
286	[BUG]  [BUGGY]    str  =  str.substring(length  +  1,  str.length()  -  1);  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length  +  1,  str.length()  -  1);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	    str  =  str.substring(length  +  1,  str.length()  -  1);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	12	1	add
302	[BUG]  [BUGGY]    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  return  str;  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  return  str;  }  [BUGGY]  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  return  str;  }		non-compiled	[CE]  	4	None	add
303	[BUG]  [BUGGY]    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }  [BUGGY]  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }		non-compiled	[CE]  	4	None	add
304	[BUG]  [BUGGY]    if(str.startsWith( " "))  {  if(str.startsWith( " " "))  {  return  str;  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]    if(str.startsWith( " "))  {  if(str.startsWith( " " "))  {  return  str;  }  [BUGGY]  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	    if(str.startsWith( " "))  {  if(str.startsWith( " " "))  {  return  str;  }		non-compiled	[CE]  unclosed  string  literal	4	None	add
305	[BUG]  [BUGGY]    if(str.startsWith( " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]    if(str.startsWith( " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }  [BUGGY]  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	    if(str.startsWith( " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }		non-compiled	[CE]  unclosed  string  literal	4	None	add
322	[BUG]  [BUGGY]    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length());  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length());  }		non-compiled	[CE]  	6	None	add
323	[BUG]  [BUGGY]    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }		non-compiled	[CE]  	6	None	add
324	[BUG]  [BUGGY]    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length()  -  1);  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length()  -  1);  }  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  str  =  str.substring(1,  str.length()  -  1);  }		non-compiled	[CE]  	6	None	add
325	[BUG]  [BUGGY]    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  return  str;  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  return  str;  }  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	    if(str.startsWith( " " "))  {  if(str.startsWith( " " "))  {  return  str;  }		non-compiled	[CE]  	6	None	add
343	[BUG]  [BUGGY]    return  str.substring(0,  str.length()  -  1);  [CE]  unreachable  statement  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  if  (str.startsWith( "-- "))  {  [BUGGY]    return  str.substring(0,  str.length()  -  1);  [BUGGY]  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	44	44	1	replace	    return  str.substring(0,  str.length()  -  1);		non-compiled	[CE]  unreachable  statement	21	None	add
345	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(3,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  if  (str.startsWith( "-- "))  {  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(3,  str.length());  }  [BUGGY]  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	44	44	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(3,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	21	None	add
383	[BUG]  [BUGGY]  return  ArrayUtil.unwrapAndThrowAsHyphens(str);  [CE]  cannot  find  symbol  ArrayUtil  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]  return  ArrayUtil.unwrapAndThrowAsHyphens(str);  [BUGGY]  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	return  ArrayUtil.unwrapAndThrowAsHyphens(str);	return  null;  	non-compiled	[CE]  cannot  find  symbol  ArrayUtil	16	None	replace
384	[BUG]  [BUGGY]  return  ArrayUtil.EMPTY_STRING_ARRAY;  [CE]  cannot  find  symbol  ArrayUtil  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]  return  ArrayUtil.EMPTY_STRING_ARRAY;  [BUGGY]  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	return  ArrayUtil.EMPTY_STRING_ARRAY;	return  null;  	non-compiled	[CE]  cannot  find  symbol  ArrayUtil	16	None	replace
1	[BUG]  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(length  -  1);  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(length  -  1);  }  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(length  -  1);  }		non-compiled	[CE]  unclosed  string  literal	8	None	add
3	[BUG]  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  length  =  str.length();  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  length  =  str.length();  }  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    if(length  >  0)  {  if(str.startsWith( " " "))  {  length  =  str.length();  }		non-compiled	[CE]  unclosed  string  literal	8	None	add
4	[BUG]  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(length  +  1);  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(length  +  1);  }  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    if(length  >  0)  {  if(str.startsWith( " " "))  {  str  =  str.substring(length  +  1);  }		non-compiled	[CE]  unclosed  string  literal	8	None	add
5	[BUG]  [BUGGY]    if(length  >  0)  {  String  stripLeadingAndTrailingQuotes(str);  if(str.startsWith( " " "))  {  str  =  str.substring(length  -  1);  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]    if(length  >  0)  {  String  stripLeadingAndTrailingQuotes(str);  if(str.startsWith( " " "))  {  str  =  str.substring(length  -  1);  }  [BUGGY]  if  (str.endsWith( "\ " "))  {  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	    if(length  >  0)  {  String  stripLeadingAndTrailingQuotes(str);  if(str.startsWith( " " "))  {  str  =  str.substring(length  -  1);  }		non-compiled	[CE]  	8	None	add
33	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)  {  [BUGGY]  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	add	if(str  ==  null  ||  str.length()  ==  0)  {	if  (str  ==  null)  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	14	1
34	[BUG]  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)  {  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]  if(str  ==  null  ||  str.length()  ==  0)  {  [BUGGY]  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	if(str  ==  null  ||  str.length()  ==  0)  {	if  (str  ==  null)  {  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	14	1	replace
93	[BUG]  [BUGGY]  return  ArrayUtil.stripLeadingHyphens(str);  [CE]  cannot  find  symbol  ArrayUtil  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]  return  ArrayUtil.stripLeadingHyphens(str);  [BUGGY]  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	return  ArrayUtil.stripLeadingHyphens(str);	return  null;  	non-compiled	[CE]  cannot  find  symbol  ArrayUtil	16	None	replace
94	[BUG]  [BUGGY]  return  ArrayUtilities.EMPTY_STRING_ARRAY;  [CE]  cannot  find  symbol  ArrayUtilities  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]  return  ArrayUtilities.EMPTY_STRING_ARRAY;  [BUGGY]  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	return  ArrayUtilities.EMPTY_STRING_ARRAY;	return  null;  	non-compiled	[CE]  cannot  find  symbol  ArrayUtilities	16	None	replace
125	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length  +  1,  length  -  1);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	    str  =  str.substring(length  +  1,  length  -  1);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	12	1
126	[BUG]  [BUGGY]    str  =  str.substring(length  +  1,  length  -  1);  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]    str  =  str.substring(length  +  1,  length  -  1);  [BUGGY]  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	    str  =  str.substring(length  +  1,  length  -  1);		compilable	  [FE]  StringIndexOutOfBoundsException  testStripLeadingAndTrailingQuotes	12	1	add
152	[BUG]  [BUGGY]    if(str  ==  null)  {  if(str.startsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    if(str  ==  null)  {  if(str.startsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	    if(str  ==  null)  {  if(str.startsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }		non-compiled	[CE]  unclosed  string  literal	2	None	add
154	[BUG]  [BUGGY]    if(str  ==  null)  {  if(str.startsWith( " " "))  {  return  str;  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    if(str  ==  null)  {  if(str.startsWith( " " "))  {  return  str;  }  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	    if(str  ==  null)  {  if(str.startsWith( " " "))  {  return  str;  }		non-compiled	[CE]  unclosed  string  literal	2	None	add
155	[BUG]  [BUGGY]    if(str  ==  null)  {  if(str.length()  >  0)  {  str  =  str.substring(0,  str.length()  -  1);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]    if(str  ==  null)  {  if(str.length()  >  0)  {  str  =  str.substring(0,  str.length()  -  1);  }  [BUGGY]  if  (str.startsWith( "\ " "))  {  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	    if(str  ==  null)  {  if(str.length()  >  0)  {  str  =  str.substring(0,  str.length()  -  1);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
182	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]  return(str  ==  null)?  null  :  str;  [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	return(str  ==  null)?  null  :  str;	return  str;  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	11	1
183	[BUG]  [BUGGY]  return(str  ==  null)?  null  :  str;  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]  return(str  ==  null)?  null  :  str;  [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	return(str  ==  null)?  null  :  str;	return  str;  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	11	1	replace
183	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]  return(str  ==  null?  null  :  str.substring(length  -  1));  [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	add	return(str  ==  null?  null  :  str.substring(length  -  1));	return  str;  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	11	1
184	[BUG]  [BUGGY]  return(str  ==  null?  null  :  str.substring(length  -  1));  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]  return(str  ==  null?  null  :  str.substring(length  -  1));  [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	return(str  ==  null?  null  :  str.substring(length  -  1));	return  str;  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	11	1	replace
184	[BUG]  [BUGGY]  return(str  ==  null?  null  :  str.substring(length  -  1), " " ");  [CE]  [CONTEXT]  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  [BUGGY]  return(str  ==  null?  null  :  str.substring(length  -  1), " " ");  [BUGGY]  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	75	75	1	replace	return(str  ==  null?  null  :  str.substring(length  -  1), " " ");	return  str;  	non-compiled	[CE]  	11	None	replace
242	[BUG]  [BUGGY]  if(str.startsWith( " " "))  {  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]  if(str.startsWith( " " "))  {  [BUGGY]  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	if(str.startsWith( " " "))  {	if  (str.endsWith( "\ " "))  {  	non-compiled	[CE]  unclosed  string  literal	7	None	replace
244	[BUG]  [BUGGY]  if(str.endsWith( " " ")||  str.startsWith( " "Q "))  {  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  [BUGGY]  if(str.endsWith( " " ")||  str.startsWith( " "Q "))  {  [BUGGY]  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	70	71	1	replace	if(str.endsWith( " " ")||  str.startsWith( " "Q "))  {	if  (str.endsWith( "\ " "))  {  	non-compiled	[CE]  	7	None	replace
274	[BUG]  [BUGGY]  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(3,  length  -  1);  [BUGGY]  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	add	str  =  str.substring(3,  length  -  1);	str  =  str.substring(0,  length  -  1);  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	9	1
275	[BUG]  [BUGGY]  str  =  str.substring(3,  length  -  1);  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]  str  =  str.substring(3,  length  -  1);  [BUGGY]  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	str  =  str.substring(3,  length  -  1);	str  =  str.substring(0,  length  -  1);  	compilable	  [FE]  ComparisonFailure  testStripLeadingAndTrailingQuotes	9	1	replace
301	[BUG]  [BUGGY]    if(str.length()  ==  0)  {  if(str.startsWith( "- "))  {  return  str.substring(0,  str.length()  -  1);  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]    if(str.length()  ==  0)  {  if(str.startsWith( "- "))  {  return  str.substring(0,  str.length()  -  1);  }  [BUGGY]  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	    if(str.length()  ==  0)  {  if(str.startsWith( "- "))  {  return  str.substring(0,  str.length()  -  1);  }		non-compiled	[CE]  illegal  start  of  expression	17	None	add
304	[BUG]  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "- "))  {  return  str.substring(2,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]    if(str.startsWith( "- "))  {  if(str.startsWith( "- "))  {  return  str.substring(2,  str.length());  }  [BUGGY]  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	    if(str.startsWith( "- "))  {  if(str.startsWith( "- "))  {  return  str.substring(2,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	17	None	add
305	[BUG]  [BUGGY]    if(str.length()  ==  0)  {  if(str.startsWith( "- "))  {  return  str.substring(2,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  [BUGGY]    if(str.length()  ==  0)  {  if(str.startsWith( "- "))  {  return  str.substring(2,  str.length());  }  [BUGGY]  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	40	40	1	replace	    if(str.length()  ==  0)  {  if(str.startsWith( "- "))  {  return  str.substring(2,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	17	None	add
361	[BUG]  [BUGGY]    if(str.endsWith( " " "))  {  if(str.startsWith( " "+ "))  {  return  str;  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]    if(str.endsWith( " " "))  {  if(str.startsWith( " "+ "))  {  return  str;  }  [BUGGY]  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	    if(str.endsWith( " " "))  {  if(str.startsWith( " "+ "))  {  return  str;  }		non-compiled	[CE]  	4	None	add
363	[BUG]  [BUGGY]    if(str.endsWith( " " "))  {  if(str.startsWith( " "= "))  {  return  str;  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]    if(str.endsWith( " " "))  {  if(str.startsWith( " "= "))  {  return  str;  }  [BUGGY]  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	    if(str.endsWith( " " "))  {  if(str.startsWith( " "= "))  {  return  str;  }		non-compiled	[CE]  	4	None	add
365	[BUG]  [BUGGY]    if(str.endsWith( " " "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  [BUGGY]    if(str.endsWith( " " "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	67	67	1	replace	    if(str.endsWith( " " "))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  	4	None	add
392	[BUG]  [BUGGY]    String  str  =  stripLeadingHyphens(getEmptyString());  [CE]  variable  str  is  already  defined  in  method  stripLeadingHyphens(String)  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]    String  str  =  stripLeadingHyphens(getEmptyString());  [BUGGY]  if  (str  ==  null)  {  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	    String  str  =  stripLeadingHyphens(getEmptyString());		non-compiled	[CE]  variable  str  is  already  defined  in  method  stripLeadingHyphens(String)	15	None	add
393	[BUG]  [BUGGY]    String  str  =  stripLeadingHyphens(getWholeString());  [CE]  variable  str  is  already  defined  in  method  stripLeadingHyphens(String)  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]    String  str  =  stripLeadingHyphens(getWholeString());  [BUGGY]  if  (str  ==  null)  {  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	    String  str  =  stripLeadingHyphens(getWholeString());		non-compiled	[CE]  variable  str  is  already  defined  in  method  stripLeadingHyphens(String)	15	None	add
394	[BUG]  [BUGGY]    String  str  =  stripLeadingHyphens(getScope(),  str);  [CE]  variable  str  is  already  defined  in  method  stripLeadingHyphens(String)  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]    String  str  =  stripLeadingHyphens(getScope(),  str);  [BUGGY]  if  (str  ==  null)  {  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	    String  str  =  stripLeadingHyphens(getScope(),  str);		non-compiled	[CE]  variable  str  is  already  defined  in  method  stripLeadingHyphens(String)	15	None	add
395	[BUG]  [BUGGY]    Validate.notNull(str);  [CE]  cannot  find  symbol  Validate  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  [BUGGY]    Validate.notNull(str);  [BUGGY]  if  (str  ==  null)  {  {  return  null;  }  if  (str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	38	39	1	replace	    Validate.notNull(str);		non-compiled	[CE]  cannot  find  symbol  Validate	15	None	add
422	[BUG]  [BUGGY]  if(str  ==  null  ||  str.startsWith( " " "))  {  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]  if(str  ==  null  ||  str.startsWith( " " "))  {  [BUGGY]  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	if(str  ==  null  ||  str.startsWith( " " "))  {	if  (str.startsWith( "\ " "))  {  	non-compiled	[CE]  unclosed  string  literal	1	None	replace
423	[BUG]  [BUGGY]  if(str.startsWith( " " ")||  str.startsWith( " "Zero "))  {  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  [BUGGY]  if(str.startsWith( " " ")||  str.startsWith( " "Zero "))  {  [BUGGY]  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	65	66	1	replace	if(str.startsWith( " " ")||  str.startsWith( " "Zero "))  {	if  (str.startsWith( "\ " "))  {  	non-compiled	[CE]  	1	None	replace
452	[BUG]  [BUGGY]    if(str.startsWith( " " "))  {  if(str.endsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    if(str.startsWith( " " "))  {  if(str.endsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	    if(str.startsWith( " " "))  {  if(str.endsWith( " " "))  {  str  =  str.substring(0,  str.length()  -  1);  }		non-compiled	[CE]  	6	None	add
453	[BUG]  [BUGGY]    if(str.endsWith( " " "))  {  if(str.startsWith( " "+ "))  {  str  =  str.substring(0,  str.length()  -  1);  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    if(str.endsWith( " " "))  {  if(str.startsWith( " "+ "))  {  str  =  str.substring(0,  str.length()  -  1);  }  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	    if(str.endsWith( " " "))  {  if(str.startsWith( " "+ "))  {  str  =  str.substring(0,  str.length()  -  1);  }		non-compiled	[CE]  	6	None	add
454	[BUG]  [BUGGY]    if(str.startsWith( " " "))  {  if(str.endsWith( " "-1))  {  str  =  str.substring(0,  str.length()  -  1);  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    if(str.startsWith( " " "))  {  if(str.endsWith( " "-1))  {  str  =  str.substring(0,  str.length()  -  1);  }  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	    if(str.startsWith( " " "))  {  if(str.endsWith( " "-1))  {  str  =  str.substring(0,  str.length()  -  1);  }		non-compiled	[CE]  	6	None	add
455	[BUG]  [BUGGY]    if(str.startsWith( " " "))  {  if(str.endsWith( " " "))  {  str  =  str.substring(1,  str.length()  -  1);  }  [CE]  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  [BUGGY]    if(str.startsWith( " " "))  {  if(str.endsWith( " " "))  {  str  =  str.substring(1,  str.length()  -  1);  }  [BUGGY]  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	69	69	1	replace	    if(str.startsWith( " " "))  {  if(str.endsWith( " " "))  {  str  =  str.substring(1,  str.length()  -  1);  }		non-compiled	[CE]  	6	None	add
481	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length()  -  1);  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length()  -  1);  }  [BUGGY]  if  (str.startsWith( "-- "))  {  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(0,  str.length()  -  1);  }		non-compiled	[CE]  illegal  start  of  expression	19	None	add
484	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }  [BUGGY]  if  (str.startsWith( "-- "))  {  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(2,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	19	None	add
485	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(3,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(3,  str.length());  }  [BUGGY]  if  (str.startsWith( "-- "))  {  {  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	42	43	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "-- "))  {  return  str.substring(3,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	19	None	add
543	[BUG]  [BUGGY]    if(length  >  0)  {  length  =  str.length();  if(str.endsWith( " " "))  {  length  =  length  -  1;  }  [CE]  unclosed  string  literal  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    if(length  >  0)  {  length  =  str.length();  if(str.endsWith( " " "))  {  length  =  length  -  1;  }  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	    if(length  >  0)  {  length  =  str.length();  if(str.endsWith( " " "))  {  length  =  length  -  1;  }		non-compiled	[CE]  unclosed  string  literal	10	None	add
544	[BUG]  [BUGGY]    if(length  >  0)  {  length  =  str.length();  if(length  >  0)  {  length  =  length  -  1;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    if(length  >  0)  {  length  =  str.length();  if(length  >  0)  {  length  =  length  -  1;  }  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	    if(length  >  0)  {  length  =  str.length();  if(length  >  0)  {  length  =  length  -  1;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	add
545	[BUG]  [BUGGY]    length  -  1  =  str.length();  [CE]  unexpected  type  [CONTEXT]  static  String  stripLeadingAndTrailingQuotes(String  str)  {  if  (str.startsWith( "\ " "))  {  str  =  str.substring(1,  str.length());  }  int  length  =  str.length();  if  (str.endsWith( "\ " "))  {  [BUGGY]    length  -  1  =  str.length();  [BUGGY]  str  =  str.substring(0,  length  -  1);  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingAndTrailingQuotes  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  int  length  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	1.0	72	72	1	replace	    length  -  1  =  str.length();		non-compiled	[CE]  unexpected  type	10	None	add
575	[BUG]  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "+ "))  {  return  str.substring(1,  str.length());  }  [CE]  illegal  start  of  expression  [CONTEXT]  static  String  stripLeadingHyphens(String  str)  {  if  (str  ==  null)  {  return  null;  }  if  (str.startsWith( "-- "))  {  [BUGGY]    if(str.startsWith( "-- "))  {  if(str.startsWith( "+ "))  {  return  str.substring(1,  str.length());  }  [BUGGY]  return  str.substring(2,  str.length());  }  else  if  (str.startsWith( "- "))  {  return  str.substring(1,  str.length());  }  return  str;  }  [CLASS]  Util  [METHOD]  stripLeadingHyphens  [RETURN_TYPE]  String  String  str  [VARIABLES]  boolean  String  str  	projects/Cli29/src/java/org/apache/commons/cli/Util.java	0.0	44	44	1	replace	    if(str.startsWith( "-- "))  {  if(str.startsWith( "+ "))  {  return  str.substring(1,  str.length());  }		non-compiled	[CE]  illegal  start  of  expression	21	None	add
