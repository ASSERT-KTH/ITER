bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  catch(Exception  t)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]        RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Exception  t)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Exception  t)  {	  }    catch(Throwable    t)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	1	None	replace
2	[BUG]  [BUGGY]  }  catch(NodeNotFoundException  t)  {  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(NodeNotFoundException  t)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NodeNotFoundException  t)  {	  }    catch(Throwable    t)    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
3	[BUG]  [BUGGY]  }  catch(RuntimeException  t)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]            RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(RuntimeException  t)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(RuntimeException  t)  {	  }    catch(Throwable    t)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	1	None	replace
4	[BUG]  [BUGGY]  }  catch(IOException  t)  {  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(IOException  t)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(IOException  t)  {	  }    catch(Throwable    t)    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
5	[BUG]  [BUGGY]  }  catch(Throwable  exception)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  exception)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  exception)  {	  }    catch(Throwable    t)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	1	None	replace
6	[BUG]  [BUGGY]  }  catch(Throwable  ex)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                  RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  ex)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  ex)  {	  }    catch(Throwable    t)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	1	None	replace
7	[BUG]  [BUGGY]  }  catch(Exception  e)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                  RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Exception  e)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Exception  e)  {	  }    catch(Throwable    e)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	6	None	replace
8	[BUG]  [BUGGY]  }  catch(NodeNotFoundException  e)  {  [CE]  cannot  find  symbol  [FE]                    RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(NodeNotFoundException  e)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NodeNotFoundException  e)  {	  }    catch(Throwable    e)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
9	[BUG]  [BUGGY]  }  catch(RuntimeException  e)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                      RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(RuntimeException  e)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(RuntimeException  e)  {	  }    catch(Throwable    e)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	6	None	replace
10	[BUG]  [BUGGY]  }  catch(Throwable  e,  MISSING_SOURCE)  {  [CE]  [FE]                        RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  e,  MISSING_SOURCE)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  e,  MISSING_SOURCE)  {	  }    catch(Throwable    e)    {    	non-compiled	[CE]  	6	None	replace
11	[BUG]  [BUGGY]  }  catch(ThrowsException  e)  {  [CE]  cannot  find  symbol  [FE]                          RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(ThrowsException  e)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(ThrowsException  e)  {	  }    catch(Throwable    e)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
12	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId  instanceof  RuntimeException)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException)  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
13	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnexpectedException)  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
14	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
15	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName.length()  >  0)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName.length()  >  0)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName.length()  >  0)  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
16	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalArgumentException)  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
17	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
18	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException)  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
19	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]              RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.NAME)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.NAME)  {	  }    else    if(inputId    ==    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
20	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.FUNCTION)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.FUNCTION)  {	  }    else    if(inputId    ==    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
21	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.NAME)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.NAME)  {	  }    else    if(inputId    ==    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
22	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.FUNCTION)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.FUNCTION)  {	  }    else    if(inputId    ==    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
23	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals( " "))  {  [CE]  [FE]                      RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals( " "))  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.equals( " "))  {	  }    else    if(inputId    ==    null)    {    	non-compiled	[CE]  	4	None	replace
24	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]            RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.CATCH)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.CATCH)  {	  }    else    if(inputId!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	3	None	replace
25	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  Context.reportCodeChange();  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.reportCodeChange();	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
26	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  NodeUtil.copyCurrentScope(curNode,  inputId);  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  inputId);	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
27	[BUG]  [BUGGY]  traverseBranch(root,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  traverseBranch(root,  null);  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	traverseBranch(root,  null);	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
28	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  NodeUtil.copyCurrentScope(curNode);  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode);	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
29	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  cb);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  NodeUtil.copyCurrentScope(curNode,  cb);  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  cb);	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
30	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  nodeTypes);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  NodeUtil.copyCurrentScope(curNode,  nodeTypes);  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  nodeTypes);	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
31	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  parent);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  NodeUtil.copyCurrentScope(curNode,  parent);  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  parent);	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
32	[BUG]  [BUGGY]  }  catch(Throwable  throws  Exception)  {  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  throws  Exception)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  Exception)  {	  }    catch(Throwable    throws    unexpectedException)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
33	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnexpectedException)  {  [CE]  <identifier>  expected  [FE]          RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  throws  UnexpectedException)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnexpectedException)  {	  }    catch(Throwable    throws    unexpectedException)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
34	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnexpectedException(inputId))  {  [CE]  <identifier>  expected  [FE]            RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  throws  UnexpectedException(inputId))  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnexpectedException(inputId))  {	  }    catch(Throwable    throws    unexpectedException)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnsupportedOperationException)  {  [CE]  <identifier>  expected  [FE]              RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  throws  UnsupportedOperationException)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnsupportedOperationException)  {	  }    catch(Throwable    throws    unexpectedException)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
36	[BUG]  [BUGGY]  }  catch(Throwable  throws  IOException)  {  [CE]  <identifier>  expected  [FE]                RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  throws  IOException)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  IOException)  {	  }    catch(Throwable    throws    unexpectedException)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
37	[BUG]  [BUGGY]  }  catch(Throwable  cause)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                  RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  cause)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  cause)  {	  }    catch(Throwable    throws    unexpectedException)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	8	None	replace
38	[BUG]  [BUGGY]  }  catch(Throwable  msg)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]          RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  msg)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  msg)  {	  }    catch(Throwable    unexpectedException)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	2	None	replace
39	[BUG]  [BUGGY]  }  catch(NodeNotFoundException  nfe)  {  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(NodeNotFoundException  nfe)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NodeNotFoundException  nfe)  {	  }    catch(Throwable    unexpectedException)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
40	[BUG]  [BUGGY]  }  catch(Throwable  msg,  unexpectedException)  {  [CE]  [FE]              RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  msg,  unexpectedException)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  msg,  unexpectedException)  {	  }    catch(Throwable    unexpectedException)    {    	non-compiled	[CE]  	2	None	replace
41	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnexpectedException  e)  {  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  throws  UnexpectedException  e)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnexpectedException  e)  {	  }    catch(Throwable    throws    unexpectedException)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
42	[BUG]  [BUGGY]  }  catch(Throwable  ignored)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]          RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  ignored)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  ignored)  {	  }    catch(Throwable    throws    unexpectedException)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	8	None	replace
43	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStateException)  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
44	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(root))  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
45	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isLiteralValue(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isLiteralValue(root))  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isLiteralValue(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
46	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isExpressionNode(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isExpressionNode(curNode))  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isExpressionNode(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
47	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
48	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName!=  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName!=  null)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName!=  null)  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
49	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals(null))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]              RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals(null))  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.equals(null))  {	  }    else    if(inputId    ==    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
50	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.GETPROP)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.GETPROP)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.GETPROP)  {	  }    else    if(inputId    ==    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  nodeTypes);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  nodeTypes);  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  nodeTypes);	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  this);	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( " "));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( " "));  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  new  RuntimeException( " "));	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
54	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  NodeUtil.copyCurrentScope(curNode,  curNode);  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  curNode);	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  scopeCreator);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  scopeCreator);  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  scopeCreator);	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
56	[BUG]  [BUGGY]  }  catch(Throwable  e,  INVALID_SOURCE)  {  [CE]  [FE]                  RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  e,  INVALID_SOURCE)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  e,  INVALID_SOURCE)  {	  }    catch(Throwable    e)    {    	non-compiled	[CE]  	6	None	replace
57	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.equals(null))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]            RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId!=  null  ||  inputId.equals(null))  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.equals(null))  {	  }    else    if(inputId!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	3	None	replace
58	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.GETPROP)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]              RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.GETPROP)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.GETPROP)  {	  }    else    if(inputId!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	3	None	replace
59	[BUG]  [BUGGY]  }  catch(ThrowsException  t)  {  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(ThrowsException  t)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(ThrowsException  t)  {	  }    catch(Throwable    t)    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
60	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]              RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.NAME)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.NAME)  {	  }    else    if(inputId    ==    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
61	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.hasChildren())  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.hasChildren())  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.hasChildren())  {	  }    else    if(inputId    ==    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
62	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.CATCH)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.CATCH)  {	  }    else    if(inputId    ==    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
63	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.VAR)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.VAR)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.VAR)  {	  }    else    if(inputId    ==    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	4	None	replace
64	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString()))  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
65	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(curNode))  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	5	None	replace
66	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  NodeUtil.copyCurrentStructure(curNode);  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentStructure(curNode);	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
67	[BUG]  [BUGGY]  Context.codeBug();  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  Context.codeBug();  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.codeBug();	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
68	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  Node  parent  =  curNode.getParent();  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
69	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(parent,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(parent,  null);  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();  traverseBranch(parent,  null);	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
70	[BUG]  [BUGGY]  cb.reset();  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  cb.reset();  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.reset();	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
71	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  cb.removeChild(parent);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  Node  parent  =  curNode.getParent();  cb.removeChild(parent);  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();  cb.removeChild(parent);	      	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	7	None	replace
72	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( " "))  {  [CE]  [FE]            RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( " "))  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.equals( " "))  {	  }    else    if(inputId!=    null)    {    	non-compiled	[CE]  	3	None	replace
73	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]              RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.FUNCTION)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.FUNCTION)  {	  }    else    if(inputId!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	3	None	replace
74	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.EXPR_RESULT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.EXPR_RESULT)  {	  }    else    if(inputId!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	3	None	replace
75	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME)  {	  }    else    if(inputId!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	3	None	replace
76	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.SCRIPT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.SCRIPT)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.SCRIPT)  {	  }    else    if(inputId!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	3	None	replace
77	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.VAR)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.VAR)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.VAR)  {	  }    else    if(inputId!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	3	None	replace
78	[BUG]  [BUGGY]  }  catch(Throwable  throwable)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]          RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  throwable)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throwable)  {	  }    catch(Throwable    unexpectedException)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	2	None	replace
79	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnsupportedOperationException  e)  {  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  throws  UnsupportedOperationException  e)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnsupportedOperationException  e)  {	  }    catch(Throwable    throws    unexpectedException)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
80	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnexpectedException  cb)  {  [CE]  <identifier>  expected  [FE]          RuntimeException    [CONTEXT]    public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =     "   ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();    [BUGGY]  }  catch(Throwable  throws  UnexpectedException  cb)  {  [BUGGY]    throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnexpectedException  cb)  {	  }    catch(Throwable    throws    unexpectedException)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
