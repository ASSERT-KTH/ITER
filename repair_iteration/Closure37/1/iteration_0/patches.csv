bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  catch(Throwable  t)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]    RuntimeException  [CONTEXT]  public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =   " ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();  [BUGGY]  }  catch(Throwable  t)  {  [BUGGY]  throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  t)  {	}  catch  (Exception  unexpectedException)  {  	non-compiled	[CE]  cannot  find  symbol  unexpectedException	1	None	replace
2	[BUG]  [BUGGY]  }  catch(Throwable  unexpectedException)  {  [CE]  method  throwUnexpectedException  in  class  NodeTraversal  cannot  be  applied  to  given  types;  [FE]      RuntimeException  [CONTEXT]  public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =   " ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();  [BUGGY]  }  catch(Throwable  unexpectedException)  {  [BUGGY]  throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  unexpectedException)  {	}  catch  (Exception  unexpectedException)  {  	non-compiled	[CE]  method  throwUnexpectedException  in  class  NodeTraversal  cannot  be  applied  to  given  types;	1	None	replace
3	[BUG]  [BUGGY]  }  else  if(inputId!=  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]        RuntimeException  [CONTEXT]  public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =   " ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();  [BUGGY]  }  else  if(inputId!=  null)  {  [BUGGY]  throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null)  {	}  catch  (Exception  unexpectedException)  {  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	1	None	replace
4	[BUG]  [BUGGY]  }  else  if(inputId  ==  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]          RuntimeException  [CONTEXT]  public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =   " ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();  [BUGGY]  }  else  if(inputId  ==  null)  {  [BUGGY]  throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null)  {	}  catch  (Exception  unexpectedException)  {  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	1	None	replace
5	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]            RuntimeException  [CONTEXT]  public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =   " ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException)  {  [BUGGY]  throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException)  {	}  catch  (Exception  unexpectedException)  {  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	1	None	replace
6	[BUG]  [BUGGY]  }  catch(Throwable  e)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]              RuntimeException  [CONTEXT]  public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =   " ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();  [BUGGY]  }  catch(Throwable  e)  {  [BUGGY]  throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  e)  {	}  catch  (Exception  unexpectedException)  {  	non-compiled	[CE]  cannot  find  symbol  unexpectedException	1	None	replace
7	[BUG]  [BUGGY]    [CE]  'try'  without  'catch'  or  'finally'  [FE]                RuntimeException  [CONTEXT]  public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =   " ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();  [BUGGY]    [BUGGY]  throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	  	}  catch  (Exception  unexpectedException)  {  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	1	None	replace
8	[BUG]  [BUGGY]  }  catch(Throwable  throws  unexpectedException)  {  [CE]  <identifier>  expected  [FE]    RuntimeException  [CONTEXT]  public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =   " ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();  [BUGGY]  }  catch(Throwable  throws  unexpectedException)  {  [BUGGY]  throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  unexpectedException)  {	}  catch  (Exception  unexpectedException)  {  	non-compiled	[CE]  <identifier>  expected	1	None	replace
