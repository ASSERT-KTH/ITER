bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  catch(Exception  msg)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Exception  msg)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Exception  msg)  {	  }    catch(Throwable    msg)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	38	None	replace
2	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()!=  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()!=  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.getType()!=  Token.NAME)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	60	None	replace
3	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()!=  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()!=  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()!=  Token.NAME)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	60	None	replace
4	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()!=  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()!=  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.getType()!=  Token.NAME)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	60	None	replace
5	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  >=  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  >=  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  >=  Token.NAME)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	60	None	replace
6	[BUG]  [BUGGY]  }  catch(RuntimeException  cb)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(RuntimeException  cb)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(RuntimeException  cb)  {	  }    catch(RuntimeException    t)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	3	None	replace
7	[BUG]  [BUGGY]  }  catch(NodeFormatException  t)  {  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(NodeFormatException  t)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NodeFormatException  t)  {	  }    catch(RuntimeException    t)    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
8	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  cb.replaceChild(n,  parent);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getParent();  cb.replaceChild(n,  parent);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();  cb.replaceChild(n,  parent);	  Node    parent    =    curNode.getParent();    cb.removeChild(parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	71	None	replace
9	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  cb.replaceChild(parent,  n);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getParent();  cb.replaceChild(parent,  n);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();  cb.replaceChild(parent,  n);	  Node    parent    =    curNode.getParent();    cb.removeChild(parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	71	None	replace
10	[BUG]  [BUGGY]  Node  parent  =  curNode.getNext();  cb.removeChild(parent);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getNext();  cb.removeChild(parent);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getNext();  cb.removeChild(parent);	  Node    parent    =    curNode.getParent();    cb.removeChild(parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	71	None	replace
11	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  cb.addChildToFront(parent);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getParent();  cb.addChildToFront(parent);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();  cb.addChildToFront(parent);	  Node    parent    =    curNode.getParent();    cb.removeChild(parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	71	None	replace
12	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  cb.removeChild(n);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getParent();  cb.removeChild(n);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();  cb.removeChild(n);	  Node    parent    =    curNode.getParent();    cb.removeChild(parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	71	None	replace
13	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  UnknownName)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  UnknownName)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  UnknownName)  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
14	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  UnexpectedException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  UnexpectedException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  UnexpectedException)  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
15	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  UnknownTypeException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  UnknownTypeException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  UnknownTypeException)  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
16	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
17	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  IllegalArgumentException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  IllegalArgumentException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  IllegalArgumentException)  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
18	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  UnknownType)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  UnknownType)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  UnknownType)  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
19	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  IllegalStatementException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  IllegalStatementException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  IllegalStatementException)  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
20	[BUG]  [BUGGY]  cb.removeChild(inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  cb.removeChild(inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.removeChild(inputId);	  cb.reset();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	70	None	replace
21	[BUG]  [BUGGY]  cb.removeChild(curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  cb.removeChild(curNode);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.removeChild(curNode);	  cb.reset();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	70	None	replace
22	[BUG]  [BUGGY]  cb.setCurrentNode(inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  cb.setCurrentNode(inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.setCurrentNode(inputId);	  cb.reset();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	70	None	replace
23	[BUG]  [BUGGY]  cb.setCurrentNode(n);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  cb.setCurrentNode(n);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.setCurrentNode(n);	  cb.reset();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	70	None	replace
24	[BUG]  [BUGGY]  cb.reset(inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  cb.reset(inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.reset(inputId);	  cb.reset();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	70	None	replace
25	[BUG]  [BUGGY]  }  catch(Exception  ex)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Exception  ex)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Exception  ex)  {	  }    catch(Throwable    ex)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	6	None	replace
26	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  sourceName.length()  >  0)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  sourceName.length()  >  0)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  &&  sourceName.length()  >  0)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName.length()    >    0)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	15	None	replace
27	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  inputId.length()  >  0)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  inputId.length()  >  0)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  inputId.length()  >  0)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName.length()    >    0)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	15	None	replace
28	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName!=  null  &&  sourceName.length()  >  0)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName!=  null  &&  sourceName.length()  >  0)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName!=  null  &&  sourceName.length()  >  0)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName.length()    >    0)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	15	None	replace
29	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName.length()  ==  0)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName.length()  ==  0)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName.length()  ==  0)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName.length()    >    0)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	15	None	replace
30	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  sourceName.length()  >  0)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  sourceName.length()  >  0)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  ||  sourceName.length()  >  0)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName.length()    >    0)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	15	None	replace
31	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName.length()!=  0)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName.length()!=  0)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName.length()!=  0)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName.length()    >    0)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	15	None	replace
32	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isFunction(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isFunction(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isFunction(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	44	None	replace
33	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  NodeUtil.isFunction(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  NodeUtil.isFunction(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  ||  NodeUtil.isFunction(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	44	None	replace
34	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  NodeUtil.isFunction(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  NodeUtil.isFunction(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  NodeUtil.isFunction(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	44	None	replace
35	[BUG]  [BUGGY]  }  else  if(!unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(!unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(!unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	44	None	replace
36	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  NodeUtil.isFunction(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  NodeUtil.isFunction(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnexpectedException  &&  NodeUtil.isFunction(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	44	None	replace
37	[BUG]  [BUGGY]  }  else  if(exception  instanceof  RuntimeException  &&  NodeUtil.isFunction(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(exception  instanceof  RuntimeException  &&  NodeUtil.isFunction(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(exception  instanceof  RuntimeException  &&  NodeUtil.isFunction(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	44	None	replace
38	[BUG]  [BUGGY]  }  catch(Throwable  e,  UNKNOWN_SOURCE)  {  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  e,  UNKNOWN_SOURCE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  e,  UNKNOWN_SOURCE)  {	  }    catch(Throwable    e,    MISSING_SOURCE)    {    	non-compiled	[CE]  	10	None	replace
39	[BUG]  [BUGGY]  }  catch(Throwable  e,  MISSING_SOURCE,  sourceName)  {  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  e,  MISSING_SOURCE,  sourceName)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  e,  MISSING_SOURCE,  sourceName)  {	  }    catch(Throwable    e,    MISSING_SOURCE)    {    	non-compiled	[CE]  	10	None	replace
40	[BUG]  [BUGGY]  }  catch(NodeNotFoundException  e,  MISSING_SOURCE)  {  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(NodeNotFoundException  e,  MISSING_SOURCE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NodeNotFoundException  e,  MISSING_SOURCE)  {	  }    catch(Throwable    e,    MISSING_SOURCE)    {    	non-compiled	[CE]  	10	None	replace
41	[BUG]  [BUGGY]  }  catch(Exception  e,  MISSING_SOURCE)  {  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Exception  e,  MISSING_SOURCE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Exception  e,  MISSING_SOURCE)  {	  }    catch(Throwable    e,    MISSING_SOURCE)    {    	non-compiled	[CE]  	10	None	replace
42	[BUG]  [BUGGY]  }  catch(Throwable  e,  UNKNOWN_EXPR_RESULT)  {  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  e,  UNKNOWN_EXPR_RESULT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  e,  UNKNOWN_EXPR_RESULT)  {	  }    catch(Throwable    e,    MISSING_SOURCE)    {    	non-compiled	[CE]  	10	None	replace
43	[BUG]  [BUGGY]  }  catch(RuntimeException  e,  MISSING_SOURCE)  {  [CE]  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(RuntimeException  e,  MISSING_SOURCE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(RuntimeException  e,  MISSING_SOURCE)  {	  }    catch(Throwable    e,    MISSING_SOURCE)    {    	non-compiled	[CE]  	10	None	replace
44	[BUG]  [BUGGY]  }  else  if(inputId  ==  null)  {  throwUnsupportedOperationException( " ");  }  [CE]  [FE]            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null)  {  throwUnsupportedOperationException( " ");  }  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null)  {  throwUnsupportedOperationException( " ");  }	  }    catch(Throwable    throws    UnsupportedOperationException    e)    {    	non-compiled	[CE]  	79	None	replace
45	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  nodeTypes.contains(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  nodeTypes.contains(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnexpectedException  &&  nodeTypes.contains(sourceName))  {	  }    else    if(unexpectedException    instanceof    UnexpectedException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
46	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  sourceName.length()  >  0)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  sourceName.length()  >  0)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnexpectedException  &&  sourceName.length()  >  0)  {	  }    else    if(unexpectedException    instanceof    UnexpectedException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
47	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnexpectedException  &&  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    UnexpectedException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
48	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  inputId.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  inputId.getType()  ==  Token.FUNCTION)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnexpectedException  &&  inputId.getType()  ==  Token.FUNCTION)  {	  }    else    if(unexpectedException    instanceof    UnexpectedException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
49	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  n);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  n);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  n);	  NodeUtil.copyCurrentScope(curNode,    parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	31	None	replace
50	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  parent,  inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  parent,  inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  parent,  inputId);	  NodeUtil.copyCurrentScope(curNode,    parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	31	None	replace
51	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  root);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  root);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  root);	  NodeUtil.copyCurrentScope(curNode,    parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	31	None	replace
52	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(parent,  curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(parent,  curNode);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(parent,  curNode);	  NodeUtil.copyCurrentScope(curNode,    parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	31	None	replace
53	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(n,  parent);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(n,  parent);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(n,  parent);	  NodeUtil.copyCurrentScope(curNode,    parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	31	None	replace
54	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(sourceName,  curNode,  parent);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(sourceName,  curNode,  parent);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(sourceName,  curNode,  parent);	  NodeUtil.copyCurrentScope(curNode,    parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	31	None	replace
55	[BUG]  [BUGGY]  }  catch(Throwable  msg,  sourceName)  {  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  msg,  sourceName)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  msg,  sourceName)  {	  }    catch(Throwable    msg,    unexpectedException)    {    	non-compiled	[CE]  	40	None	replace
56	[BUG]  [BUGGY]  }  catch(Throwable  msg,  sourceName,  unexpectedException)  {  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  msg,  sourceName,  unexpectedException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  msg,  sourceName,  unexpectedException)  {	  }    catch(Throwable    msg,    unexpectedException)    {    	non-compiled	[CE]  	40	None	replace
57	[BUG]  [BUGGY]  }  catch(Throwable  msg,  sourceName,  UnsupportedOperationException)  {  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  msg,  sourceName,  UnsupportedOperationException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  msg,  sourceName,  UnsupportedOperationException)  {	  }    catch(Throwable    msg,    unexpectedException)    {    	non-compiled	[CE]  	40	None	replace
58	[BUG]  [BUGGY]  }  catch(Throwable  msg,  UnsupportedOperationException.class)  {  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  msg,  UnsupportedOperationException.class)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  msg,  UnsupportedOperationException.class)  {	  }    catch(Throwable    msg,    unexpectedException)    {    	non-compiled	[CE]  	40	None	replace
59	[BUG]  [BUGGY]  }  catch(Throwable  msg,  sourceName,  UnexpectedException)  {  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  msg,  sourceName,  UnexpectedException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  msg,  sourceName,  UnexpectedException)  {	  }    catch(Throwable    msg,    unexpectedException)    {    	non-compiled	[CE]  	40	None	replace
60	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "* "))  {  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "* "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.equals( "* "))  {	  }    else    if(inputId!=    null    &&    inputId.equals(   "   "))    {    	non-compiled	[CE]  	72	None	replace
61	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "- "))  {  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "- "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.equals( "- "))  {	  }    else    if(inputId!=    null    &&    inputId.equals(   "   "))    {    	non-compiled	[CE]  	72	None	replace
62	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "_ "))  {  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "_ "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.equals( "_ "))  {	  }    else    if(inputId!=    null    &&    inputId.equals(   "   "))    {    	non-compiled	[CE]  	72	None	replace
63	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "null "))  {  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "null "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.equals( "null "))  {	  }    else    if(inputId!=    null    &&    inputId.equals(   "   "))    {    	non-compiled	[CE]  	72	None	replace
64	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.equals( "   "))  {  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  inputId.equals( "   "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.equals( "   "))  {	  }    else    if(inputId!=    null    &&    inputId.equals(   "   "))    {    	non-compiled	[CE]  	72	None	replace
65	[BUG]  [BUGGY]  }  catch(ThrowsException  cb)  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(ThrowsException  cb)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(ThrowsException  cb)  {	  }    catch(ThrowsException    t)    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
66	[BUG]  [BUGGY]  }  catch(ThrowsException  n)  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(ThrowsException  n)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(ThrowsException  n)  {	  }    catch(ThrowsException    t)    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
67	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  sourceName);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  sourceName);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  sourceName);	  NodeUtil.copyCurrentScope(curNode,    curNode);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	54	None	replace
68	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(sourceName,  curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(sourceName,  curNode);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(sourceName,  curNode);	  NodeUtil.copyCurrentScope(curNode,    curNode);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	54	None	replace
69	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(root,  curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(root,  curNode);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(root,  curNode);	  NodeUtil.copyCurrentScope(curNode,    curNode);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	54	None	replace
70	[BUG]  [BUGGY]  }  catch(Throwable  throws  Exception  e)  {  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  Exception  e)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  Exception  e)  {	  }    catch(Throwable    throws    UnexpectedException    e)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
71	[BUG]  [BUGGY]  }  catch(MissingSOURCEException  e)  {  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(MissingSOURCEException  e)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(MissingSOURCEException  e)  {	  }    catch(Exception    e)    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
72	[BUG]  [BUGGY]  }  catch(NodeFormatException  e)  {  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(NodeFormatException  e)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NodeFormatException  e)  {	  }    catch(Exception    e)    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
73	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.GETPROP)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.GETPROP)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.GETPROP)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	58	None	replace
74	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.GETPROP)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.GETPROP)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.GETPROP)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	58	None	replace
75	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.GETPROP)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.GETPROP)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.GETPROP)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	58	None	replace
76	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.GETELEM)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.GETELEM)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.GETELEM)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	58	None	replace
77	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.GETPROP)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.GETPROP)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.GETPROP)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	58	None	replace
78	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.equals( "   "))  {  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.equals( "   "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.equals( "   "))  {	  }    else    if(inputId    ==    null    ||    inputId.equals(   "   "))    {    	non-compiled	[CE]  	23	None	replace
79	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals( "* "))  {  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals( "* "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.equals( "* "))  {	  }    else    if(inputId    ==    null    ||    inputId.equals(   "   "))    {    	non-compiled	[CE]  	23	None	replace
80	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals( "null "))  {  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals( "null "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.equals( "null "))  {	  }    else    if(inputId    ==    null    ||    inputId.equals(   "   "))    {    	non-compiled	[CE]  	23	None	replace
81	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals( "- "))  {  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals( "- "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.equals( "- "))  {	  }    else    if(inputId    ==    null    ||    inputId.equals(   "   "))    {    	non-compiled	[CE]  	23	None	replace
82	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  MISSING_SOURCE));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  MISSING_SOURCE));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.report(JSError.make(sourceName,  curNode,  MISSING_SOURCE));	  Context.codeBug();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	67	None	replace
83	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  INVALID_SOURCE));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  INVALID_SOURCE));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.report(JSError.make(sourceName,  curNode,  INVALID_SOURCE));	  Context.codeBug();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	67	None	replace
84	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  NON_GLOBAL_ERROR));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  NON_GLOBAL_ERROR));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.report(JSError.make(sourceName,  curNode,  NON_GLOBAL_ERROR));	  Context.codeBug();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	67	None	replace
85	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  NON_GLOBAL_ERROR,  sourceName));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  NON_GLOBAL_ERROR,  sourceName));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.report(JSError.make(sourceName,  curNode,  NON_GLOBAL_ERROR,  sourceName));	  Context.codeBug();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	67	None	replace
86	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  MISSING_SOURCE),  cb);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  MISSING_SOURCE),  cb);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.report(JSError.make(sourceName,  curNode,  MISSING_SOURCE),  cb);	  Context.codeBug();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	67	None	replace
87	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.FUNCTION)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.FUNCTION)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	22	None	replace
88	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.FUNCTION)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()!=  Token.FUNCTION)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	22	None	replace
89	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.FUNCTION)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.FUNCTION)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	22	None	replace
90	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.FUNCTION)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.FUNCTION)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	22	None	replace
91	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.CATCH)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	62	None	replace
92	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()!=  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()!=  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.getType()!=  Token.CATCH)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	62	None	replace
93	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()!=  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()!=  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()!=  Token.CATCH)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	62	None	replace
94	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()!=  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()!=  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.getType()!=  Token.CATCH)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	62	None	replace
95	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  >=  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  >=  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  >=  Token.CATCH)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	62	None	replace
96	[BUG]  [BUGGY]  }  catch(Throwable  nfe)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  nfe)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  nfe)  {	  }    catch(NodeNotFoundException    nfe)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	39	None	replace
97	[BUG]  [BUGGY]  }  catch(Exception  nfe)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Exception  nfe)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Exception  nfe)  {	  }    catch(NodeNotFoundException    nfe)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	39	None	replace
98	[BUG]  [BUGGY]  }  catch(NodeNotFoundException  n)  {  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(NodeNotFoundException  n)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NodeNotFoundException  n)  {	  }    catch(NodeNotFoundException    nfe)    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
99	[BUG]  [BUGGY]  }  catch(RuntimeException  nfe)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(RuntimeException  nfe)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(RuntimeException  nfe)  {	  }    catch(NodeNotFoundException    nfe)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	39	None	replace
100	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(n.getString()))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
101	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(inputId.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(inputId.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(inputId.getString()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(n.getString()))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
102	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  nodeTypes.contains(n.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  nodeTypes.contains(n.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  nodeTypes.contains(n.getString()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(n.getString()))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
103	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString())||  nodeTypes.contains(n.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString())||  nodeTypes.contains(n.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString())||  nodeTypes.contains(n.getString()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(n.getString()))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
104	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName.getString()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(n.getString()))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
105	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  nodeTypes.contains(n.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  nodeTypes.contains(n.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  ||  nodeTypes.contains(n.getString()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(n.getString()))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
106	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.NAME)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	21	None	replace
107	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.NAME)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	21	None	replace
108	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.NAME)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	21	None	replace
109	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.FUNCTION)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	73	None	replace
110	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.FUNCTION  ||  inputId.getType()  ==  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.FUNCTION  ||  inputId.getType()  ==  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.FUNCTION  ||  inputId.getType()  ==  Token.CATCH)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	73	None	replace
111	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(n,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(n,  null);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();  traverseBranch(n,  null);	  Node    parent    =    curNode.getParent();    traverseBranch(parent,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	69	None	replace
112	[BUG]  [BUGGY]  Node  parent  =  curNode.getNext();  traverseBranch(parent,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getNext();  traverseBranch(parent,  null);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getNext();  traverseBranch(parent,  null);	  Node    parent    =    curNode.getParent();    traverseBranch(parent,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	69	None	replace
113	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  traverseBranch(curNode,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  n.getParent();  traverseBranch(curNode,  null);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  n.getParent();  traverseBranch(curNode,  null);	  Node    parent    =    curNode.getParent();    traverseBranch(parent,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	69	None	replace
114	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(curNode,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(curNode,  null);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();  traverseBranch(curNode,  null);	  Node    parent    =    curNode.getParent();    traverseBranch(parent,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	69	None	replace
115	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  traverseBranch(parent,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  n.getParent();  traverseBranch(parent,  null);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  n.getParent();  traverseBranch(parent,  null);	  Node    parent    =    curNode.getParent();    traverseBranch(parent,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	69	None	replace
116	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(parent,  nodeTypes);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(parent,  nodeTypes);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();  traverseBranch(parent,  nodeTypes);	  Node    parent    =    curNode.getParent();    traverseBranch(parent,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	69	None	replace
117	[BUG]  [BUGGY]  }  catch(NodeNotFoundException  e,  INVALID_SOURCE)  {  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(NodeNotFoundException  e,  INVALID_SOURCE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NodeNotFoundException  e,  INVALID_SOURCE)  {	  }    catch(Throwable    e,    INVALID_SOURCE)    {    	non-compiled	[CE]  	56	None	replace
118	[BUG]  [BUGGY]  }  catch(Throwable  t,  INVALID_SOURCE)  {  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  t,  INVALID_SOURCE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  t,  INVALID_SOURCE)  {	  }    catch(Throwable    e,    INVALID_SOURCE)    {    	non-compiled	[CE]  	56	None	replace
119	[BUG]  [BUGGY]  }  catch(RuntimeException  e,  INVALID_SOURCE)  {  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(RuntimeException  e,  INVALID_SOURCE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(RuntimeException  e,  INVALID_SOURCE)  {	  }    catch(Throwable    e,    INVALID_SOURCE)    {    	non-compiled	[CE]  	56	None	replace
120	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.EXPR_RESULT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.EXPR_RESULT)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	74	None	replace
121	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.EXPR_RESULT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.EXPR_RESULT)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	74	None	replace
122	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.EXPR_RESULT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.EXPR_RESULT)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	74	None	replace
123	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.EXPR_RESULT)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	74	None	replace
124	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.EXPR_RESULT  ||  inputId.getType()  ==  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.EXPR_RESULT  ||  inputId.getType()  ==  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.EXPR_RESULT  ||  inputId.getType()  ==  Token.CATCH)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	74	None	replace
125	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.EXPR_RESULT  ||  inputId.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.EXPR_RESULT  ||  inputId.getType()  ==  Token.FUNCTION)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.EXPR_RESULT  ||  inputId.getType()  ==  Token.FUNCTION)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	74	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  nodeTypes,  include);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  nodeTypes,  include);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  nodeTypes,  include);	  NodeTraversal.traverse(compiler,    root,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	51	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  nodeTypes,  inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  nodeTypes,  inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  nodeTypes,  inputId);	  NodeTraversal.traverse(compiler,    root,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	51	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  curNode,  nodeTypes);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  curNode,  nodeTypes);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  curNode,  nodeTypes);	  NodeTraversal.traverse(compiler,    root,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	51	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodeTypes);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodeTypes);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  n,  nodeTypes);	  NodeTraversal.traverse(compiler,    root,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	51	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodeTypes,  inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  nodeTypes,  inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  nodeTypes,  inputId);	  NodeTraversal.traverse(compiler,    root,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	51	None	replace
131	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  UNKNOWN_SOURCE));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  UNKNOWN_SOURCE));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.report(JSError.make(sourceName,  curNode,  UNKNOWN_SOURCE));	  Context.reportCodeChange();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	25	None	replace
132	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  INVALID_SOURCE,  inputId));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  INVALID_SOURCE,  inputId));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.report(JSError.make(sourceName,  curNode,  INVALID_SOURCE,  inputId));	  Context.reportCodeChange();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	25	None	replace
133	[BUG]  [BUGGY]  }  catch(IOException  e)  {  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(IOException  e)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(IOException  e)  {	  }    catch(NodeNotFoundException    e)    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
134	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.GETELEM)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.GETELEM)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.GETELEM)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	50	None	replace
135	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.GETPROP)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.GETPROP)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.GETPROP)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	50	None	replace
136	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(scopeCreator);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(scopeCreator);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(scopeCreator);	  NodeUtil.copyCurrentScope(curNode);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	28	None	replace
137	[BUG]  [BUGGY]  }  catch(NodeNotFoundException  cb)  {  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(NodeNotFoundException  cb)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NodeNotFoundException  cb)  {	  }    catch(NodeNotFoundException    t)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
138	[BUG]  [BUGGY]  }  catch(Throwable  throws  IllegalArgumentException)  {  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  IllegalArgumentException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  IllegalArgumentException)  {	  }    catch(Throwable    throws    UnexpectedException)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
139	[BUG]  [BUGGY]  }  catch(Throwable  cb)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  cb)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  cb)  {	  }    catch(Throwable    throws    UnexpectedException    cb)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	80	None	replace
140	[BUG]  [BUGGY]  }  catch(Exception  cb)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Exception  cb)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Exception  cb)  {	  }    catch(Throwable    throws    UnexpectedException    cb)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	80	None	replace
141	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  IllegalStatement)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  IllegalStatement)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  IllegalStatement)  {	  }    else    if(unexpectedException    instanceof    IllegalStateException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	43	None	replace
142	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  IllegalStateException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  IllegalStateException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  IllegalStateException)  {	  }    else    if(unexpectedException    instanceof    IllegalStateException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	43	None	replace
143	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatement)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatement)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatement)  {	  }    else    if(unexpectedException    instanceof    IllegalStateException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	43	None	replace
144	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  sourceName.length()  >  0)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  sourceName.length()  >  0)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStateException  &&  sourceName.length()  >  0)  {	  }    else    if(unexpectedException    instanceof    IllegalStateException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	43	None	replace
145	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnexpectedException(sourceName))  {  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  UnexpectedException(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnexpectedException(sourceName))  {	  }    catch(Throwable    throws    UnexpectedException(inputId))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
146	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnexpectedException(root))  {  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  UnexpectedException(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnexpectedException(root))  {	  }    catch(Throwable    throws    UnexpectedException(inputId))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
147	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnexpectedException(inputId,  sourceName))  {  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  UnexpectedException(inputId,  sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnexpectedException(inputId,  sourceName))  {	  }    catch(Throwable    throws    UnexpectedException(inputId))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
148	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnexpectedException(curNode))  {  [CE]  <identifier>  expected  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  UnexpectedException(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnexpectedException(curNode))  {	  }    catch(Throwable    throws    UnexpectedException(inputId))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
149	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnexpectedException(unexpectedException))  {  [CE]  <identifier>  expected  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  UnexpectedException(unexpectedException))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnexpectedException(unexpectedException))  {	  }    catch(Throwable    throws    UnexpectedException(inputId))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
150	[BUG]  [BUGGY]  }  catch(Throwable  rex)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  rex)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  rex)  {	  }    catch(Throwable    exception)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	5	None	replace
151	[BUG]  [BUGGY]  throw(ThrowsException  e)  {  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  throw(ThrowsException  e)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	throw(ThrowsException  e)  {	  }    catch(ThrowsException    e)    {    	non-compiled	[CE]  	11	None	replace
152	[BUG]  [BUGGY]  catch(ThrowsException  e)  {  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  catch(ThrowsException  e)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	catch(ThrowsException  e)  {	  }    catch(ThrowsException    e)    {    	non-compiled	[CE]  	11	None	replace
153	[BUG]  [BUGGY]  }  catch(IOException  ioe)  {  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(IOException  ioe)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(IOException  ioe)  {	  }    catch(IOException    t)    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
154	[BUG]  [BUGGY]  }  catch(IOException  cb)  {  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(IOException  cb)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(IOException  cb)  {	  }    catch(IOException    t)    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
155	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals(null))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals(null))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.equals(null))  {	  }    else    if(inputId!=    null    ||    inputId.equals(null))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	57	None	replace
156	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.equals(null))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.equals(null))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.equals(null))  {	  }    else    if(inputId!=    null    ||    inputId.equals(null))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	57	None	replace
157	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.equals(scopeCreator))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  inputId.equals(scopeCreator))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.equals(scopeCreator))  {	  }    else    if(inputId!=    null    ||    inputId.equals(null))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	57	None	replace
158	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals(scopeCreator))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals(scopeCreator))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.equals(scopeCreator))  {	  }    else    if(inputId!=    null    ||    inputId.equals(null))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	57	None	replace
159	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.CATCH)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
160	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.CATCH)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
161	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.CATCH)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
162	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.CATCH)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
163	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(inputId,  curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(inputId,  curNode);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(inputId,  curNode);	  NodeUtil.copyCurrentScope(curNode,    inputId);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
164	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(sourceName,  curNode,  inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(sourceName,  curNode,  inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(sourceName,  curNode,  inputId);	  NodeUtil.copyCurrentScope(curNode,    inputId);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
165	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  inputId,  sourceName);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  inputId,  sourceName);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  inputId,  sourceName);	  NodeUtil.copyCurrentScope(curNode,    inputId);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
166	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  inputId,  scope);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  inputId,  scope);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  inputId,  scope);	  NodeUtil.copyCurrentScope(curNode,    inputId);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
167	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  sourceName!=  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  sourceName!=  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  &&  sourceName!=  null)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	48	None	replace
168	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName  ==  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName  ==  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  sourceName  ==  null)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	48	None	replace
169	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  curNode!=  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  curNode!=  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  curNode!=  null)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	48	None	replace
170	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  sourceName!=  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  sourceName!=  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  ||  sourceName!=  null)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	48	None	replace
171	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  curNode  ==  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  curNode  ==  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  curNode  ==  null)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	48	None	replace
172	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  inputId!=  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  inputId!=  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  inputId!=  null)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	48	None	replace
173	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.VAR)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.VAR)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.VAR)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	77	None	replace
174	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.VAR)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.VAR)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.VAR)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	77	None	replace
175	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.VAR)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.VAR)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.VAR)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	77	None	replace
176	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.VAR)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.VAR)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.VAR)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	77	None	replace
177	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  IllegalArgumentException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  IllegalArgumentException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  IllegalArgumentException)  {	  }    else    if(unexpectedException    instanceof    IllegalArgumentException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
178	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  nodeTypes.contains(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  nodeTypes.contains(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  nodeTypes.contains(sourceName))  {	  }    else    if(unexpectedException    instanceof    IllegalArgumentException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
179	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  sourceName.length()  >  0)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  sourceName.length()  >  0)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  sourceName.length()  >  0)  {	  }    else    if(unexpectedException    instanceof    IllegalArgumentException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
180	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    IllegalArgumentException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
181	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.contains(unexpectedException))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.contains(unexpectedException))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.contains(unexpectedException))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
182	[BUG]  [BUGGY]  }  else  if(included  ||  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(included  ||  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(included  ||  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
183	[BUG]  [BUGGY]  }  else  if(inclusion  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inclusion  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inclusion  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
184	[BUG]  [BUGGY]  }  else  if(included  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(included  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(included  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
185	[BUG]  [BUGGY]  }  else  if(include  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(include  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(include  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
186	[BUG]  [BUGGY]  }  else  if(included  &&  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(included  &&  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(included  &&  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
187	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(root,  nodeTypes);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(root,  nodeTypes);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(root,  nodeTypes);	  NodeUtil.copyCurrentScope(curNode,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	30	None	replace
188	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(sourceName,  curNode,  nodeTypes);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(sourceName,  curNode,  nodeTypes);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(sourceName,  curNode,  nodeTypes);	  NodeUtil.copyCurrentScope(curNode,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	30	None	replace
189	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(n,  nodeTypes);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(n,  nodeTypes);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(n,  nodeTypes);	  NodeUtil.copyCurrentScope(curNode,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	30	None	replace
190	[BUG]  [BUGGY]  traverseBranch(curNode,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  traverseBranch(curNode,  null);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	traverseBranch(curNode,  null);	  traverseBranch(root,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	27	None	replace
191	[BUG]  [BUGGY]  traverseBranch(root,  scopeCreator);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  traverseBranch(root,  scopeCreator);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	traverseBranch(root,  scopeCreator);	  traverseBranch(root,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	27	None	replace
192	[BUG]  [BUGGY]  traverseScope(root,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  traverseScope(root,  null);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	traverseScope(root,  null);	  traverseBranch(root,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	27	None	replace
193	[BUG]  [BUGGY]  traverseBranch(root,  null,  scopeCreator);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  traverseBranch(root,  null,  scopeCreator);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	traverseBranch(root,  null,  scopeCreator);	  traverseBranch(root,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	27	None	replace
194	[BUG]  [BUGGY]  traverseBranch(root,  cb);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  traverseBranch(root,  cb);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	traverseBranch(root,  cb);	  traverseBranch(root,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	27	None	replace
195	[BUG]  [BUGGY]  traverseFunction(root,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  traverseFunction(root,  null);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	traverseFunction(root,  null);	  traverseBranch(root,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	27	None	replace
196	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(curNode,  inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentStructure(curNode,  inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentStructure(curNode,  inputId);	  NodeUtil.copyCurrentStructure(curNode);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	66	None	replace
197	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(curNode,  cb);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentStructure(curNode,  cb);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentStructure(curNode,  cb);	  NodeUtil.copyCurrentStructure(curNode);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	66	None	replace
198	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(curNode,  parent);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentStructure(curNode,  parent);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentStructure(curNode,  parent);	  NodeUtil.copyCurrentStructure(curNode);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	66	None	replace
199	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(curNode,  n);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentStructure(curNode,  n);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentStructure(curNode,  n);	  NodeUtil.copyCurrentStructure(curNode);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	66	None	replace
200	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(root);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentStructure(root);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentStructure(root);	  NodeUtil.copyCurrentStructure(curNode);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	66	None	replace
201	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(curNode,  sourceName);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentStructure(curNode,  sourceName);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentStructure(curNode,  sourceName);	  NodeUtil.copyCurrentStructure(curNode);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	66	None	replace
202	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.contains(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.contains(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.contains(sourceName))  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
203	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  sourceName.length()  >  0)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  sourceName.length()  >  0)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&  sourceName.length()  >  0)  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
204	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
205	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  curNode!=  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  curNode!=  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&  curNode!=  null)  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
206	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  inputId.getType()  ==  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  inputId.getType()  ==  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&  inputId.getType()  ==  Token.NAME)  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
207	[BUG]  [BUGGY]  }  catch(Throwable  throws  IOException,  MISSING_SOURCE)  {  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  IOException,  MISSING_SOURCE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  IOException,  MISSING_SOURCE)  {	  }    catch(Throwable    throws    IOException)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
208	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.hasChildren())  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.hasChildren())  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.hasChildren())  {	  }    else    if(inputId    ==    null    ||    inputId.hasChildren())    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	61	None	replace
209	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.hasChildren())  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  inputId.hasChildren())  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.hasChildren())  {	  }    else    if(inputId    ==    null    ||    inputId.hasChildren())    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	61	None	replace
210	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.hasChildren())  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.hasChildren())  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.hasChildren())  {	  }    else    if(inputId    ==    null    ||    inputId.hasChildren())    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	61	None	replace
211	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.hasChildren())  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.hasChildren())  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  ||  inputId.hasChildren())  {	  }    else    if(inputId    ==    null    ||    inputId.hasChildren())    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	61	None	replace
212	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isLiteralValue(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isLiteralValue(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isLiteralValue(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isLiteralValue(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	45	None	replace
213	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  NodeUtil.isLiteralValue(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  NodeUtil.isLiteralValue(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  ||  NodeUtil.isLiteralValue(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isLiteralValue(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	45	None	replace
214	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunctionDeclaration(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunctionDeclaration(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunctionDeclaration(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isLiteralValue(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	45	None	replace
215	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isLiteralValue(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isLiteralValue(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isLiteralValue(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isLiteralValue(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	45	None	replace
216	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  NodeUtil.isLiteralValue(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  NodeUtil.isLiteralValue(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  NodeUtil.isLiteralValue(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isLiteralValue(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	45	None	replace
217	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunctionAnonymous(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunctionAnonymous(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunctionAnonymous(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isLiteralValue(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	45	None	replace
218	[BUG]  [BUGGY]  Node  parent  =  curNode.getNext();  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getNext();  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getNext();	  Node    parent    =    curNode.getParent();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	68	None	replace
219	[BUG]  [BUGGY]  Node  parent  =  curNode.getLastChild();  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getLastChild();  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getLastChild();	  Node    parent    =    curNode.getParent();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	68	None	replace
220	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  n.getParent();	  Node    parent    =    curNode.getParent();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	68	None	replace
221	[BUG]  [BUGGY]  Node  parent  =  curNode!=  null?  curNode.getParent()  :  node;  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode!=  null?  curNode.getParent()  :  node;  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode!=  null?  curNode.getParent()  :  node;	  Node    parent    =    curNode.getParent();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	68	None	replace
222	[BUG]  [BUGGY]  Node  parent  =  curNode!=  null?  curNode.getParent()  :  root;  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode!=  null?  curNode.getParent()  :  root;  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode!=  null?  curNode.getParent()  :  root;	  Node    parent    =    curNode.getParent();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	68	None	replace
223	[BUG]  [BUGGY]  Node  parent  =  curNode!=  null?  curNode.getParent()  :  null;  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode!=  null?  curNode.getParent()  :  null;  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode!=  null?  curNode.getParent()  :  null;	  Node    parent    =    curNode.getParent();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	68	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException(sourceName));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException(sourceName));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  new  RuntimeException(sourceName));	  NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	53	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  n,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	53	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "));  [CE]  unclosed  string  literal  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  new  RuntimeException( "));	  NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  unclosed  string  literal	53	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cb,  new  RuntimeException( " "));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  cb,  new  RuntimeException( " "));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  cb,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	53	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceName,  new  RuntimeException( " "));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  sourceName,  new  RuntimeException( " "));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  sourceName,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	53	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  curNode,  new  RuntimeException( " "));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  curNode,  new  RuntimeException( " "));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  curNode,  new  RuntimeException( " "));	  NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	53	None	replace
230	[BUG]  [BUGGY]  }  catch(Throwable  unexpected)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  unexpected)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  unexpected)  {	  }    catch(Throwable    ignored)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	42	None	replace
231	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.SCRIPT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.SCRIPT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.SCRIPT)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	76	None	replace
232	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.SCRIPT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.SCRIPT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.getType()  ==  Token.SCRIPT)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	76	None	replace
233	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.SCRIPT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.SCRIPT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.SCRIPT)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	76	None	replace
234	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.SCRIPT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.SCRIPT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.SCRIPT)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	76	None	replace
235	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.STRING)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.STRING)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.STRING)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	76	None	replace
236	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  curNode.getType()  ==  Token.NAME)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	75	None	replace
237	[BUG]  [BUGGY]  }  catch(Throwable  throws  Throwable  t)  {  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  Throwable  t)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  Throwable  t)  {	  }    catch(Throwable    throws    Exception)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
238	[BUG]  [BUGGY]  }  catch(Throwable  throws  InterruptedException)  {  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  InterruptedException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  InterruptedException)  {	  }    catch(Throwable    throws    Exception)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
239	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isExpressionNode(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isExpressionNode(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isExpressionNode(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isExpressionNode(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	46	None	replace
240	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  NodeUtil.isExpressionNode(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  NodeUtil.isExpressionNode(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  ||  NodeUtil.isExpressionNode(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isExpressionNode(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	46	None	replace
241	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  NodeUtil.isExpressionNode(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  NodeUtil.isExpressionNode(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  NodeUtil.isExpressionNode(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isExpressionNode(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	46	None	replace
242	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunctionDeclaration(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunctionDeclaration(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunctionDeclaration(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isExpressionNode(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	46	None	replace
243	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isExpressionNode(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isExpressionNode(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isExpressionNode(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isExpressionNode(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	46	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  inputId);	  NodeTraversal.traverse(compiler,    root,    scopeCreator);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	55	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  curNode,  scopeCreator);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  curNode,  scopeCreator);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  curNode,  scopeCreator);	  NodeTraversal.traverse(compiler,    root,    scopeCreator);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	55	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  scopeCreator,  inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  scopeCreator,  inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  scopeCreator,  inputId);	  NodeTraversal.traverse(compiler,    root,    scopeCreator);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	55	None	replace
247	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scopeCreator);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  scopeCreator);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  n,  scopeCreator);	  NodeTraversal.traverse(compiler,    root,    scopeCreator);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	55	None	replace
248	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.scopeCreator);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.scopeCreator);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  this.scopeCreator);	  NodeTraversal.traverse(compiler,    root,    scopeCreator);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	55	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  sourceName);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  sourceName);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  sourceName);	  NodeTraversal.traverse(compiler,    root,    scopeCreator);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	55	None	replace
250	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  nodeTypes.contains(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  nodeTypes.contains(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  nodeTypes.contains(sourceName))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(sourceName))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	14	None	replace
251	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName)||  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName)||  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName)||  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(sourceName))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	14	None	replace
252	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  nodeTypes.contains(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  nodeTypes.contains(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  ||  nodeTypes.contains(sourceName))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(sourceName))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	14	None	replace
253	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName)||  nodeTypes.contains(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName)||  nodeTypes.contains(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName)||  nodeTypes.contains(sourceName))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(sourceName))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	14	None	replace
254	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cb,  curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(cb,  curNode);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(cb,  curNode);	  NodeUtil.copyCurrentScope(curNode,    cb);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	29	None	replace
255	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  cb,  inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  cb,  inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  cb,  inputId);	  NodeUtil.copyCurrentScope(curNode,    cb);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	29	None	replace
256	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  cb,  scopeCreator);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  cb,  scopeCreator);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  cb,  scopeCreator);	  NodeUtil.copyCurrentScope(curNode,    cb);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	29	None	replace
257	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  cfgs);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  cfgs);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  cfgs);	  NodeUtil.copyCurrentScope(curNode,    cb);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	29	None	replace
258	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(root,  cb);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(root,  cb);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(root,  cb);	  NodeUtil.copyCurrentScope(curNode,    cb);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	29	None	replace
259	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  cb,  sourceName);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  cb,  sourceName);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  cb,  sourceName);	  NodeUtil.copyCurrentScope(curNode,    cb);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	29	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  nodeTypes);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  nodeTypes);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  this,  nodeTypes);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	52	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  scopeCreator);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  scopeCreator);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  this,  scopeCreator);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	52	None	replace
262	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  scope);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  scope);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  this,  scope);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	52	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  this,  inputId);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	52	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  null);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	52	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	52	None	replace
266	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isFunction(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isFunction(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  &&  NodeUtil.isFunction(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	65	None	replace
267	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  NodeUtil.isFunction(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  ||  NodeUtil.isFunction(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  ||  NodeUtil.isFunction(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	65	None	replace
268	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  NodeUtil.isFunction(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  NodeUtil.isFunction(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  NodeUtil.isFunction(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	65	None	replace
269	[BUG]  [BUGGY]  }  else  if(!unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(!unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(!unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	65	None	replace
270	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.containsKey(unexpectedException))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.containsKey(unexpectedException))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.containsKey(unexpectedException))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.containsKey(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	replace
271	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.containsKey(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.containsKey(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.containsKey(sourceName))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.containsKey(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	replace
272	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.containsKey(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	replace
273	[BUG]  [BUGGY]  }  else  if(included  ||  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(included  ||  nodeTypes.containsKey(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(included  ||  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.containsKey(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	replace
274	[BUG]  [BUGGY]  }  else  if(include  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(include  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(include  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.containsKey(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	replace
275	[BUG]  [BUGGY]  }  else  if(inclusion  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inclusion  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inclusion  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.containsKey(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	replace
276	[BUG]  [BUGGY]  }  else  if(included  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(included  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(included  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.containsKey(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	replace
277	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()!=  Token.VAR)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()!=  Token.VAR)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.getType()!=  Token.VAR)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
278	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()!=  Token.VAR)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()!=  Token.VAR)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()!=  Token.VAR)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
279	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()!=  Token.VAR)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()!=  Token.VAR)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.getType()!=  Token.VAR)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
280	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.VAR)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.VAR)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  ||  inputId.getType()  ==  Token.VAR)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  cb);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  cb);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  cb);	  NodeTraversal.traverse(compiler,    root,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	51	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  curNode);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  curNode);	  NodeTraversal.traverse(compiler,    root,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	51	None	replace
283	[BUG]  [BUGGY]  }  else  if(inputId  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }  [CE]  [FE]            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null)  {  throw  new  UnsupportedOperationException( " ");  }	  }    catch(Throwable    throws    UnsupportedOperationException    e)    {    	non-compiled	[CE]  	79	None	replace
284	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  NodeUtil.isExpressionNode(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  NodeUtil.isExpressionNode(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStateException  &&  NodeUtil.isExpressionNode(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isExpressionNode(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	46	None	replace
285	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  NodeUtil.isFunction(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  NodeUtil.isFunction(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStateException  &&  NodeUtil.isFunction(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	65	None	replace
286	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isGetProp(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isGetProp(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isGetProp(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	65	None	replace
287	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  curNode.getType()  ==  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  curNode.getType()  ==  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  curNode.getType()  ==  Token.NAME)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	19	None	replace
288	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  curNode.getType()  ==  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  curNode.getType()  ==  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  curNode.getType()  ==  Token.NAME)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	19	None	replace
289	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  cb.replaceChild(curNode,  n);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getParent();  cb.replaceChild(curNode,  n);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();  cb.replaceChild(curNode,  n);	  Node    parent    =    curNode.getParent();    cb.removeChild(parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	71	None	replace
290	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  NodeUtil.isFunction(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  NodeUtil.isFunction(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStateException  &&  NodeUtil.isFunction(root))  {	  }    else    if(unexpectedException    instanceof    IllegalStateException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	43	None	replace
291	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  nodeTypes.containsKey(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStateException  &&  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    IllegalStateException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	43	None	replace
292	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  sourceName!=  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  sourceName!=  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStateException  &&  sourceName!=  null)  {	  }    else    if(unexpectedException    instanceof    IllegalStateException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	43	None	replace
293	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStateException  &&  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    IllegalStateException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	43	None	replace
294	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  nodeTypes.containsKey(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  nodeTypes.containsKey(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStateException  &&  nodeTypes.containsKey(sourceName))  {	  }    else    if(unexpectedException    instanceof    IllegalStateException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	43	None	replace
295	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnsupportedOperationException  &&  NodeUtil.isFunction(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnsupportedOperationException  &&  NodeUtil.isFunction(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnsupportedOperationException  &&  NodeUtil.isFunction(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	44	None	replace
296	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isName(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isName(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isName(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	44	None	replace
297	[BUG]  [BUGGY]  }  catch(Throwable  e,  UNKNOWN_EXPR_TYPE)  {  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  e,  UNKNOWN_EXPR_TYPE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  e,  UNKNOWN_EXPR_TYPE)  {	  }    catch(Throwable    e,    MISSING_SOURCE)    {    	non-compiled	[CE]  	10	None	replace
298	[BUG]  [BUGGY]  }  catch(Throwable  e,  UNKNOWN_SYNCHRONIZED)  {  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  e,  UNKNOWN_SYNCHRONIZED)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  e,  UNKNOWN_SYNCHRONIZED)  {	  }    catch(Throwable    e,    MISSING_SOURCE)    {    	non-compiled	[CE]  	10	None	replace
299	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  &&  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
300	[BUG]  [BUGGY]  }  else  if(include  ||  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(include  ||  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(include  ||  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
301	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(inputId)||  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(inputId)||  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(inputId)||  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
302	[BUG]  [BUGGY]  cb.set(inputId,  curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  cb.set(inputId,  curNode);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.set(inputId,  curNode);	  cb.reset();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	70	None	replace
303	[BUG]  [BUGGY]  cb.replaceChild(curNode,  callback);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  cb.replaceChild(curNode,  callback);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.replaceChild(curNode,  callback);	  cb.reset();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	70	None	replace
304	[BUG]  [BUGGY]  cb.replaceChild(curNode,  n);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  cb.replaceChild(curNode,  n);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.replaceChild(curNode,  n);	  cb.reset();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	70	None	replace
305	[BUG]  [BUGGY]  cb.reset(inputId,  curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  cb.reset(inputId,  curNode);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.reset(inputId,  curNode);	  cb.reset();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	70	None	replace
306	[BUG]  [BUGGY]  cb.setCurrentLocation(curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  cb.setCurrentLocation(curNode);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.setCurrentLocation(curNode);	  cb.reset();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	70	None	replace
307	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnsupportedOperationException  &&  NodeUtil.isLiteralValue(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnsupportedOperationException  &&  NodeUtil.isLiteralValue(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnsupportedOperationException  &&  NodeUtil.isLiteralValue(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isLiteralValue(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	45	None	replace
308	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  NodeUtil.isLiteralValue(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  NodeUtil.isLiteralValue(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStateException  &&  NodeUtil.isLiteralValue(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isLiteralValue(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	45	None	replace
309	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  NodeUtil.isFunction(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  NodeUtil.isFunction(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&  NodeUtil.isFunction(root))  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
310	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  sourceName!=  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  sourceName!=  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&  sourceName!=  null)  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
311	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.containsKey(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
312	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  curNode  ==  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  curNode  ==  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&  curNode  ==  null)  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
313	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.containsKey(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.containsKey(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.containsKey(sourceName))  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
314	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.equals(root))  {	  }    else    if(inputId    ==    null    ||    inputId.equals(null))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	49	None	replace
315	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.equals(sourceName))  {	  }    else    if(inputId    ==    null    ||    inputId.equals(null))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	49	None	replace
316	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  inputId,  scopeCreator);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  inputId,  scopeCreator);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  inputId,  scopeCreator);	  NodeUtil.copyCurrentScope(curNode,    inputId);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
317	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  inputId,  root);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  inputId,  root);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  inputId,  root);	  NodeUtil.copyCurrentScope(curNode,    inputId);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
318	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(root,  inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(root,  inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(root,  inputId);	  NodeUtil.copyCurrentScope(curNode,    inputId);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
319	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException(inputId));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException(inputId));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  new  RuntimeException(inputId));	  NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	53	None	replace
320	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( " ")));  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( " ")));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  new  RuntimeException( " ")));	  NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  	53	None	replace
321	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "node "))  {  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "node "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.equals( "node "))  {	  }    else    if(inputId!=    null    &&    inputId.equals(   "   "))    {    	non-compiled	[CE]  	72	None	replace
322	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "/ "))  {  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "/ "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.equals( "/ "))  {	  }    else    if(inputId!=    null    &&    inputId.equals(   "   "))    {    	non-compiled	[CE]  	72	None	replace
323	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.equals(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  inputId.equals(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.equals(root))  {	  }    else    if(inputId!=    null    ||    inputId.equals(null))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	57	None	replace
324	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  UNKNOWN_EXPR_TYPE));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  UNKNOWN_EXPR_TYPE));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.report(JSError.make(sourceName,  curNode,  UNKNOWN_EXPR_TYPE));	  Context.codeBug();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	67	None	replace
325	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  cb,  MISSING_SOURCE));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  cb,  MISSING_SOURCE));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.report(JSError.make(sourceName,  curNode,  cb,  MISSING_SOURCE));	  Context.codeBug();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	67	None	replace
326	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  inputId));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  inputId));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.report(JSError.make(sourceName,  curNode,  inputId));	  Context.codeBug();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	67	None	replace
327	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  curNode.getType()!=  Token.VAR)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  curNode.getType()!=  Token.VAR)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  curNode.getType()!=  Token.VAR)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
328	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.EMPTY)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.EMPTY)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.EMPTY)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	22	None	replace
329	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(nodeTypes,  curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(nodeTypes,  curNode);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(nodeTypes,  curNode);	  NodeUtil.copyCurrentScope(curNode,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	30	None	replace
330	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(scopeRoot,  nodeTypes);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(scopeRoot,  nodeTypes);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(scopeRoot,  nodeTypes);	  NodeUtil.copyCurrentScope(curNode,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	30	None	replace
331	[BUG]  [BUGGY]  }  catch(Throwable  msg,  INVALID_SOURCE)  {  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  msg,  INVALID_SOURCE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  msg,  INVALID_SOURCE)  {	  }    catch(Throwable    msg,    unexpectedException)    {    	non-compiled	[CE]  	40	None	replace
332	[BUG]  [BUGGY]  }  catch(Throwable  msg,  UnexpectedException.class)  {  [CE]  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  msg,  UnexpectedException.class)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  msg,  UnexpectedException.class)  {	  }    catch(Throwable    msg,    unexpectedException)    {    	non-compiled	[CE]  	40	None	replace
333	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(root,  parent);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(root,  parent);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(root,  parent);	  NodeUtil.copyCurrentScope(curNode,    parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	31	None	replace
334	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.SCRIPT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.SCRIPT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.SCRIPT)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	76	None	replace
335	[BUG]  [BUGGY]  }  else  if(include  ||  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(include  ||  nodeTypes.containsKey(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(include  ||  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.containsKey(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	replace
336	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId)||  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId)||  nodeTypes.containsKey(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId)||  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.containsKey(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	replace
337	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  nodeTypes.containsKey(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.containsKey(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	replace
338	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  curNode.length()  >  0)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  curNode.length()  >  0)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  curNode.length()  >  0)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName.length()    >    0)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	15	None	replace
339	[BUG]  [BUGGY]  traverseFields(root,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  traverseFields(root,  null);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	traverseFields(root,  null);	  traverseBranch(root,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	27	None	replace
340	[BUG]  [BUGGY]  traverseBranch(root,  null,  curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  traverseBranch(root,  null,  curNode);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	traverseBranch(root,  null,  curNode);	  traverseBranch(root,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	27	None	replace
341	[BUG]  [BUGGY]  traverse(root,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  traverse(root,  null);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	traverse(root,  null);	  traverseBranch(root,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	27	None	replace
342	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString())||  nodeTypes.contains(root.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString())||  nodeTypes.contains(root.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString())||  nodeTypes.contains(root.getString()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(n.getString()))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
343	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  nodeTypes.contains(n.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStateException  &&  nodeTypes.contains(n.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStateException  &&  nodeTypes.contains(n.getString()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(n.getString()))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
344	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getLineno()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getLineno()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getLineno()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(n.getString()))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
345	[BUG]  [BUGGY]  }  else  if(nodeTypes.contains(n.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(nodeTypes.contains(n.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(nodeTypes.contains(n.getString()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(n.getString()))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  cb);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  cb);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  this,  cb);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	52	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  callback);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  callback);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  callback);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	52	None	replace
348	[BUG]  [BUGGY]  NodeUtil.copyCurrentStructure(curNode,  curNode);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentStructure(curNode,  curNode);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentStructure(curNode,  curNode);	  NodeUtil.copyCurrentStructure(curNode);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	66	None	replace
349	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  curNode.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  curNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  curNode.getType()  ==  Token.FUNCTION)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	20	None	replace
350	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  curNode.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  curNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  curNode.getType()  ==  Token.FUNCTION)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	73	None	replace
351	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  NodeUtil.isExpressionNode(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  NodeUtil.isExpressionNode(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnexpectedException  &&  NodeUtil.isExpressionNode(curNode))  {	  }    else    if(unexpectedException    instanceof    UnexpectedException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
352	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  nodeTypes.containsKey(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnexpectedException  &&  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    UnexpectedException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
353	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  sourceName!=  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  sourceName!=  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnexpectedException  &&  sourceName!=  null)  {	  }    else    if(unexpectedException    instanceof    UnexpectedException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
354	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  NodeUtil.isLiteralValue(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  NodeUtil.isLiteralValue(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnexpectedException  &&  NodeUtil.isLiteralValue(root))  {	  }    else    if(unexpectedException    instanceof    UnexpectedException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
355	[BUG]  [BUGGY]  }  else  if(include  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(include  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(include  ||  inputId  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(sourceName))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	14	None	replace
356	[BUG]  [BUGGY]  }  else  if(sourceName  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(sourceName  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(sourceName  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(sourceName))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	14	None	replace
357	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  curNode.getType()!=  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  curNode.getType()!=  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  curNode.getType()!=  Token.CATCH)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	62	None	replace
358	[BUG]  [BUGGY]  }  catch(Throwable  e,  INVALID_SOURCE,  sourceName)  {  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  e,  INVALID_SOURCE,  sourceName)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  e,  INVALID_SOURCE,  sourceName)  {	  }    catch(Throwable    e,    INVALID_SOURCE)    {    	non-compiled	[CE]  	56	None	replace
359	[BUG]  [BUGGY]  }  catch(Exception  e,  INVALID_SOURCE)  {  [CE]  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Exception  e,  INVALID_SOURCE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Exception  e,  INVALID_SOURCE)  {	  }    catch(Throwable    e,    INVALID_SOURCE)    {    	non-compiled	[CE]  	56	None	replace
360	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  curNode.getType()  ==  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  curNode.getType()  ==  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  curNode.getType()  ==  Token.NAME)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	75	None	replace
361	[BUG]  [BUGGY]  }  catch(Throwable  throws  IOException  &&  sourceName!=  null)  {  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  IOException  &&  sourceName!=  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  IOException  &&  sourceName!=  null)  {	  }    catch(Throwable    throws    IOException)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
362	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  curNode.getType()!=  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  curNode.getType()!=  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  curNode.getType()!=  Token.NAME)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	60	None	replace
363	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  NodeUtil.isFunction(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  NodeUtil.isFunction(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  NodeUtil.isFunction(root))  {	  }    else    if(unexpectedException    instanceof    IllegalArgumentException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
364	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  nodeTypes.containsKey(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    IllegalArgumentException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
365	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  sourceName!=  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  sourceName!=  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  sourceName!=  null)  {	  }    else    if(unexpectedException    instanceof    IllegalArgumentException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
366	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  NodeUtil.isLiteralValue(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  NodeUtil.isLiteralValue(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  NodeUtil.isLiteralValue(root))  {	  }    else    if(unexpectedException    instanceof    IllegalArgumentException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
367	[BUG]  [BUGGY]  }  catch(Throwable  throws  Exception  &   ")  {  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  Exception  &   ")  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  Exception  &   ")  {	  }    catch(Throwable    throws    Exception)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  outputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  outputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  outputId);	  NodeTraversal.traverse(compiler,    root,    scopeCreator);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	55	None	replace
369	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.equals( "* "))  {  [CE]  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  inputId.equals( "* "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.equals( "* "))  {	  }    else    if(inputId    ==    null    ||    inputId.equals(   "   "))    {    	non-compiled	[CE]  	23	None	replace
370	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals( "node "))  {  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals( "node "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.equals( "node "))  {	  }    else    if(inputId    ==    null    ||    inputId.equals(   "   "))    {    	non-compiled	[CE]  	23	None	replace
371	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(sourceName,  cb);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(sourceName,  cb);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(sourceName,  cb);	  NodeUtil.copyCurrentScope(curNode,    cb);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	29	None	replace
372	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  UnsupportedOperationException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  UnsupportedOperationException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  UnsupportedOperationException)  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
373	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  UnsupportedOperationException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  UnsupportedOperationException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  UnsupportedOperationException)  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
374	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  IllegalStateException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  IllegalStateException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  IllegalStateException)  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
375	[BUG]  [BUGGY]  Node  parent  =  curNode.removeFirstChild();  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.removeFirstChild();  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.removeFirstChild();	  Node    parent    =    curNode.getParent();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	68	None	replace
376	[BUG]  [BUGGY]  Node  parent  =  curNode.cloneTree();  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.cloneTree();  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.cloneTree();	  Node    parent    =    curNode.getParent();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	68	None	replace
377	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  sourceName!=  null)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  sourceName!=  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  sourceName!=  null)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName!=    null)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	48	None	replace
378	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.EXPR_RESULT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  &&  inputId.getType()  ==  Token.EXPR_RESULT)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	74	None	replace
379	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()!=  Token.EXPR_RESULT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  &&  inputId.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  &&  inputId.getType()!=  Token.EXPR_RESULT)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	74	None	replace
380	[BUG]  [BUGGY]  }  catch(ThrowsException  w)  {  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(ThrowsException  w)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(ThrowsException  w)  {	  }    catch(ThrowsException    t)    {    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
381	[BUG]  [BUGGY]  }  catch(ThrowsException  e,  NON_GLOBAL_ERROR)  {  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(ThrowsException  e,  NON_GLOBAL_ERROR)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(ThrowsException  e,  NON_GLOBAL_ERROR)  {	  }    catch(ThrowsException    e)    {    	non-compiled	[CE]  	11	None	replace
382	[BUG]  [BUGGY]  }  catch(ThrowsException  e,  UNKNOWN_SYMBOL_ERROR)  {  [CE]  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(ThrowsException  e,  UNKNOWN_SYMBOL_ERROR)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(ThrowsException  e,  UNKNOWN_SYMBOL_ERROR)  {	  }    catch(ThrowsException    e)    {    	non-compiled	[CE]  	11	None	replace
383	[BUG]  [BUGGY]  }  catch(ThrowsException  e,  UNKNOWN_EXPR_TYPE)  {  [CE]  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(ThrowsException  e,  UNKNOWN_EXPR_TYPE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(ThrowsException  e,  UNKNOWN_EXPR_TYPE)  {	  }    catch(ThrowsException    e)    {    	non-compiled	[CE]  	11	None	replace
384	[BUG]  [BUGGY]  }  catch(ThrowsException  e,  MISSING_SOURCE)  {  [CE]  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(ThrowsException  e,  MISSING_SOURCE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(ThrowsException  e,  MISSING_SOURCE)  {	  }    catch(ThrowsException    e)    {    	non-compiled	[CE]  	11	None	replace
385	[BUG]  [BUGGY]  }  catch(ThrowsException  e,  NON_GLOBAL_EXPR_RESULT)  {  [CE]  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(ThrowsException  e,  NON_GLOBAL_EXPR_RESULT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(ThrowsException  e,  NON_GLOBAL_EXPR_RESULT)  {	  }    catch(ThrowsException    e)    {    	non-compiled	[CE]  	11	None	replace
386	[BUG]  [BUGGY]  }  catch(ThrowsException  e,  UNKNOWN_EXPECTED)  {  [CE]  [FE]                                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(ThrowsException  e,  UNKNOWN_EXPECTED)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(ThrowsException  e,  UNKNOWN_EXPECTED)  {	  }    catch(ThrowsException    e)    {    	non-compiled	[CE]  	11	None	replace
387	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(parent,  n);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(parent,  n);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();  traverseBranch(parent,  n);	  Node    parent    =    curNode.getParent();    traverseBranch(parent,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	69	None	replace
388	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(parent,  this);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(parent,  this);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();  traverseBranch(parent,  this);	  Node    parent    =    curNode.getParent();    traverseBranch(parent,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	69	None	replace
389	[BUG]  [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(parent,  cb);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  curNode.getParent();  traverseBranch(parent,  cb);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  curNode.getParent();  traverseBranch(parent,  cb);	  Node    parent    =    curNode.getParent();    traverseBranch(parent,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	69	None	replace
390	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.SETPROP)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.SETPROP)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.SETPROP)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	50	None	replace
391	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.STRING)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.STRING)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.STRING)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	50	None	replace
392	[BUG]  [BUGGY]  }  catch(Throwable  throws  Exception,  MISSING_SOURCE)  {  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  Exception,  MISSING_SOURCE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  Exception,  MISSING_SOURCE)  {	  }    catch(Throwable    throws    Exception)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
393	[BUG]  [BUGGY]  }  catch(Throwable  throws  Throwable  e)  {  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  Throwable  e)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  Throwable  e)  {	  }    catch(Throwable    throws    Exception)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
394	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  n,  nodeTypes);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  n,  nodeTypes);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  n,  nodeTypes);	  NodeUtil.copyCurrentScope(curNode,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	30	None	replace
395	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "n "))  {  [CE]  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.equals( "n "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.equals( "n "))  {	  }    else    if(inputId!=    null    &&    inputId.equals(   "   "))    {    	non-compiled	[CE]  	72	None	replace
396	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  NodeUtil.isFunction(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  NodeUtil.isFunction(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnexpectedException  &&  NodeUtil.isFunction(curNode))  {	  }    else    if(unexpectedException    instanceof    UnexpectedException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
397	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  nodeTypes.contains(n.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnexpectedException  &&  nodeTypes.contains(n.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnexpectedException  &&  nodeTypes.contains(n.getString()))  {	  }    else    if(unexpectedException    instanceof    UnexpectedException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	13	None	replace
398	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  MISSING_SOURCE,  sourceName));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  MISSING_SOURCE,  sourceName));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.report(JSError.make(sourceName,  curNode,  MISSING_SOURCE,  sourceName));	  Context.codeBug();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	67	None	replace
399	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  MISSING_SOURCE,  inputId));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  MISSING_SOURCE,  inputId));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.report(JSError.make(sourceName,  curNode,  MISSING_SOURCE,  inputId));	  Context.codeBug();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	67	None	replace
400	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  NodeUtil.isExpressionNode(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  NodeUtil.isExpressionNode(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&  NodeUtil.isExpressionNode(curNode))  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
401	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.contains(n.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.contains(n.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&  nodeTypes.contains(n.getString()))  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
402	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  NodeUtil.isFunction(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&  NodeUtil.isFunction(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&  NodeUtil.isFunction(curNode))  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
403	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&!include)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalStatementException  &&!include)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalStatementException  &&!include)  {	  }    else    if(unexpectedException    instanceof    IllegalStatementException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	18	None	replace
404	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  UnknownType)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  UnknownType)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  UnknownType)  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
405	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  UnknownFileException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  UnknownFileException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  UnknownFileException)  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
406	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  UnknownHostException)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  UnknownHostException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  UnknownHostException)  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
407	[BUG]  [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  IllegalStatement)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  IllegalStatement)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  instanceof  RuntimeException  ||  inputId  instanceof  IllegalStatement)  {	  }    else    if(inputId    instanceof    RuntimeException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	12	None	replace
408	[BUG]  [BUGGY]  }  else  if(inputId.equals( " "))  {  [CE]  [FE]            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId.equals( " "))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId.equals( " "))  {	  }    catch(Throwable    throws    UnexpectedException    e)    {    	non-compiled	[CE]  	41	None	replace
409	[BUG]  [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.CATCH  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.CATCH  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  ||  inputId.getType()  ==  Token.CATCH  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
410	[BUG]  [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()  ==  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()  ==  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  [Delete]  null  &&  inputId.getType()  ==  Token.CATCH)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
411	[BUG]  [BUGGY]  }  else  if(inputId  >>  null  &&  inputId.getType()  ==  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >>  null  &&  inputId.getType()  ==  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >>  null  &&  inputId.getType()  ==  Token.CATCH)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	24	None	replace
412	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( ",  curNode));  [CE]  unclosed  string  literal  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  RuntimeException( ",  curNode));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  new  RuntimeException( ",  curNode));	  NodeTraversal.traverse(compiler,    root,    new    RuntimeException(   "   "));    	non-compiled	[CE]  unclosed  string  literal	53	None	replace
413	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()!=  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()!=  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  ||  inputId.getType()!=  Token.CATCH)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	62	None	replace
414	[BUG]  [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()!=  Token.CATCH)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()!=  Token.CATCH)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  [Delete]  null  &&  inputId.getType()!=  Token.CATCH)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.CATCH)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	62	None	replace
415	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  NodeUtil.isExpressionNode(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  NodeUtil.isExpressionNode(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  NodeUtil.isExpressionNode(curNode))  {	  }    else    if(unexpectedException    instanceof    IllegalArgumentException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
416	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  nodeTypes.contains(n.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  nodeTypes.contains(n.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  nodeTypes.contains(n.getString()))  {	  }    else    if(unexpectedException    instanceof    IllegalArgumentException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
417	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  NodeUtil.isFunction(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  NodeUtil.isFunction(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  IllegalArgumentException  &&  NodeUtil.isFunction(curNode))  {	  }    else    if(unexpectedException    instanceof    IllegalArgumentException)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	16	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  n);	  NodeTraversal.traverse(compiler,    root,    scopeCreator);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	55	None	replace
419	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.isEmpty())  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.isEmpty())  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.isEmpty())  {	  }    else    if(inputId    ==    null    ||    inputId.hasChildren())    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	61	None	replace
420	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  cb.removeChild(parent);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  n.getParent();  cb.removeChild(parent);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  n.getParent();  cb.removeChild(parent);	  Node    parent    =    curNode.getParent();    cb.removeChild(parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	71	None	replace
421	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnexpectedException  &&  sourceName!=  null)  {  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  UnexpectedException  &&  sourceName!=  null)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnexpectedException  &&  sourceName!=  null)  {	  }    catch(Throwable    throws    UnexpectedException)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
422	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnexpectedException,  MISSING_SOURCE)  {  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  UnexpectedException,  MISSING_SOURCE)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnexpectedException,  MISSING_SOURCE)  {	  }    catch(Throwable    throws    UnexpectedException)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
423	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals(null)&&  NodeUtil.isFunction(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals(null)&&  NodeUtil.isFunction(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.equals(null)&&  NodeUtil.isFunction(inputId))  {	  }    else    if(inputId    ==    null    ||    inputId.equals(null))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	49	None	replace
424	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals(cfgs))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.equals(cfgs))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.equals(cfgs))  {	  }    else    if(inputId    ==    null    ||    inputId.equals(null))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	49	None	replace
425	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  UNKNOWN_EXPR_RESULT));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Context.report(JSError.make(sourceName,  curNode,  UNKNOWN_EXPR_RESULT));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Context.report(JSError.make(sourceName,  curNode,  UNKNOWN_EXPR_RESULT));	  Context.reportCodeChange();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	25	None	replace
426	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  cb,  this);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  cb,  this);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  cb,  this);	  NodeUtil.copyCurrentScope(curNode,    cb);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	29	None	replace
427	[BUG]  [BUGGY]  }  catch(Throwable  e,  UNKNOWN_SYNTHETIC)  {  [CE]  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  e,  UNKNOWN_SYNTHETIC)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  e,  UNKNOWN_SYNTHETIC)  {	  }    catch(Throwable    e,    INVALID_SOURCE)    {    	non-compiled	[CE]  	56	None	replace
428	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	75	None	replace
429	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  NodeUtil.isFunction(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  NodeUtil.isFunction(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  NodeUtil.isFunction(inputId))  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	75	None	replace
430	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(inputId))  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	75	None	replace
431	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  NodeUtil.hasCatch(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  NodeUtil.hasCatch(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  NodeUtil.hasCatch(inputId))  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	75	None	replace
432	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(inputId))  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	75	None	replace
433	[BUG]  [BUGGY]  }  else  if(included  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(included  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(included  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.containsKey(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.containsKey(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	47	None	replace
434	[BUG]  [BUGGY]  }  catch(UnsupportedOperationException  e)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(UnsupportedOperationException  e)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(UnsupportedOperationException  e)  {	  }    catch(NodeNotFoundException    e)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	8	None	replace
435	[BUG]  [BUGGY]  }  catch(MissingSourCEException  e)  {  [CE]  cannot  find  symbol  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(MissingSourCEException  e)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(MissingSourCEException  e)  {	  }    catch(NodeNotFoundException    e)    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MISSING_SOURCE);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MISSING_SOURCE);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  root,  MISSING_SOURCE);	  NodeTraversal.traverse(compiler,    root,    nodeTypes);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	51	None	replace
437	[BUG]  [BUGGY]  }  catch(Throwable  throws  IOException  &&  sourceName.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  IOException  &&  sourceName.length()  >  0)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  IOException  &&  sourceName.length()  >  0)  {	  }    catch(Throwable    throws    IOException)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
438	[BUG]  [BUGGY]  }  else  if(inclusion  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inclusion  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inclusion  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(sourceName))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	14	None	replace
439	[BUG]  [BUGGY]  }  else  if(include  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(include  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(include  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(sourceName))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	14	None	replace
440	[BUG]  [BUGGY]  }  else  if(included  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(included  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(included  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(sourceName))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(sourceName))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	14	None	replace
441	[BUG]  [BUGGY]  traverse(curNode,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  traverse(curNode,  null);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	traverse(curNode,  null);	  traverseBranch(root,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	27	None	replace
442	[BUG]  [BUGGY]  traverseFunction(curNode,  null);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  traverseFunction(curNode,  null);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	traverseFunction(curNode,  null);	  traverseBranch(root,    null);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	27	None	replace
443	[BUG]  [BUGGY]  }  catch(NumberFormatException  nfe)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(NumberFormatException  nfe)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NumberFormatException  nfe)  {	  }    catch(NodeNotFoundException    nfe)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	39	None	replace
444	[BUG]  [BUGGY]  cb.replaceChild(curNode,  new  Node(Token.EMPTY));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  cb.replaceChild(curNode,  new  Node(Token.EMPTY));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.replaceChild(curNode,  new  Node(Token.EMPTY));	  cb.reset();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	70	None	replace
445	[BUG]  [BUGGY]  cb.replaceChild(curNode,  traverseBranch(n,  scopeCreator));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  cb.replaceChild(curNode,  traverseBranch(n,  scopeCreator));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.replaceChild(curNode,  traverseBranch(n,  scopeCreator));	  cb.reset();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	70	None	replace
446	[BUG]  [BUGGY]  cb.replaceChild(curNode,  traverseBranch(root));  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  cb.replaceChild(curNode,  traverseBranch(root));  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	cb.replaceChild(curNode,  traverseBranch(root));	  cb.reset();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	70	None	replace
447	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  curNode.getType()  ==  Token.SCRIPT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  curNode.getType()  ==  Token.SCRIPT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  curNode.getType()  ==  Token.SCRIPT)  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    sourceName.length()    >    0)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	15	None	replace
448	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  curNode,  inputId);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  curNode,  inputId);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  curNode,  inputId);	  NodeUtil.copyCurrentScope(curNode,    curNode);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	54	None	replace
449	[BUG]  [BUGGY]  }  catch(Throwable  e,  UnsupportedOperationException.class)  {  [CE]  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  e,  UnsupportedOperationException.class)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  e,  UnsupportedOperationException.class)  {	  }    catch(Throwable    e,    MISSING_SOURCE)    {    	non-compiled	[CE]  	10	None	replace
450	[BUG]  [BUGGY]  }  catch(Throwable  e,  MISSING_SOURCE,  message)  {  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  e,  MISSING_SOURCE,  message)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  e,  MISSING_SOURCE,  message)  {	  }    catch(Throwable    e,    MISSING_SOURCE)    {    	non-compiled	[CE]  	10	None	replace
451	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()!=  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()!=  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  ||  inputId.getType()!=  Token.NAME)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	60	None	replace
452	[BUG]  [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()!=  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()!=  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  [Delete]  null  &&  inputId.getType()!=  Token.NAME)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	60	None	replace
453	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  UnknownTypeException  &&  NodeUtil.isLiteralValue(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  UnknownTypeException  &&  NodeUtil.isLiteralValue(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  UnknownTypeException  &&  NodeUtil.isLiteralValue(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isLiteralValue(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	45	None	replace
454	[BUG]  [BUGGY]  }  catch(NumberFormatException  e)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(NumberFormatException  e)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NumberFormatException  e)  {	  }    catch(RuntimeException    e)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	9	None	replace
455	[BUG]  [BUGGY]  }  catch(Throwable  msg,  UNKNOWN_EXPR_RESULT)  {  [CE]  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  msg,  UNKNOWN_EXPR_RESULT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  msg,  UNKNOWN_EXPR_RESULT)  {	  }    catch(Throwable    msg,    unexpectedException)    {    	non-compiled	[CE]  	40	None	replace
456	[BUG]  [BUGGY]  }  else  if(cb  throws  UnexpectedException)  {  [CE]  [FE]              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(cb  throws  UnexpectedException)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(cb  throws  UnexpectedException)  {	  }    catch(Throwable    throws    UnexpectedException    cb)    {    	non-compiled	[CE]  	80	None	replace
457	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.equals(null))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  &&  inputId.equals(null))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  &&  inputId.equals(null))  {	  }    else    if(inputId!=    null    ||    inputId.equals(null))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	57	None	replace
458	[BUG]  [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.equals(null))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.equals(null))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  [Delete]  null  &&  inputId.equals(null))  {	  }    else    if(inputId!=    null    ||    inputId.equals(null))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	57	None	replace
459	[BUG]  [BUGGY]  }  else  if(inputId  >>  null  &&  inputId.equals(null))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >>  null  &&  inputId.equals(null))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >>  null  &&  inputId.equals(null))  {	  }    else    if(inputId!=    null    ||    inputId.equals(null))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	57	None	replace
460	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  curNode,  this);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeTraversal.traverse(compiler,  curNode,  this);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeTraversal.traverse(compiler,  curNode,  this);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	52	None	replace
461	[BUG]  [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()  ==  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()  ==  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  [Delete]  null  &&  inputId.getType()  ==  Token.NAME)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	21	None	replace
462	[BUG]  [BUGGY]  }  else  if(inputId  >>  null  &&  inputId.getType()  ==  Token.NAME)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >>  null  &&  inputId.getType()  ==  Token.NAME)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >>  null  &&  inputId.getType()  ==  Token.NAME)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	21	None	replace
463	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.SCRIPT  ||  inputId.getType()  ==  Token.EXPR_RESULT)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.SCRIPT  ||  inputId.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.SCRIPT  ||  inputId.getType()  ==  Token.EXPR_RESULT)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	76	None	replace
464	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.SCRIPT  ||  inputId.getType()  ==  Token.BLOCK)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.SCRIPT  ||  inputId.getType()  ==  Token.BLOCK)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.SCRIPT  ||  inputId.getType()  ==  Token.BLOCK)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	76	None	replace
465	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.SCRIPT  ||  inputId.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.SCRIPT  ||  inputId.getType()  ==  Token.FUNCTION)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.SCRIPT  ||  inputId.getType()  ==  Token.FUNCTION)  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	76	None	replace
466	[BUG]  [BUGGY]  }  catch(NoSuchElementException  e)  {  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(NoSuchElementException  e)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NoSuchElementException  e)  {	  }    catch(Exception    e)    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
467	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  parent,  n);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  parent,  n);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  parent,  n);	  NodeUtil.copyCurrentScope(curNode,    parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	31	None	replace
468	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  parent,  nodeTypes);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  parent,  nodeTypes);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  parent,  nodeTypes);	  NodeUtil.copyCurrentScope(curNode,    parent);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	31	None	replace
469	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.GETPROP  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.GETPROP  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.GETPROP  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(inputId    ==    null    ||    inputId.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	50	None	replace
470	[BUG]  [BUGGY]  }  else  if(includeException  &&  nodeTypes.contains(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(includeException  &&  nodeTypes.contains(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(includeException  &&  nodeTypes.contains(inputId))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(inputId))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	17	None	replace
471	[BUG]  [BUGGY]  }  catch(ThrowsException  e,  UNKNOWN_EXPR_RESULT)  {  [CE]  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(ThrowsException  e,  UNKNOWN_EXPR_RESULT)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(ThrowsException  e,  UNKNOWN_EXPR_RESULT)  {	  }    catch(ThrowsException    e)    {    	non-compiled	[CE]  	11	None	replace
472	[BUG]  [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()  ==  Token.GETPROP)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()  ==  Token.GETPROP)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  [Delete]  null  &&  inputId.getType()  ==  Token.GETPROP)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	58	None	replace
473	[BUG]  [BUGGY]  }  else  if(inputId  >>  null  &&  inputId.getType()  ==  Token.GETPROP)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >>  null  &&  inputId.getType()  ==  Token.GETPROP)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >>  null  &&  inputId.getType()  ==  Token.GETPROP)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	58	None	replace
474	[BUG]  [BUGGY]  }  catch(NoSuchElementException  t)  {  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(NoSuchElementException  t)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NoSuchElementException  t)  {	  }    catch(IOException    t)    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
475	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.mayHaveSideEffects(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.mayHaveSideEffects(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.mayHaveSideEffects(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isExpressionNode(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	46	None	replace
476	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isStatementBlock(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isStatementBlock(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isStatementBlock(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isExpressionNode(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	46	None	replace
477	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.VAR  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.VAR  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.VAR  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	77	None	replace
478	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.VAR  &&  NodeUtil.hasCatch(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.VAR  &&  NodeUtil.hasCatch(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.VAR  &&  NodeUtil.hasCatch(inputId))  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	77	None	replace
479	[BUG]  [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.VAR  &&  NodeUtil.isFunction(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.VAR  &&  NodeUtil.isFunction(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId!=  null  &&  inputId.getType()  ==  Token.VAR  &&  NodeUtil.isFunction(inputId))  {	  }    else    if(inputId!=    null    &&    inputId.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	77	None	replace
480	[BUG]  [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()  ==  Token.FUNCTION)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  [Delete]  null  &&  inputId.getType()  ==  Token.FUNCTION)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	22	None	replace
481	[BUG]  [BUGGY]  }  else  if(inputId  >>  null  &&  inputId.getType()  ==  Token.FUNCTION)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >>  null  &&  inputId.getType()  ==  Token.FUNCTION)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >>  null  &&  inputId.getType()  ==  Token.FUNCTION)  {	  }    else    if(inputId!=    null    ||    inputId.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	22	None	replace
482	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(curNode,  inputId,  n);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  NodeUtil.copyCurrentScope(curNode,  inputId,  n);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	NodeUtil.copyCurrentScope(curNode,  inputId,  n);	  NodeUtil.copyCurrentScope(curNode,    inputId);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	26	None	replace
483	[BUG]  [BUGGY]  Node  parent  =  root.getParent();  [CE]  'try'  without  'catch'  or  'finally'  [FE]                            RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  Node  parent  =  root.getParent();  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	Node  parent  =  root.getParent();	  Node    parent    =    curNode.getParent();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	68	None	replace
484	[BUG]  [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()!=  Token.VAR)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  >=  null  ||  inputId.getType()!=  Token.VAR)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  >=  null  ||  inputId.getType()!=  Token.VAR)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
485	[BUG]  [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()!=  Token.VAR)  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                          RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  [Delete]  null  &&  inputId.getType()!=  Token.VAR)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  [Delete]  null  &&  inputId.getType()!=  Token.VAR)  {	  }    else    if(inputId    ==    null    ||    inputId.getType()!=    Token.VAR)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
486	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isGetProp(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isGetProp(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isGetProp(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	44	None	replace
487	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isCatch(root))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isCatch(root))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isCatch(root))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(root))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	44	None	replace
488	[BUG]  [BUGGY]  }  catch(Throwable  throws  UnexpectedException(inputId),  MISSING_SOURCE);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(Throwable  throws  UnexpectedException(inputId),  MISSING_SOURCE);  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(Throwable  throws  UnexpectedException(inputId),  MISSING_SOURCE);	  }    catch(Throwable    throws    UnexpectedException(inputId))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
489	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.NAME  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.NAME  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.NAME  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  }    else    if(inputId    ==    null    ||    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	19	None	replace
490	[BUG]  [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(inputId))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(inputId))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(inputId  ==  null  ||  inputId.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(inputId))  {	  }    else    if(inputId    ==    null    ||    inputId.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	19	None	replace
491	[BUG]  [BUGGY]  }  else  if(includeException  &&  nodeTypes.contains(n.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(includeException  &&  nodeTypes.contains(n.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(includeException  &&  nodeTypes.contains(n.getString()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(n.getString()))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
492	[BUG]  [BUGGY]  }  else  if(include  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(include  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(include  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(n.getString()))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
493	[BUG]  [BUGGY]  }  else  if(included  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString()))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(included  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString()))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(included  ||  unexpectedException  instanceof  RuntimeException  &&  nodeTypes.contains(n.getString()))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    nodeTypes.contains(n.getString()))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	64	None	replace
494	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isCatch(curNode))  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                      RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isCatch(curNode))  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isCatch(curNode))  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	65	None	replace
495	[BUG]  [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(curNode)||!inputId.isEmpty())  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                        RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(curNode)||!inputId.isEmpty())  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  else  if(unexpectedException  instanceof  RuntimeException  &&  NodeUtil.isFunction(curNode)||!inputId.isEmpty())  {	  }    else    if(unexpectedException    instanceof    RuntimeException    &&    NodeUtil.isFunction(curNode))    {    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	65	None	replace
496	[BUG]  [BUGGY]  }  catch(NumberFormatException  t)  {  [CE]  cannot  find  symbol  unexpectedException  [FE]                RuntimeException      [CONTEXT]      public  void  traverse(Node  root)  {  try  {  inputId  =  NodeUtil.getInputId(root);  sourceName  =       "     ";  curNode  =  root;  pushScope(root);  traverseBranch(root,  null);  popScope();      [BUGGY]  }  catch(NumberFormatException  t)  {  [BUGGY]      throwUnexpectedException(unexpectedException);  }  }  [CLASS]  NodeTraversal  AbstractPostOrderCallback  AbstractScopedCallback  AbstractShallowCallback  AbstractShallowStatementCallback  AbstractNodeTypePruningCallback  [METHOD]  traverse  [RETURN_TYPE]  void  Node  root  [VARIABLES]  ScopedCallback  scopeCallback  AbstractCompiler  compiler  Callback  callback  cb  Set  nodeTypes  boolean  include  DiagnosticType  NODE_TRAVERSAL_ERROR  Node  curNode  n  parent  root  InputId  inputId  ScopeCreator  scopeCreator  String  MISSING_SOURCE  label  message  sourceName  Deque  cfgs  scopeRoots  scopes  Exception  unexpectedException  	projects/Closure37/src/com/google/javascript/jscomp/NodeTraversal.java	1.0	279	279	1	replace	}  catch(NumberFormatException  t)  {	  }    catch(RuntimeException    t)    {    	non-compiled	[CE]  cannot  find  symbol  unexpectedException	3	None	replace
