bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!flags.process_closure_primitives)  {  if(!flags.process_closure_primitives)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.process_closure_primitives)  {  if(!flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.process_closure_primitives)    {    if(!flags.process_closure_primitives)  {	  	non-compiled	[CE]  ';'  expected	2	None	add
2	[BUG]  [BUGGY]  if(!flags.process_closure_primitives)  {  If(!flags.process_closure_primitives)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.process_closure_primitives)  {  If(!flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.process_closure_primitives)    {    If(!flags.process_closure_primitives)  {	  	non-compiled	[CE]  ';'  expected	2	None	add
3	[BUG]  [BUGGY]  if(!flags.process_closure_primitives)  {  ||!flags.process_closure_primitives)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.process_closure_primitives)  {  ||!flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.process_closure_primitives)    {    ||!flags.process_closure_primitives)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
4	[BUG]  [BUGGY]  if(!flags.process_closure_primitives)  {  for(!flags.process_closure_primitives)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.process_closure_primitives)  {  for(!flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.process_closure_primitives)    {    for(!flags.process_closure_primitives)  {	  	non-compiled	[CE]  not  a  statement	2	None	add
5	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs)  {  if(!flags.use_only_custom_externs)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs)  {  if(!flags.use_only_custom_externs)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs)    {    if(!flags.use_only_custom_externs)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
6	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs)  {  If(!flags.use_only_custom_externs)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs)  {  If(!flags.use_only_custom_externs)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs)    {    If(!flags.use_only_custom_externs)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
7	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs)  {  ||!flags.use_only_custom_externs)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs)  {  ||!flags.use_only_custom_externs)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs)    {    ||!flags.use_only_custom_externs)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
8	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs)  {  for(!flags.use_only_custom_externs)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs)  {  for(!flags.use_only_custom_externs)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs)    {    for(!flags.use_only_custom_externs)  {	  	non-compiled	[CE]  not  a  statement	11	None	add
9	[BUG]  [BUGGY]  if(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  if(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  if(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.process_closure_primitives    ||    flags.process_closure_primitives)    {    if(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
10	[BUG]  [BUGGY]  if(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  If(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  If(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.process_closure_primitives    ||    flags.process_closure_primitives)    {    If(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
11	[BUG]  [BUGGY]  if(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  if(flags.process_closure_primits  ||  flags.process_closure_primitives)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  if(flags.process_closure_primits  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.process_closure_primitives    ||    flags.process_closure_primitives)    {    if(flags.process_closure_primits  ||  flags.process_closure_primitives)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
12	[BUG]  [BUGGY]  if(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  if(flags.process_closure_primitives  ||  flags.process_closure_primits)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  if(flags.process_closure_primitives  ||  flags.process_closure_primits)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.process_closure_primitives    ||    flags.process_closure_primitives)    {    if(flags.process_closure_primitives  ||  flags.process_closure_primits)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  &&  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	add	if(!flags.use_only_custom_externs  &&  flags.process_closure_primitives)  {	  if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
14	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs  &&  flags.process_closure_primitives)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  &&  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs  &&  flags.process_closure_primitives)  {	  if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.use_only_custom_externs  &&  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	add	if(flags.use_only_custom_externs  &&  flags.process_closure_primitives)  {	  if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
16	[BUG]  [BUGGY]  if(flags.use_only_custom_externs  &&  flags.process_closure_primitives)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.use_only_custom_externs  &&  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.use_only_custom_externs  &&  flags.process_closure_primitives)  {	  if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	add	if(flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {	  if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
18	[BUG]  [BUGGY]  if(flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {	  if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
19	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.closurePass)  {  [CE]  cannot  find  symbol  closurePass  [FE]          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.closurePass)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs  ||  flags.closurePass)  {	  if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  closurePass	14	None	replace
20	[BUG]  [BUGGY]  for(FormattingOption  wLevel  :  flags.warning_level)  {  level.setDebugOptionsForWarningLevel(options);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  for(FormattingOption  wLevel  :  flags.warning_level)  {  level.setDebugOptionsForWarningLevel(options);  }  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	for(FormattingOption  wLevel  :  flags.warning_level)  {  level.setDebugOptionsForWarningLevel(options);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
21	[BUG]  [BUGGY]  for(FormattingOption  wLevel  :  flags.warning_level)  {  wLevel.applyToOptions(options);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  for(FormattingOption  wLevel  :  flags.warning_level)  {  wLevel.applyToOptions(options);  }  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	for(FormattingOption  wLevel  :  flags.warning_level)  {  wLevel.applyToOptions(options);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
22	[BUG]  [BUGGY]  for(FormattingOption  wLevel  :  flags.warning_level)  {  wLevel.setOptionsForWarningLevel(options);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  for(FormattingOption  wLevel  :  flags.warning_level)  {  wLevel.setOptionsForWarningLevel(options);  }  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	for(FormattingOption  wLevel  :  flags.warning_level)  {  wLevel.setOptionsForWarningLevel(options);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
23	[BUG]  [BUGGY]  initOptionsFromFlags(options);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  initOptionsFromFlags(options);  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	initOptionsFromFlags(options);	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
24	[BUG]  [BUGGY]  for(FormattingOption  wLevel  :  flags.warning_level)  {  options.closurePass  =  true;  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  for(FormattingOption  wLevel  :  flags.warning_level)  {  options.closurePass  =  true;  }  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	for(FormattingOption  wLevel  :  flags.warning_level)  {  options.closurePass  =  true;  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.use_only_custom_externs)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	add	if(flags.use_only_custom_externs)  {	  if(!flags.use_only_custom_externs)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
26	[BUG]  [BUGGY]  if(flags.use_only_custom_externs)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.use_only_custom_externs)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.use_only_custom_externs)  {	  if(!flags.use_only_custom_externs)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
27	[BUG]  [BUGGY]  if(!flags.closurePass)  {  [CE]  cannot  find  symbol  closurePass  [FE]      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.closurePass)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.closurePass)  {	  if(!flags.use_only_custom_externs)    {    	non-compiled	[CE]  cannot  find  symbol  closurePass	12	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  ||!flags.use_only_custom_externs)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	add	if(!flags.use_only_custom_externs  ||!flags.use_only_custom_externs)  {	  if(!flags.use_only_custom_externs)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
29	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs  ||!flags.use_only_custom_externs)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  ||!flags.use_only_custom_externs)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs  ||!flags.use_only_custom_externs)  {	  if(!flags.use_only_custom_externs)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.use_only_custom_externs  ||!flags.use_only_custom_externs)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	add	if(flags.use_only_custom_externs  ||!flags.use_only_custom_externs)  {	  if(!flags.use_only_custom_externs)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
31	[BUG]  [BUGGY]  if(flags.use_only_custom_externs  ||!flags.use_only_custom_externs)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.use_only_custom_externs  ||!flags.use_only_custom_externs)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.use_only_custom_externs  ||!flags.use_only_custom_externs)  {	  if(!flags.use_only_custom_externs)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
32	[BUG]  [BUGGY]  if(process_closure_primitives  ||  flags.pass  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  process_closure_primitives  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(process_closure_primitives  ||  flags.pass  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(process_closure_primitives  ||  flags.pass  ||  flags.process_closure_primitives)  {	  if(flags.pass    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  process_closure_primitives	9	None	replace
33	[BUG]  [BUGGY]  if(factory.pass  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  factory  [FE]          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(factory.pass  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(factory.pass  ||  flags.process_closure_primitives)  {	  if(flags.pass    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  factory	9	None	replace
34	[BUG]  [BUGGY]  if(flags.pass  ||  flags.prototype_closure_primitives)  {  [CE]  cannot  find  symbol  pass  [FE]            AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.pass  ||  flags.prototype_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.pass  ||  flags.prototype_closure_primitives)  {	  if(flags.pass    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  pass	9	None	replace
35	[BUG]  [BUGGY]  if(options.pass  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  pass  [FE]              AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(options.pass  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(options.pass  ||  flags.process_closure_primitives)  {	  if(flags.pass    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  pass	9	None	replace
36	[BUG]  [BUGGY]  if(flags.process_closure_primitives  ||  flags.compute_closure_primitives)  {  [CE]  cannot  find  symbol  compute_closure_primitives  [FE]          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.process_closure_primitives  ||  flags.compute_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.process_closure_primitives  ||  flags.compute_closure_primitives)  {	  if(flags.compute_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  compute_closure_primitives	10	None	replace
37	[BUG]  [BUGGY]  if(factory.compute_closure_primitives  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  factory  [FE]            AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(factory.compute_closure_primitives  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(factory.compute_closure_primitives  ||  flags.process_closure_primitives)  {	  if(flags.compute_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  factory	10	None	replace
38	[BUG]  [BUGGY]  if(flags.closure_primitives  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  closure_primitives  [FE]              AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.closure_primitives  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.closure_primitives  ||  flags.process_closure_primitives)  {	  if(flags.compute_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  closure_primitives	10	None	replace
39	[BUG]  [BUGGY]  if(flags.compute_closure_primitives  ||  flags.prototype_closure_primitives)  {  [CE]  cannot  find  symbol  compute_closure_primitives  [FE]                AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.compute_closure_primitives  ||  flags.prototype_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.compute_closure_primitives  ||  flags.prototype_closure_primitives)  {	  if(flags.compute_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  compute_closure_primitives	10	None	replace
40	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
41	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  If(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  If(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    If(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
42	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  if(!flags.used_only_custom_externs  ||  flags.process_closure_primitives)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  if(!flags.used_only_custom_externs  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    if(!flags.used_only_custom_externs  ||  flags.process_closure_primitives)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
43	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  ||  flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  ||  flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    ||  flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
44	[BUG]  [BUGGY]  if(factory_closure_primitives  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  factory_closure_primitives  [FE]              AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(factory_closure_primitives  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(factory_closure_primitives  ||  flags.process_closure_primitives)  {	  if(process_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  factory_closure_primitives	6	None	replace
45	[BUG]  [BUGGY]  if(compiler_phase_ordering  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  compiler_phase_ordering  [FE]                AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(compiler_phase_ordering  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(compiler_phase_ordering  ||  flags.process_closure_primitives)  {	  if(process_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  compiler_phase_ordering	6	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.print_pass_graph  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	add	if(flags.print_pass_graph  ||  flags.process_closure_primitives)  {	  if(process_closure_primitives    ||    flags.process_closure_primitives)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
47	[BUG]  [BUGGY]  if(flags.print_pass_graph  ||  flags.process_closure_primitives)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.print_pass_graph  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.print_pass_graph  ||  flags.process_closure_primitives)  {	  if(process_closure_primitives    ||    flags.process_closure_primitives)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
48	[BUG]  [BUGGY]  if(!flags.closurePass  ||!process_closure_primitives)  {  [CE]  cannot  find  symbol  closurePass  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.closurePass  ||!process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.closurePass  ||!process_closure_primitives)  {	  if(!flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  closurePass	3	None	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(options.closurePass)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	add	if(options.closurePass)  {	  if(flags.closurePass)    {    	compilable	  [FE]  AssertionFailedError  	1	1	replace
50	[BUG]  [BUGGY]  if(options.closurePass)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(options.closurePass)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(options.closurePass)  {	  if(flags.closurePass)    {    	compilable	  [FE]  AssertionFailedError  	1	1	replace
51	[BUG]  [BUGGY]  if(flags.closurePass  ||  flags.warning_level)  {  [CE]  cannot  find  symbol  closurePass  [FE]          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.closurePass  ||  flags.warning_level)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.closurePass  ||  flags.warning_level)  {	  if(flags.closurePass)    {    	non-compiled	[CE]  cannot  find  symbol  closurePass	1	None	replace
52	[BUG]  [BUGGY]  if(formattingOption.closurePass)  {  [CE]  cannot  find  symbol  formattingOption  [FE]            AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(formattingOption.closurePass)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(formattingOption.closurePass)  {	  if(flags.closurePass)    {    	non-compiled	[CE]  cannot  find  symbol  formattingOption	1	None	replace
53	[BUG]  [BUGGY]  if(flags.closurePass  ||  flags.debug)  {  [CE]  cannot  find  symbol  closurePass  [FE]              AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.closurePass  ||  flags.debug)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.closurePass  ||  flags.debug)  {	  if(flags.closurePass)    {    	non-compiled	[CE]  cannot  find  symbol  closurePass	1	None	replace
54	[BUG]  [BUGGY]  if(flags.pass  ||  flags.pass)  {  [CE]  cannot  find  symbol  pass  [FE]                AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.pass  ||  flags.pass)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.pass  ||  flags.pass)  {	  if(flags.pass)    {    	non-compiled	[CE]  cannot  find  symbol  pass	7	None	replace
55	[BUG]  [BUGGY]  if(flags.pass  ||  flags.closurePass)  {  [CE]  cannot  find  symbol  pass  [FE]                  AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.pass  ||  flags.closurePass)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.pass  ||  flags.closurePass)  {	  if(flags.pass)    {    	non-compiled	[CE]  cannot  find  symbol  pass	7	None	replace
56	[BUG]  [BUGGY]  if(!flags.pass)  {  [CE]  cannot  find  symbol  pass  [FE]                    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.pass)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.pass)  {	  if(flags.pass)    {    	non-compiled	[CE]  cannot  find  symbol  pass	7	None	replace
57	[BUG]  [BUGGY]  if(flags.closurePass  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  closurePass  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.closurePass  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.closurePass  ||  flags.process_closure_primitives)  {	  if(flags.process_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  closurePass	5	None	replace
58	[BUG]  [BUGGY]  if(flags.closure_pass  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  closure_pass  [FE]      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.closure_pass  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.closure_pass  ||  flags.process_closure_primitives)  {	  if(flags.process_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  closure_pass	5	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.process_closure_primitives  &&  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	add	if(flags.process_closure_primitives  &&  flags.process_closure_primitives)  {	  if(flags.process_closure_primitives    ||    flags.process_closure_primitives)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
60	[BUG]  [BUGGY]  if(flags.process_closure_primitives  &&  flags.process_closure_primitives)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.process_closure_primitives  &&  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.process_closure_primitives  &&  flags.process_closure_primitives)  {	  if(flags.process_closure_primitives    ||    flags.process_closure_primitives)    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
61	[BUG]  [BUGGY]  if(flags.pass  ==  0  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  pass  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.pass  ==  0  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.pass  ==  0  ||  flags.process_closure_primitives)  {	  if(flags.process_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  pass	5	None	replace
62	[BUG]  [BUGGY]  if(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  for(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  for(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.process_closure_primitives    ||    flags.process_closure_primitives)    {    for(flags.process_closure_primitives  ||  flags.process_closure_primitives)  {	  	non-compiled	[CE]  not  a  statement	4	None	add
63	[BUG]  [BUGGY]  if(!flags.process_closure_primitives)  {  AssertionFailedError  <=!flags.process_closure_primitives)  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.process_closure_primitives)  {  AssertionFailedError  <=!flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.process_closure_primitives)    {    AssertionFailedError  <=!flags.process_closure_primitives)  {	  	non-compiled	[CE]  not  a  statement	2	None	add
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  ||!flags.debug)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	add	if(!flags.use_only_custom_externs  ||!flags.debug)  {	  if(!flags.use_only_custom_externs)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
65	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs  ||!flags.debug)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  ||!flags.debug)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs  ||!flags.debug)  {	  if(!flags.use_only_custom_externs)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
66	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs)  {  AssertionFailedError  <=!flags.use_only_custom_externs)  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs)  {  AssertionFailedError  <=!flags.use_only_custom_externs)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs)    {    AssertionFailedError  <=!flags.use_only_custom_externs)  {	  	non-compiled	[CE]  not  a  statement	11	None	add
67	[BUG]  [BUGGY]  if(!flags.closurePass  ||!flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  closurePass  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.closurePass  ||!flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.closurePass  ||!flags.process_closure_primitives)  {	  if(!flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  closurePass	3	None	replace
68	[BUG]  [BUGGY]  if(!flags.closure_pass  ||!flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  closure_pass  [FE]      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.closure_pass  ||!flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.closure_pass  ||!flags.process_closure_primitives)  {	  if(!flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  closure_pass	3	None	replace
69	[BUG]  [BUGGY]  if(!flags.compute_closure_primitives)  {  [CE]  cannot  find  symbol  compute_closure_primitives  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.compute_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.compute_closure_primitives)  {	  if(!flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  compute_closure_primitives	3	None	replace
70	[BUG]  [BUGGY]  if(factory_pass  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  factory_pass  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(factory_pass  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(factory_pass  ||  flags.process_closure_primitives)  {	  if(flags.pass    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  factory_pass	9	None	replace
71	[BUG]  [BUGGY]  if(formattingOption!=  null)  {  for(FormattingOption  logging_level  :  flags.logging_level)  {  level.setDebugOptionsForCompilationLevel(options);  }  [CE]  cannot  find  symbol  formattingOption  [FE]                  AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(formattingOption!=  null)  {  for(FormattingOption  logging_level  :  flags.logging_level)  {  level.setDebugOptionsForCompilationLevel(options);  }  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(formattingOption!=  null)  {  for(FormattingOption  logging_level  :  flags.logging_level)  {  level.setDebugOptionsForCompilationLevel(options);  }	      	non-compiled	[CE]  cannot  find  symbol  formattingOption	8	None	replace
72	[BUG]  [BUGGY]  if(formattingOption!=  null)  {  for(FormattingOption  logging_level  :  flags.logging_level)  {  level.setOptionsForCompilationLevel(options);  }  [CE]  cannot  find  symbol  formattingOption  [FE]                    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(formattingOption!=  null)  {  for(FormattingOption  logging_level  :  flags.logging_level)  {  level.setOptionsForCompilationLevel(options);  }  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(formattingOption!=  null)  {  for(FormattingOption  logging_level  :  flags.logging_level)  {  level.setOptionsForCompilationLevel(options);  }	      	non-compiled	[CE]  cannot  find  symbol  formattingOption	8	None	replace
73	[BUG]  [BUGGY]  for(FormattingOption  logging_level  :  flags.logging_level)  {  logging_level.setOptionsForCompilationLevel(options);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  for(FormattingOption  logging_level  :  flags.logging_level)  {  logging_level.setOptionsForCompilationLevel(options);  }  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	for(FormattingOption  logging_level  :  flags.logging_level)  {  logging_level.setOptionsForCompilationLevel(options);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
74	[BUG]  [BUGGY]  for(FormattingOption  logging_level  :  flags.logging_level)  {  level.setDebugOptionsForCompilationLevel(options);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  for(FormattingOption  logging_level  :  flags.logging_level)  {  level.setDebugOptionsForCompilationLevel(options);  }  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	for(FormattingOption  logging_level  :  flags.logging_level)  {  level.setDebugOptionsForCompilationLevel(options);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
75	[BUG]  [BUGGY]  for(FormattingOption  logging_level  :  flags.logging_level)  {  logging_level.applyToOptions(options);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  for(FormattingOption  logging_level  :  flags.logging_level)  {  logging_level.applyToOptions(options);  }  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	for(FormattingOption  logging_level  :  flags.logging_level)  {  logging_level.applyToOptions(options);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
76	[BUG]  [BUGGY]  if(flags.pass  ||  flags.compiler)  {  [CE]  cannot  find  symbol  pass  [FE]                AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.pass  ||  flags.compiler)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.pass  ||  flags.compiler)  {	  if(flags.pass)    {    	non-compiled	[CE]  cannot  find  symbol  pass	7	None	replace
77	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  for(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  for(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    for(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {	  	non-compiled	[CE]  not  a  statement	13	None	add
78	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  ||!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  ||!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    ||!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
79	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  if(!flags.use_only_custom_externs  ||  flags.process_closure_primits)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.process_closure_primitives)  {  if(!flags.use_only_custom_externs  ||  flags.process_closure_primits)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    if(!flags.use_only_custom_externs  ||  flags.process_closure_primits)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
80	[BUG]  [BUGGY]  if(flags.compute_closure_pass  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  compute_closure_pass  [FE]          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.compute_closure_pass  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.compute_closure_pass  ||  flags.process_closure_primitives)  {	  if(flags.compute_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  compute_closure_pass	10	None	replace
81	[BUG]  [BUGGY]  if(factory_closure_pass  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  factory_closure_pass  [FE]              AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(factory_closure_pass  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(factory_closure_pass  ||  flags.process_closure_primitives)  {	  if(process_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  factory_closure_pass	6	None	replace
82	[BUG]  [BUGGY]  if(flags.closurePass  ||  flags.compiler)  {  [CE]  cannot  find  symbol  closurePass  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.closurePass  ||  flags.compiler)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.closurePass  ||  flags.compiler)  {	  if(flags.closurePass)    {    	non-compiled	[CE]  cannot  find  symbol  closurePass	1	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  &&!flags.debug)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	add	if(!flags.use_only_custom_externs  &&!flags.debug)  {	  if(!flags.use_only_custom_externs)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
84	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs  &&!flags.debug)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  &&!flags.debug)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs  &&!flags.debug)  {	  if(!flags.use_only_custom_externs)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
85	[BUG]  [BUGGY]  if(!flags.debug)  {  level.setDebugOptionsForWarningLevel(options);  for  (FormattingOption  :  flags.formatting)  {  wLevel.applyToOptions(options);  }  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.debug)  {  level.setDebugOptionsForWarningLevel(options);  for  (FormattingOption  :  flags.formatting)  {  wLevel.applyToOptions(options);  }  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.debug)  {  level.setDebugOptionsForWarningLevel(options);  for  (FormattingOption  :  flags.formatting)  {  wLevel.applyToOptions(options);  }	      	non-compiled	[CE]  not  a  statement	8	None	replace
86	[BUG]  [BUGGY]  if(!flags.debug)  {  level.setDebugOptionsForWarningLevel(options);  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.debug)  {  level.setDebugOptionsForWarningLevel(options);  }  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.debug)  {  level.setDebugOptionsForWarningLevel(options);  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
87	[BUG]  [BUGGY]  if(!flags.debug)  {  level.setDebugOptionsForWarningLevel(options);  for  (FormattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.debug)  {  level.setDebugOptionsForWarningLevel(options);  for  (FormattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.debug)  {  level.setDebugOptionsForWarningLevel(options);  for  (FormattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }	      	non-compiled	[CE]  not  a  statement	8	None	replace
88	[BUG]  [BUGGY]  if(!flags.debug)  {  level.setDebugOptionsForWarningLevel(options);  for  (FormattingOption  :  flags.formatting)  {  wLevel.setOptionsForWarningLevel(options);  }  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.debug)  {  level.setDebugOptionsForWarningLevel(options);  for  (FormattingOption  :  flags.formatting)  {  wLevel.setOptionsForWarningLevel(options);  }  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.debug)  {  level.setDebugOptionsForWarningLevel(options);  for  (FormattingOption  :  flags.formatting)  {  wLevel.setOptionsForWarningLevel(options);  }	      	non-compiled	[CE]  not  a  statement	8	None	replace
89	[BUG]  [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.pass)  {  [CE]  cannot  find  symbol  pass  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.use_only_custom_externs  ||  flags.pass)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.use_only_custom_externs  ||  flags.pass)  {	  if(!flags.use_only_custom_externs    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  pass	14	None	replace
90	[BUG]  [BUGGY]  if(flags.closurePass  ||  flags.closurePass)  {  [CE]  cannot  find  symbol  closurePass  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.closurePass  ||  flags.closurePass)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.closurePass  ||  flags.closurePass)  {	  if(flags.closurePass)    {    	non-compiled	[CE]  cannot  find  symbol  closurePass	1	None	replace
91	[BUG]  [BUGGY]  if(!flags.pass  ||!process_closure_primitives)  {  [CE]  cannot  find  symbol  pass  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(!flags.pass  ||!process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(!flags.pass  ||!process_closure_primitives)  {	  if(!flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  pass	3	None	replace
92	[BUG]  [BUGGY]  if(flags.pass  ==  0  ||!flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  pass  [FE]      AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.pass  ==  0  ||!flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.pass  ==  0  ||!flags.process_closure_primitives)  {	  if(!flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  pass	3	None	replace
93	[BUG]  [BUGGY]  if(flags.pass  ==  0)  {  [CE]  cannot  find  symbol  pass  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.pass  ==  0)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.pass  ==  0)  {	  if(!flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  pass	3	None	replace
94	[BUG]  [BUGGY]  if(flags.pass!=  0  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  pass  [FE]    AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.pass!=  0  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.pass!=  0  ||  flags.process_closure_primitives)  {	  if(flags.process_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  pass	5	None	replace
95	[BUG]  [BUGGY]  if(compute_phase_ordering  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  compute_phase_ordering  [FE]              AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(compute_phase_ordering  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(compute_phase_ordering  ||  flags.process_closure_primitives)  {	  if(process_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  compute_phase_ordering	6	None	replace
96	[BUG]  [BUGGY]  if(this.process_closure_primitives  ||  flags.pass  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  process_closure_primitives  [FE]        AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(this.process_closure_primitives  ||  flags.pass  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(this.process_closure_primitives  ||  flags.pass  ||  flags.process_closure_primitives)  {	  if(flags.pass    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  process_closure_primitives	9	None	replace
97	[BUG]  [BUGGY]  if(flags.combine_closure_primitives  ||  flags.process_closure_primitives)  {  [CE]  cannot  find  symbol  combine_closure_primitives  [FE]          AssertionFailedError    [CONTEXT]    level.setOptionsForCompilationLevel(options);  if  (flags.debug)  {  level.setDebugOptionsForCompilationLevel(options);  }  WarningLevel  wLevel  =  flags.warning_level;  wLevel.setOptionsForWarningLevel(options);  for  (FormattingOption  formattingOption  :  flags.formatting)  {  formattingOption.applyToOptions(options);  }    [BUGGY]  if(flags.combine_closure_primitives  ||  flags.process_closure_primitives)  {  [BUGGY]    options.closurePass  =  true;  }  initOptionsFromFlags(options);  return  options;  }  [CLASS]  CommandLineRunner  Flags  BooleanOptionHandler  FormattingOption  [METHOD]  createOptions  [RETURN_TYPE]  CompilerOptions  [VARIABLES]  CompilationLevel  compilation_level  level  boolean  compute_phase_ordering  create_name_map_files  debug  print_ast  print_pass_graph  print_tree  process_closure_primitives  third_party  use_only_custom_externs  Set  FALSES  TRUES  WarningLevel  wLevel  warning_level  FormattingOption  PRETTY_PRINT  PRINT_INPUT_DELIMITER  formattingOption  CompilerOptions  options  List  define  externs  formatting  js  jscomp_error  jscomp_off  jscomp_warning  module  module_wrapper  processedArgs  String  arg  charset  create_source_map  js_output_file  logging_level  lowerParam  module_output_path_prefix  output_wrapper  output_wrapper_marker  param  property_map_input_file  property_map_output_file  value  variable_map_input_file  variable_map_output_file  Flags  flags  DevMode  jscomp_dev_mode  int  summary_detail_level  	projects/Closure101/src/com/google/javascript/jscomp/CommandLineRunner.java	0.2182178902359924	433	433	1	replace	if(flags.combine_closure_primitives  ||  flags.process_closure_primitives)  {	  if(flags.compute_closure_primitives    ||    flags.process_closure_primitives)    {    	non-compiled	[CE]  cannot  find  symbol  combine_closure_primitives	10	None	replace
