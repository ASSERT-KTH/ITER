bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(decPos  <  expPos)  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(decPos  <  expPos)  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(decPos  <  expPos)  {	  if(decPos    <    decPos)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  if(expPos  <  decPos)  {  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(expPos  <  decPos)  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(expPos  <  decPos)  {	  if(decPos    <    decPos)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E'  +  1);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E'  +  1);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E'  +  1);	      int    expPos    =    str.indexOf('e')+    str.indexOf('E');    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
4	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E',  decPos);	      int    expPos    =    str.indexOf('e')+    str.indexOf('E');    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
5	[BUG]  [BUGGY]  nisipet  =  str.charAt(decPos  +  1);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  nisipet  =  str.charAt(decPos  +  1);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	nisipet  =  str.charAt(decPos  +  1);	      if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	      int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('e')+  1;	      int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('X')+  1;  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  str.indexOf('.')+  str.indexOf('X')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	int  expPos  =  str.indexOf('.')+  str.indexOf('X')+  1;	      int    expPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  expPos  =  str.indexOf('.',  expPos);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  expPos  =  str.indexOf('.',  expPos);	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
11	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('d')+  1;  [CE]  illegal  start  of  type  [FE]                  NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('d')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('d')+  1;	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
12	[BUG]  [BUGGY]  ||  expPos  <  str.length())  {  throw  new  NumberFormatException( " ");  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  ||  expPos  <  str.length())  {  throw  new  NumberFormatException( " ");  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	||  expPos  <  str.length())  {  throw  new  NumberFormatException( " ");	      if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");	      if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  decPos  =  str.indexOf('.',  expPos);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  decPos  =  str.indexOf('.',  expPos);	      Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  decPos  =  str.indexOf('.')+  str.indexOf('E')+  1;	      Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
16	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('E');  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('E');  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  decPos  =  str.indexOf('.')+  str.indexOf('E');	      Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
17	[BUG]  [BUGGY]  if(decPos  <  decPos  ||  expPos  >=  str.length())  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(decPos  <  decPos  ||  expPos  >=  str.length())  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(decPos  <  decPos  ||  expPos  >=  str.length())  {	  if(decPos    <    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  if(decPos  <  decPos  ||  expPos  ==  str.length())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(decPos  <  decPos  ||  expPos  ==  str.length())  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(decPos  <  decPos  ||  expPos  ==  str.length())  {	  if(decPos    <    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  2;	      int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  0;  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  0;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  0;	      int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
21	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	int  expPos  =  str.indexOf('E')+  str.indexOf('E')+  1;	      int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  if(decPos  ==  -1)  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(decPos  ==  -1)  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(decPos  ==  -1)  {	  if(decPos    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  if(expPos  >=  -1)  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(expPos  >=  -1)  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(expPos  >=  -1)  {	  if(decPos    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  if(decPos  <  expPos  ||  expPos  >  str.length())  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(decPos  <  expPos  ||  expPos  >  str.length())  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(decPos  <  expPos  ||  expPos  >  str.length())  {	  if(expPos    <    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  if(expPos  <  decPos  ||  expPos  >=  str.length())  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(expPos  <  decPos  ||  expPos  >=  str.length())  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(expPos  <  decPos  ||  expPos  >=  str.length())  {	  if(expPos    <    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  if(expPos  <  decPos  ||  expPos  ==  str.length())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(expPos  <  decPos  ||  expPos  ==  str.length())  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(expPos  <  decPos  ||  expPos  ==  str.length())  {	  if(expPos    <    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1  +  1;  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1  +  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')+  1  +  1;	      int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
28	[BUG]  [BUGGY]  if(decPos  >  decPos  ||  expPos  >  str.length())  {  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(decPos  >  decPos  ||  expPos  >  str.length())  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(decPos  >  decPos  ||  expPos  >  str.length())  {	  if(decPos    <    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
29	[BUG]  [BUGGY]  if(decPos  >  0  ||  expPos  >  str.length())  {  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(decPos  >  0  ||  expPos  >  str.length())  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(decPos  >  0  ||  expPos  >  str.length())  {	  if(decPos    <    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  decPos  =  str.indexOf('.',  decPos);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  decPos  =  str.indexOf('.',  decPos);	      Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
31	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('-');  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('-');  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  decPos  =  str.indexOf('.')+  str.indexOf('-');	      Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
32	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('a');  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('a');  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  decPos  =  str.indexOf('.')+  str.indexOf('a');	      Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
33	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  dec  =  str.substring(decPos  +  1,  expPos);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  dec  =  str.substring(decPos  +  1,  expPos);	      if(expPos    >    -1)    {    if(expPos    <    expPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
34	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos  +  1);  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  dec  =  str.substring(decPos  +  1);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  dec  =  str.substring(decPos  +  1);	      if(expPos    >    -1)    {    if(expPos    <    expPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
35	[BUG]  [BUGGY]  if(expPos  >  decPos  ||  expPos  >  str.length())  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(expPos  >  decPos  ||  expPos  >  str.length())  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(expPos  >  decPos  ||  expPos  >  str.length())  {	  if(expPos    <    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
36	[BUG]  [BUGGY]  if(decPos  <  -1)  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(decPos  <  -1)  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(decPos  <  -1)  {	  if(decPos    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
37	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('-');  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  str.indexOf('-');  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	int  expPos  =  str.indexOf('-');	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  expPos  =  str.indexOf('.',  decPos);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  expPos  =  str.indexOf('.',  decPos);	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('X')+  1;  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  expPos  =  str.indexOf('.')+  str.indexOf('X')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  expPos  =  str.indexOf('.')+  str.indexOf('X')+  1;	      Integer    expPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('X')+  1;  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  decPos  =  str.indexOf('.')+  str.indexOf('X')+  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  decPos  =  str.indexOf('.')+  str.indexOf('X')+  1;	      Integer    decPos    =    str.indexOf('.');    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
41	[BUG]  [BUGGY]  if(decPos  >  -1  &&  expPos  <  decPos  ||  expPos  >  str.length())  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(decPos  >  -1  &&  expPos  <  decPos  ||  expPos  >  str.length())  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(decPos  >  -1  &&  expPos  <  decPos  ||  expPos  >  str.length())  {	  if(expPos    <    decPos    ||    expPos    >    str.length())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  if(decPos  >  -1  &&  expPos  <  decPos)  {  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(decPos  >  -1  &&  expPos  <  decPos)  {  [BUGGY]      if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(decPos  >  -1  &&  expPos  <  decPos)  {	  if(decPos    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
43	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E')/  1;	      int    expPos    =    str.indexOf('e')+    str.indexOf('E')+    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
44	[BUG]  [BUGGY]  exp  =  str.substring(decPos  +  1,  expPos);  [CE]  illegal  start  of  type  [FE]            NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  exp  =  str.substring(decPos  +  1,  expPos);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	exp  =  str.substring(decPos  +  1,  expPos);	      if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  MutableString  exp  =  str.substring(decPos  +  1,  expPos);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  MutableString  exp  =  str.substring(decPos  +  1,  expPos);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	MutableString  exp  =  str.substring(decPos  +  1,  expPos);	      if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  MutableString  exp  =  str.substring(decPos,  expPos);  [CE]  illegal  start  of  type  [FE]                NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  MutableString  exp  =  str.substring(decPos,  expPos);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	MutableString  exp  =  str.substring(decPos,  expPos);	      if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
47	[BUG]  [BUGGY]  Integer  dec  =  str.substring(decPos,  expPos);  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  Integer  dec  =  str.substring(decPos,  expPos);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	Integer  dec  =  str.substring(decPos,  expPos);	      if(expPos    >    -1)    {    if(expPos    <    decPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [CE]  illegal  start  of  type  [FE]        NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  + "  is  not  a  valid  number.   ");  }	      if(expPos    >    -1)    {    if(expPos    <    expPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
49	[BUG]  [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [CE]  illegal  start  of  type  [FE]          NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	if(expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException( " ");  }	      if(expPos    >    -1)    {    if(expPos    <    expPos    ||    expPos    >    str.length())    {    throw    new    NumberFormatException(str    +   "    is    not    a    valid    number.   ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
50	[BUG]  [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E'  +  decPos);  [CE]  illegal  start  of  type  [FE]              NumberFormatException    [CONTEXT]    if  (str.startsWith(   "0x   ")  ||  str.startsWith(   "-0x   "))  {  return  createInteger(str);  }  char  lastChar  =  str.charAt(str.length()  -  1);  String  mant;  String  dec;  String  exp;  int  decPos  =  str.indexOf('.');  int  expPos  =  str.indexOf('e')  +  str.indexOf('E')  +  1;    [BUGGY]  int  expPos  =  str.indexOf('e')+  str.indexOf('E'  +  decPos);  [BUGGY]    if  (decPos  >  -1)  {  if  (expPos  >  -1)  {  if  (expPos  <  decPos  ||  expPos  >  str.length())  {  throw  new  NumberFormatException(str  +     "  is  not  a  valid  number.   ");  }  dec  =  str.substring(decPos  +  1,  expPos);  }  else  {  dec  =  str.substring(decPos  +  1);  }  mant  =  str.substring(0,  decPos);  [CLASS]  NumberUtils  [METHOD]  createNumber  [RETURN_TYPE]  Number  String  str  [VARIABLES]  Integer  INTEGER_MINUS_ONE  INTEGER_ONE  INTEGER_ZERO  Float  FLOAT_MINUS_ONE  FLOAT_ONE  FLOAT_ZERO  f  boolean  allZeros  Byte  BYTE_MINUS_ONE  BYTE_ONE  BYTE_ZERO  Long  LONG_MINUS_ONE  LONG_ONE  LONG_ZERO  char  lastChar  NumberFormatException  e  nfe  String  dec  exp  mant  numeric  str  Double  DOUBLE_MINUS_ONE  DOUBLE_ONE  DOUBLE_ZERO  d  Short  SHORT_MINUS_ONE  SHORT_ONE  SHORT_ZERO  int  decPos  expPos  	projects/Lang16/src/main/java/org/apache/commons/lang3/math/NumberUtils.java	0.5773502691896258	468	468	1	replace	int  expPos  =  str.indexOf('e')+  str.indexOf('E'  +  decPos);	      int    expPos    =    str.indexOf('e')+    str.indexOf('E');    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
