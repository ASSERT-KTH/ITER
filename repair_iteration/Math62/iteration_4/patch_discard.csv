increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, int  min  =  Math.min(minimum,  min);  ,int min = Math.min(maxEvaluations, maxEvaluations);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  totalEvaluations  =  1;  totalEvaluations  =  0;  int  starts  =  generator.getStartBounds();  ,int totalEvaluations = 1; totalEvaluations = 0;
increase failing tests,75,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.generator  =  generator,  optima  :  optimizer;  ,this.maxEvaluations = 0; this.starts = 0; this.totalEvaluations = 0;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts;  this.maxEvaluations  =  starts  +  1;  this.totalEvaluations  =  0;  ,this.starts = 0; this.maxEvaluations = starts + 1; this.totalEvaluations = 0;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts;  this.maxEvaluations  =  starts  +  1;  this.totalEvaluations  =  0;  ,this.starts = 1; this.maxEvaluations = starts + 1; this.totalEvaluations = 0;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  int  maxEvaluations  =  Math.min(maxEvaluations,  totalEvaluations  +  1);  ,final int maxEvaluations = Math.min(starts, totalEvaluations + 1);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.max(starts,  maxEvaluations);  this.totalEvaluations  =  Math.min(totalEvaluations,  totalEvaluations);  ,this.starts = Math.min(starts, 0);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, int  min  =  Math.min(min,  maxEvaluations);  ,int min = Math.min(starts, maxEvaluations);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, int  min  =  Math.min(min,  maxEvaluations);  ,int min = Math.min(maxEvaluations, starts);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  Math.max(0,  max,  startValue);  ,this.maxEvaluations = starts + 1; if(optima!= null) { optima = new UnivariateRealPointValuePair[starts]; }
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, this.totalEvaluations  =  totalEvaluations;  int  starts  =  max  -  startValue;  ,this.totalEvaluations = totalEvaluations; double starts = max - startValue;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.max(starts,  totalEvaluations);  this.totalEvaluations  =  Math.min(totalEvaluations,  totalEvaluations);  ,this.starts = totalEvaluations + 1; this.maxEvaluations = Math.max(starts, totalEvaluations); this.totalEvaluations = Math.min(totalEvaluations, totalEvaluations);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  totalEvaluations  =  all.getEvaluations();  ,int totalEvaluations = optimizer.getEvaluations();
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.generator  =  generator,  totalEvaluations  -  1  :  generator;  ,this.maxEvaluations = Math.max(maxEvaluations, 1000);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.generator  =  generator,  totalEvaluations  -  1  :  generator;  ,this.maxEvaluations = Math.max(this.maxEvaluations, 1000);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.generator  =  generator,  totalEvaluations  -  1  :  generator;  ,this.maxEvaluations = Math.max(starts, 1000);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  +=  5;  int  totalEvaluations  =  totalEvaluations  +  1;  ,totalEvaluations += 5; int totalEvaluations = maxEvaluations + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  +=  5;  int  totalEvaluations  =  totalEvaluations  +  1;  ,totalEvaluations += 5; int totalEvaluations = starts + 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  Math.min(startValue,  this.maxEvaluations);  ,double starts = Math.min(startValue, this.maxEvaluations);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.min(starts,  maxEvaluations  +  1);  ,maxEvaluations = Math.max(maxEvaluations, 1000 + 1);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  0;  this.totalEvaluations  =  0;  this.sumEvaluations  =  0;  ,this.maxEvaluations = 0; this.totalEvaluations = 0; this.starts = 0;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  Math.max(max,  1000);  ,this.maxEvaluations = Math.max(starts, 1000);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  Math.max(max,  1000);  ,this.maxEvaluations = Math.max(1000, maxEvaluations);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, final  Double  totalEvaluations  =  Math.max(max,  min);  ,final Double maxEvaluations = Math.max(max, min);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    /    1;    this.maxEvaluations  =  maxEvaluations  /  2  *(starts  -  1);  this.totalEvaluations  =  totalEvaluations  /  2  +(starts  -  1);  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations / 2 *(starts - 1); this.totalEvaluations = totalEvaluations / 2 +(starts - 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    /    1;    this.maxEvaluations  =  maxEvaluations  /  2  *(starts  -  1);  this.totalEvaluations  =  totalEvaluations  /  2  +(starts  -  1);  ,this.starts = starts - 1; this.maxEvaluations = maxEvaluations / 2 *(starts - 1); this.totalEvaluations = totalEvaluations / 2 +(starts - 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    /    1;    this.maxEvaluations  =  maxEvaluations  /  2  *(starts  -  1);  this.totalEvaluations  =  totalEvaluations  /  2  +(starts  -  1);  ,this.starts = starts / 2; this.maxEvaluations = totalEvaluations / 2 *(starts - 1); this.totalEvaluations = totalEvaluations / 2 +(starts - 1);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  -=  3;  totalEvaluations  -=  4;  ,totalEvaluations -= 3; int totalEvaluations = maxEvaluations - 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations        =        7;        totalEvaluations    =    4;    this.maxEvaluations  =  totalEvaluations  +  1;  int  starts  =  getStarts();  ,int totalEvaluations = 7; totalEvaluations = 4; this.maxEvaluations = totalEvaluations + 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, totalEvaluations  =  0;  int  starts  =  Math.min(max,  min)+  1;  ,totalEvaluations = 0; double starts = Math.min(max, min)+ 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  -=  3;  int  starts  =  Math.min(startValue,  max)+  1;  ,totalEvaluations -= 3; double starts = Math.min(startValue, max)+ 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  startings  =  Math.min(startValue,  max);  ,double startings = Math.min(startValue, max);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  this.f.setStarts(starts);  ,totalEvaluations = 2; double starts = Math.min(startValue, max);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, int  starts  =  max  -  startValue  +  Math.min(startValue,  max);  ,double starts = max - startValue + Math.min(startValue, max);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  Math.max(optimizedEvaluations,  100);  ,this.maxEvaluations = Math.max(maxEvaluations, 100);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  Math.max(optimizedEvaluations,  100);  ,this.maxEvaluations = Math.max(starts, 100);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  Math.max(optimizedEvaluations,  100);  ,this.maxEvaluations = Math.max(this.maxEvaluations, 100);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  totalEvaluations  =  Math.min(startValue,  max);  ,double totalEvaluations = Math.min(startValue, max);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, double  min  =  Math.min(min,  totalEvaluations);  ,double min = Math.min(maxEvaluations, totalEvaluations);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, double  min  =  Math.min(min,  totalEvaluations);  ,double min = Math.min(starts, totalEvaluations);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, double  min  =  Math.min(min,  totalEvaluations);  ,double min = Math.min(totalEvaluations, maxEvaluations);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  0;  totalEvaluations  =  5;  int  starts  =  Math.min(startValue,  min);  ,totalEvaluations = 0; totalEvaluations = 5; double starts = Math.min(startValue, min);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.startEvaluations  =  starts  -  1;  ,this.starts = starts - 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, totalEvaluations  =  0;  this.summaryEvaluations  =  2;  ,totalEvaluations = 0; this.starts = 2;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, totalEvaluations  =  0;  this.summaryEvaluations  =  2;  ,totalEvaluations = 0; this.maxEvaluations = 2;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  +=  1;  int  starts  =  Math.min(totalEvaluations,  f.length);  ,totalEvaluations += 1; int starts = Math.min(totalEvaluations, maxEvaluations);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  +=  1;  int  starts  =  Math.min(totalEvaluations,  f.length);  ,totalEvaluations += 1; int starts = Math.min(totalEvaluations, optima.length);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  max  -  startValue();  ,maxEvaluations = Math.max(maxEvaluations, totalEvaluations + 1);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, int  starts  =  min  -  totalEvaluations;  ,double starts = min - totalEvaluations;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.minimumEvaluations  =  starts  +  1  /  2;  ,this.maxEvaluations = starts + 1 / 2;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, int  starts  =  Math.min(max,  startValue)-  1;  ,double starts = Math.min(max, startValue)- 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  totalEvaluations  =  2;  totalEvaluations  =  4;  int  starts  =  Math.min(startValue,  max);  ,int totalEvaluations = 2; totalEvaluations = 4;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  totalEvaluations  =  2;  totalEvaluations  =  4;  int  starts  =  Math.min(startValue,  max);  ,double totalEvaluations = 2; totalEvaluations = 4;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations  +  1;  ,this.starts = starts - 2; this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations + 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  int  min  =  Math.min(min,  totalEvaluations,  maxEvaluations);  ,final int min = Math.min(maxEvaluations, totalEvaluations);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  +=  2;  int  starts  =  Math.min(startValue,  min);  ,totalEvaluations += 2; double starts = Math.min(startValue, min);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, double  starts  =  Math.min(starts,  min);  ,totalEvaluations = 5; totalEvaluations = 4; this.maxEvaluations = starts + 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  maxEvaluations  /  2;  ,this.starts = totalEvaluations / 1; this.maxEvaluations = maxEvaluations / 2;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, this.totalEvaluations  =  totalEvaluations;  int  starts  =  min  -  startValue  +  Math.min(max,  startValue);  ,this.totalEvaluations = totalEvaluations; double starts = min - startValue + Math.min(max, startValue);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  double  min  =  Math.min(min,  maxEvaluations);  ,final double min = Math.min(maxEvaluations, maxEvaluations);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  double  min  =  Math.min(min,  maxEvaluations);  ,final double min = Math.min(starts, maxEvaluations);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  double  min  =  Math.min(min,  maxEvaluations);  ,final double min = Math.min(totalEvaluations, maxEvaluations);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  this.totalEvaluations;  int  starts  =  min  -  startValue  +  Math.min(startValue,  max);  ,totalEvaluations = this.totalEvaluations; double starts = min - startValue + Math.min(startValue, max);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  int  min  =  Math.min(min,  overallEvaluations,  maxEvaluations);  ,final int min = Math.min(maxEvaluations, starts);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  maxEvaluations  /  2  +  1;  ,this.starts = totalEvaluations / 1; this.maxEvaluations = maxEvaluations / 2 + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  starts  =  generator.getStartPoint(),  4;  ,this.starts = starts / 2; this.maxEvaluations = starts / 2 *(starts - 1);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  starts  =  generator.getStartPoint(),  4;  ,this.starts = starts / 2; this.maxEvaluations = totalEvaluations / 2 *(starts - 1);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.min(maxEvaluations,  starts);  this.totalEvaluations  =  Math.max(totalEvaluations,  starts);  ,this.starts = Math.min(0, starts);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  1  +  1;  ,this.maxEvaluations = maxEvaluations + 1 * 2 + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  1  +  1;  ,this.maxEvaluations = starts + 1 * 2 + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  totalEvaluations  *  1;  int  totalEvaluations  =  Math.min(startValue,  max);  ,totalEvaluations = totalEvaluations * 1; double totalEvaluations = Math.min(startValue, max);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  2;  ,this.starts = starts / 2; this.maxEvaluations = 2;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, int  starts  =  generator.getStartPoint(minimumEvaluations);  ,maxEvaluations = totalEvaluations - 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  2;  totalEvaluations  =  1;  float  starts  =  Math.min(startValue,  max);  ,totalEvaluations = 2; totalEvaluations = 1; double starts = Math.min(startValue, max);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  *  1;  this.maxEvaluations  =  maxEvaluations  *  1;  ,this.starts = starts * 2; this.maxEvaluations = maxEvaluations * 2;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, super(optimizer,  untested,  generator,  starts,  maxEvaluations);  ,totalEvaluations = 0; starts = 2;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  +=  2;  int  starts  =  Math.min(startValue,  max)-  startValue;  ,totalEvaluations += 2; double starts = Math.min(startValue, max)- startValue;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, totalEvaluations  -=  1;  totalEvaluations  +=  Math.max(optimize(),  max,  min);  ,this.starts = starts + 1; this.maxEvaluations = starts + 1; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, totalEvaluations  -=  1;  totalEvaluations  +=  Math.max(optimize(),  max,  min);  ,this.starts = starts + 1; this.maxEvaluations = totalEvaluations + 1; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  *  1;  this.maxEvaluations  =  maxEvaluations  *  2  +  1;  ,this.starts = starts * 2; this.maxEvaluations = maxEvaluations * 2 + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  Math.min(maxEvaluations,  starts  +  1);  ,this.totalEvaluations = Math.min(totalEvaluations, starts + 2);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  int  min  =  Math.min(totalEvaluations,  min);  ,final int min = Math.min(totalEvaluations, starts);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  int  min  =  Math.min(totalEvaluations,  min);  ,final int min = Math.min(totalEvaluations, maxEvaluations);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  int  min  =  Math.min(totalEvaluations,  min);  ,final int min = Math.min(totalEvaluations, this.maxEvaluations);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  starts  +  2;  this.totalEvaluations  =  totalEvaluations;  ,this.starts = starts - 1; this.maxEvaluations = starts - 1; this.totalEvaluations = totalEvaluations;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  0;  totalEvaluations  =  0;  int  starts  =  Math.min(startValue,  max);  ,totalEvaluations = 0; totalEvaluations = 0; double starts = Math.min(startValue, max);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  0;  int  starts  =  min  -  startValue  +  Math.min(startValue,  max);  ,totalEvaluations = 0; double starts = min - startValue + Math.min(startValue, max);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  *  1;  this.maxEvaluations  =  starts  *  2;  ,this.totalEvaluations = totalEvaluations * 2;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  maxEvaluations;  int  totalEvaluations  =  generator.getStartEvaluation(log1,  bound1);  ,totalEvaluations -= starts;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  maxEvaluations;  int  totalEvaluations  =  generator.getStartEvaluation(log1,  bound1);  ,totalEvaluations -= 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  maxEvaluations;  int  totalEvaluations  =  generator.getStartEvaluation(log1,  bound1);  ,totalEvaluations -= 2;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, totalEvaluations  =  2;  totalEvaluations  =  1;  generator.setStartBounds(optima,  startValue);  ,this.starts = starts + 1; this.maxEvaluations = totalEvaluations + 1; this.totalEvaluations = totalEvaluations;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.qualifiedEvaluations  =  totalEvaluations  -  1;  ,totalEvaluations = totalEvaluations - 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  totalEvaluations  =  maxEvaluations  *(max  -  min  +  1);  ,double totalEvaluations = maxEvaluations *(max - min + 1);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  +=  2;  totalEvaluations  +=  1;  ,totalEvaluations += 2; int totalEvaluations = maxEvaluations + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  +=  2;  totalEvaluations  +=  1;  ,totalEvaluations += 2; int totalEvaluations = starts + 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  max  -  startValue  +  Math.min(startValue,  min);  ,double starts = max - startValue + Math.min(startValue, min);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  totalEvaluations  *  1;  int  starts  =  min  -  startValue;  ,totalEvaluations = totalEvaluations * 1; double starts = min - startValue;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  min  -  max;  ,double starts = min - max;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  *  1;  this.maxEvaluations  =  maxEvaluations  /  1;  ,this.starts = starts * 2; this.maxEvaluations = maxEvaluations / 2;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations;  ,this.starts = starts / 2; this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations;  ,this.starts = starts - 2; this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    /    1;    this.maxEvaluations  =  maxEvaluations  /  2  *(starts  -  1);  this.totalEvaluations  =  totalEvaluations  +  1  *(starts  -  1);  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations / 2 *(starts - 1); this.totalEvaluations = totalEvaluations + 1 *(starts - 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    /    1;    this.maxEvaluations  =  maxEvaluations  /  2  *(starts  -  1);  this.totalEvaluations  =  totalEvaluations  +  1  *(starts  -  1);  ,this.starts = starts - 1; this.maxEvaluations = maxEvaluations / 2 *(starts - 1); this.totalEvaluations = totalEvaluations + 1 *(starts - 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    /    1;    this.maxEvaluations  =  maxEvaluations  /  2  *(starts  -  1);  this.totalEvaluations  =  totalEvaluations  +  1  *(starts  -  1);  ,this.starts = starts / 2; this.maxEvaluations = totalEvaluations / 2 *(starts - 1); this.totalEvaluations = totalEvaluations + 1 *(starts - 1);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  int  min  =  Math.min(min,  totalEvaluations);  ,final int min = Math.min(starts, totalEvaluations);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations    -=    1;    totalEvaluations  -=  1;  int  starts  =  min  -  startValue;  ,totalEvaluations -= 1; totalEvaluations -= 1; double starts = min - startValue;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.generator  =  generator,  BaseUnivariateRealOptimizer.UNINITIALIZER,  maxEvaluations);  ,totalEvaluations = 7; totalEvaluations = 4; totalEvaluations = 5;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.generator  =  generator,  BaseUnivariateRealOptimizer.UNINITIALIZER,  maxEvaluations);  ,int totalEvaluations = 7; totalEvaluations = 4; totalEvaluations = 5;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  Math.max(maxEvaluations,  min);  ,this.maxEvaluations = Math.max(maxEvaluations, starts);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  begins  =  Math.min(startValue,  max);  ,double begins = Math.min(startValue, max);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations        =        5;        totalEvaluations    =    7;    totalEvaluations  =  6;  int  starts  =  min  -  startValue;  ,int totalEvaluations = 5; totalEvaluations = 7; totalEvaluations = 6;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  ends  +  1;  this.totalEvaluations  =  totalEvaluations;  ,this.maxEvaluations = maxEvaluations + 1; this.totalEvaluations = totalEvaluations + 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  2;  int  starts  =  Math.min(min,  max);  ,totalEvaluations = 2; double starts = Math.min(min, max);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  minEvaluations  *  generator,  optimizer.getMaxEvaluations();  ,this.maxEvaluations = starts + 1; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.minimumEvaluations  =  totalEvaluations  +  1  /  2;  ,this.maxEvaluations = totalEvaluations + 1 / 2;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  values;  this.maxEvaluations  =  totalEvaluations;  this.totalEvaluations  =  totalEvaluations  +  1;  ,this.maxEvaluations = 0; this.maxEvaluations = totalEvaluations; this.totalEvaluations = totalEvaluations + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, int  totalEvaluations  =  startings  -  1;  ,int totalEvaluations = this.starts - 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, int  starts  =  optimizer.size()  /(generator.nextDouble()  *  Math.min(startValue,  min)-  startValue);  ,double starts = maxEvaluations - startValue;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  1;  int  starts  =  Math.min(max,  startValue)+  1;  ,totalEvaluations = 1; double starts = Math.min(max, startValue)+ 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts        =        starts        +        1;        this.maxEvaluations    =    Math.max(maxEvaluations,    starts);    this.totalEvaluations  =  Math.min(totalEvaluations,  0);  this.starts  =  Math.min(starts,  1);  ,this.starts = starts + 1; this.maxEvaluations = Math.max(0, starts); this.totalEvaluations = Math.min(totalEvaluations, 0); this.starts = Math.min(starts, 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts        =        starts        +        1;        this.maxEvaluations    =    Math.max(maxEvaluations,    starts);    this.totalEvaluations  =  Math.min(totalEvaluations,  0);  this.starts  =  Math.min(starts,  1);  ,this.starts = starts + 1; this.maxEvaluations = Math.max(starts, 0); this.totalEvaluations = Math.min(totalEvaluations, 0); this.starts = Math.min(starts, 1);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.talentEvaluations  =  0;  ,this.maxEvaluations = 0;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.maxEvaluations  =  totalEvaluations  +  1;  this.talEvaluations  =  totalEvaluations  +  1;  ,this.maxEvaluations = totalEvaluations + 1; this.starts = totalEvaluations + 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  this.maxEvaluations  +  1;  int  starts  =  generator.getStartBounds(this.maxEvaluations);  ,maxEvaluations =(maxEvaluations == 1)? -1 : 0;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, setMaxEvaluations(optima,  0,  maxEvaluations);  ,this.starts = starts + 1; this.maxEvaluations = starts + 1; this.totalEvaluations = totalEvaluations * 1;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, setMaxEvaluations(optima,  0,  maxEvaluations);  ,this.starts = starts + 1; this.maxEvaluations = totalEvaluations + 1; this.totalEvaluations = totalEvaluations * 1;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, setMaxEvaluations(optima,  0,  maxEvaluations);  ,this.starts = starts + 1; this.maxEvaluations = starts + 1; this.totalEvaluations = totalEvaluations * 2;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.maxEvaluations  =  maxEvaluations  +  1;  int  totalEvaluations  =  values  +  1;  ,int totalEvaluations = maxEvaluations + 1; this.maxEvaluations = maxEvaluations + 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  min  +  getStartValue()  *  getEndValue()  -  startValue,  max);  ,int starts = optima.length;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  min  +  getStartValue()  *  getEndValue()  -  startValue,  max);  ,int ends = optima.length;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  min  +  getStartValue()  *  getEndValue()  -  startValue,  max);  ,int starts = optima.length - 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1  +  1;  this.maxEvaluations  =  maxEvaluations  -  1;  ,this.starts = starts / 2 + 1; this.maxEvaluations = maxEvaluations - 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.totalEvaluations  =  maxEvaluations  +  1;  int  starts  =  generator.getStart();  ,int starts = maxEvaluations + 1; this.totalEvaluations = maxEvaluations + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  *  1;  this.maxEvaluations  =  maxEvaluations  *  1;  ,this.totalEvaluations = starts * 2;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, double  starts  =  Math.min(starts,  max);  ,double starts = Math.min(max, max);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, double  starts  =  Math.min(starts,  max);  ,double starts = Math.min(startValue, max);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, double  starts  =  Math.min(starts,  max);  ,double starts = Math.min(max, min);
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, totalEvaluations  =  2;  totalEvaluations  =  4;  generator  =  getStartBounds();  ,this.starts = starts + 1; this.maxEvaluations = starts + 1; this.totalEvaluations = totalEvaluations;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  -=  2;  totalEvaluations  -=  2;  ,totalEvaluations -= 2; double starts = Math.min(startValue, min);
increase failing tests,74,replace, [FE] ArithmeticException testQuinticMin, this.totalEvaluations  =  adjustedEvaluations  /  totalEvaluations;  ,this.totalEvaluations = starts / totalEvaluations;
increase failing tests,74,replace, [FE] ArithmeticException testQuinticMin, this.totalEvaluations  =  adjustedEvaluations  /  totalEvaluations;  ,this.totalEvaluations = totalEvaluations / totalEvaluations;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  getStarts()  /  numberEvaluations;  ,this.starts = starts + 1; this.maxEvaluations = Math.min(maxEvaluations, starts); this.totalEvaluations = Math.min(totalEvaluations, 0);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  getStarts()  /  numberEvaluations;  ,this.starts = starts + 1; this.maxEvaluations = Math.min(0, starts); this.totalEvaluations = Math.min(totalEvaluations, 0);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  getStarts()  /  numberEvaluations;  ,this.starts = totalEvaluations + 1; this.maxEvaluations = Math.min(maxEvaluations, starts); this.totalEvaluations = Math.min(totalEvaluations, 0);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  -=  2;  int  starts  =  Math.min(startValue,  max)-  1;  ,totalEvaluations -= 2; double starts = Math.min(startValue, max)- 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  0;  int  starts  =  Math.min(startValue,  max)-  min;  ,totalEvaluations = 0; double starts = Math.min(startValue, max)- min;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    +    2;    this.maxEvaluations  =  maxEvaluations  +  2;  this.totalEvaluations  =  totalEvaluations  /  2;  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations / 2; this.totalEvaluations = totalEvaluations / 2;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.startValues  =  totalEvaluations  -  1;  ,starts = totalEvaluations - 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  ends;  this.totalEvaluations  =  totalEvaluations  -  1;  ,this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  0;  totalEvaluations  =  0;  int  starts  =  min  -  startValue;  ,totalEvaluations = 0; totalEvaluations = 0; double starts = min - startValue;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  totalEvaluations  =  startValue  *  1;  ,double totalEvaluations = startValue * 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  -=  2;  int  starts  =  Math.min(startValue,  max);  ,totalEvaluations -= 2; double starts = Math.min(startValue, max);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.startValues  =  totalEvaluations  /  1;  ,starts = totalEvaluations / 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, float  starts  =  Math.min(starts,  min);  ,totalEvaluations = 0; totalEvaluations = 4; this.maxEvaluations = starts + 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  FUNC.googleG.getStart();  ,totalEvaluations -= 2; totalEvaluations -= 3;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  FUNC.googleG.getStart();  ,totalEvaluations -= 1; totalEvaluations -= 3;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  FUNC.googleG.getStart();  ,totalEvaluations -= 4; totalEvaluations -= 3;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  2;  totalEvaluations  =  1;  float  starts  =  Math.min(startValue,  min);  ,totalEvaluations = 2; totalEvaluations = 1; double starts = Math.min(startValue, min);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.totalEvaluations  =  totalEvaluations  /  adjustedEvaluations  +  1;  ,this.totalEvaluations = totalEvaluations / starts + 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  0;  totalEvaluations  =  0;  int  starts  =  Math.min(startValue,  min);  ,totalEvaluations = 0; totalEvaluations = 0; double starts = Math.min(startValue, min);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.max(this.maxEvaluations,  starts);  this.totalEvaluations  =  Math.min(this.totalEvaluations,  starts);  ,this.starts = Math.min(this.starts, starts);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.totalEvaluations  =  totalEvaluations  /  adjustedEvaluations;  ,this.totalEvaluations = totalEvaluations / starts;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, return  optimize(f,  goal,  min,  max,  0);  final  int  totalEvaluations  =  Math.max(relativeAccuracy  *  Math.abs(min,  max),  true);  ,this.maxEvaluations = maxEvaluations; this.totalEvaluations = totalEvaluations;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.min(starts,  totalEvaluations  +  1);  ,this.starts = totalEvaluations + 1; this.maxEvaluations = Math.min(starts, totalEvaluations + 1);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.optimizedEvaluations  =  totalEvaluations  /  1;  ,maxEvaluations = totalEvaluations / 1;
increase failing tests,75,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  maxEvaluations;  this.trimEvaluations  =  0;  ,this.maxEvaluations = maxEvaluations; this.starts = 0;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  int  maxEvaluations  =  Math.max(maxEvaluations,  totalEvaluations  +  1);  ,final int maxEvaluations = Math.max(starts, totalEvaluations + 1);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  int  maxEvaluations  =  Math.max(maxEvaluations,  totalEvaluations  +  1);  ,final int maxEvaluations = Math.max(this.maxEvaluations, totalEvaluations + 1);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  totalEvaluations  *  1;  int  starts  =  min  -  startValue  +  Math.min(startValue,  max)+  1;  ,totalEvaluations = totalEvaluations * 1; double starts = min - startValue + Math.min(startValue, max)+ 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.max(maxEvaluations,  totalEvaluations);  this.starts  =  Math.min(starts,  totalEvaluations);  ,this.starts = starts + 1; this.maxEvaluations = Math.max(starts, totalEvaluations); this.starts = Math.min(starts, totalEvaluations);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.max(maxEvaluations,  totalEvaluations);  this.starts  =  Math.min(starts,  totalEvaluations);  ,this.starts = starts + 1; this.maxEvaluations = Math.max(0, totalEvaluations); this.starts = Math.min(starts, totalEvaluations);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  *  1;  this.maxEvaluations  =  maxEvaluations  *  1  -  1;  ,this.starts = starts * 2; this.maxEvaluations = maxEvaluations * 2 - 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  -=  1;  int  totalEvaluations  =  Math.min(startValue,  min);  ,totalEvaluations -= 1; double totalEvaluations = Math.min(startValue, min);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  3;  totalEvaluations  =  4;  totalEvaluations  =  1;  ,totalEvaluations = 0; totalEvaluations = 0; starts = 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  allEvaluations;  this.maxEvaluations  =  totalEvaluations;  this.totalEvaluations  =  totalEvaluations;  ,this.maxEvaluations = totalEvaluations; this.maxEvaluations = totalEvaluations; this.totalEvaluations = totalEvaluations;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  totalEvaluations  =  7;  totalEvaluations  =  4;  int  starts  =  generator.getStart();  ,int totalEvaluations = 7; totalEvaluations = 4;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, totalEvaluations  -=  3;  int  starts  =  getStarts();  ,this.starts = starts + 1; this.maxEvaluations = totalEvaluations + 1;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, totalEvaluations  -=  3;  int  starts  =  getStarts();  ,this.starts = starts + 1; this.maxEvaluations = totalEvaluations + 1 - 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  starts;  ,this.starts = totalEvaluations + 1; this.maxEvaluations = starts;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  topEvaluations;  ,final int maxEvaluations = Math.max(starts, totalEvaluations);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  topEvaluations;  ,final int maxEvaluations = Math.max(this.maxEvaluations, totalEvaluations);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  totalEvaluations  -  1;  int  starts  =  Math.min(startValue,  max)-  1;  ,totalEvaluations = totalEvaluations - 1; double starts = Math.min(startValue, max)- 1;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, totalEvaluations  =  2;  totalEvaluations  =  1;  generator.setStartBounds(starts);  ,this.starts = starts + 1; this.maxEvaluations = maxEvaluations + 1; this.totalEvaluations = totalEvaluations;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, totalEvaluations  =  2;  totalEvaluations  =  1;  generator.setStartBounds(starts);  ,this.starts = starts + 1; this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    /    1;    this.maxEvaluations  =  maxEvaluations  /  1;  this.totalEvaluations  =  totalEvaluations  /  2  +  1;  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations / 2; this.totalEvaluations = totalEvaluations / 2 + 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    /    1;    this.maxEvaluations  =  maxEvaluations  /  1;  this.totalEvaluations  =  totalEvaluations  /  2  +  1;  ,this.starts = starts / 2; this.maxEvaluations = totalEvaluations / 2; this.totalEvaluations = totalEvaluations / 2 + 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  UnivariateRealPointValuePair[]  optimizer  =  new  UnivariateRealPointValuePair(generator,  optimizer);  ,totalEvaluations = 1; totalEvaluations = 3;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  funC.starts();  ,float starts = maxEvaluations - totalEvaluations;
increase failing tests,154,replace, [FE] ArithmeticException testQuinticMin, int  starts  =  funC.starts();  ,float starts = totalEvaluations / maxEvaluations;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.max(maxEvaluations,  totalEvaluations  +  1);  this.starts  =  Math.min(starts,  totalEvaluations  +  1);  ,this.starts = starts + 1; this.maxEvaluations = Math.max(starts, totalEvaluations + 1); this.starts = Math.min(starts, totalEvaluations + 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.max(maxEvaluations,  totalEvaluations  +  1);  this.starts  =  Math.min(starts,  totalEvaluations  +  1);  ,this.starts = totalEvaluations + 1; this.maxEvaluations = Math.max(maxEvaluations, totalEvaluations + 1); this.starts = Math.min(starts, totalEvaluations + 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.max(maxEvaluations,  totalEvaluations  +  1);  this.starts  =  Math.min(starts,  totalEvaluations  +  1);  ,this.starts = starts + 1; this.maxEvaluations = Math.max(0, totalEvaluations + 1); this.starts = Math.min(starts, totalEvaluations + 1);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, int  starts  =  this.generator.getStarts(),  startings);  ,this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, int  starts  =  this.generator.getStarts(),  startings);  ,this.maxEvaluations = 1; this.totalEvaluations = totalEvaluations + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, int  starts  =  this.generator.getStarts(),  startings);  ,this.maxEvaluations = 0; this.totalEvaluations = maxEvaluations + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts;  this.maxEvaluations  =  Math.max(maxEvaluations,  starts);  this.totalEvaluations  =  Math.min(totalEvaluations,  starts  +  1);  ,this.starts = 0; this.maxEvaluations = Math.max(maxEvaluations, starts); this.totalEvaluations = Math.min(totalEvaluations, starts + 1);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.talentEvaluations  =  totalEvaluations  /  2;  ,this.maxEvaluations = totalEvaluations / 2;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  +=  2;  int  totalEvaluations  =  totalEvaluations  -  1;  ,totalEvaluations += 2; int totalEvaluations = starts - 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  starts  -  1;  ,this.starts = starts - 1; this.maxEvaluations = starts - 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations        =        7;        totalEvaluations    =    4;    totalEvaluations  =  6;  totalEvaluations  =  5;  ,int totalEvaluations = 7; totalEvaluations = 4; totalEvaluations = 6;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  starts  =  generator.getStartEvaluation(f,  min,  maxEvaluations);  ,int totalEvaluations = starts;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.min(starts,  totalEvaluations);  ,this.starts = totalEvaluations + 1; this.maxEvaluations = Math.min(starts, totalEvaluations);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  Math.min(maxEvaluations,  starts);  ,this.starts = starts / 2; this.maxEvaluations = Math.min(starts, maxEvaluations);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  Math.min(maxEvaluations,  starts);  ,this.starts = starts / 2; this.maxEvaluations = Math.min(starts, totalEvaluations);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  int  min  =  Math.min(min,  starts);  ,final int min = Math.min(starts, starts);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  1;  int  totalEvaluations  =  maxEvaluations  *(min  -  max);  ,totalEvaluations = 1; double totalEvaluations = maxEvaluations *(min - max);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.optimizer  =  optimizer,  this.maxEvaluations  =  startValue  +  1;  ,double starts = max - min - startValue * startValue;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, this.optimizer  =  optimizer,  this.maxEvaluations  =  startValue  +  1;  ,double starts = min - startValue - max * startValue;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.optimizer  =  optimizer,  this.maxEvaluations  =  startValue  +  1;  ,double starts = startValue - max - min * startValue;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, this.optimizer  =  optimizer,  this.maxEvaluations  =  startValue  +  1;  ,double starts = min - max - startValue * totalEvaluations;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  0;  this.sumEvaluations  =  0;  this.maxEvaluations  =  0;  ,this.maxEvaluations = 0; this.starts = 0; this.maxEvaluations = 0;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  0;  this.sumEvaluations  =  0;  this.maxEvaluations  =  0;  ,this.maxEvaluations = 0; this.totalEvaluations = 0; this.maxEvaluations = 0;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  maxEvaluations  -  1;  this.totalEvaluations  =  totalEvaluations  -  1;  ,this.starts = starts - 1; this.maxEvaluations = maxEvaluations - 1; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  RandomGenerator  checkOptimizer(generator,  real);  ,this.starts = starts + 1; this.maxEvaluations = maxEvaluations + 1; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  RandomGenerator  checkOptimizer(generator,  real);  ,this.starts = starts + 1; this.maxEvaluations = maxEvaluations + 1 - 1; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  RandomGenerator  checkOptimizer(generator,  real);  ,this.starts = starts + 1; this.maxEvaluations = maxEvaluations + 1 - 1; this.totalEvaluations = totalEvaluations - 1 + 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  RandomGenerator  checkOptimizer(generator,  real);  ,this.starts = starts + 1; this.maxEvaluations = totalEvaluations + 1 - 1; this.totalEvaluations = totalEvaluations - 1 + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  /  1  +  1;  this.maxEvaluations  =  maxEvaluations  /  1;  ,this.totalEvaluations = starts / 2 + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.optimumEvaluations  =  startValues  -  1;  ,int starts = Math.max(1, maxEvaluations);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.optimumEvaluations  =  startValues  -  1;  ,int starts = Math.max(1, totalEvaluations);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.optimumEvaluations  =  startValues  -  1;  ,int starts = Math.max(2, maxEvaluations);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  -=  3;  int  starts  =  Math.min(startValue,  max)-  1;  ,totalEvaluations -= 3; double starts = Math.min(startValue, max)- 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  2;  int  starts  =  Math.min(startValue,  min)+  1;  ,totalEvaluations = 2; double starts = Math.min(startValue, min)+ 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  1;  totalEvaluations  =  0;  int  starts  =  Math.min(max,  min);  ,totalEvaluations = 1; totalEvaluations = 0; double starts = Math.min(max, min);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  starts  /  1;  this.totalEvaluations  =  totalEvaluations  /  2;  ,this.starts = starts / 2; this.maxEvaluations = starts / 2; this.totalEvaluations = totalEvaluations / 2;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    /    1;    this.maxEvaluations  =  maxEvaluations  /  2  *(starts  -  1);  this.totalEvaluations  =  totalEvaluations  /  2  *(maxEvaluations  -  1);  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations / 2 *(starts - 1); this.totalEvaluations = totalEvaluations / 2 *(maxEvaluations - 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    /    1;    this.maxEvaluations  =  maxEvaluations  /  2  *(starts  -  1);  this.totalEvaluations  =  totalEvaluations  /  2  *(maxEvaluations  -  1);  ,this.starts = starts - 1; this.maxEvaluations = maxEvaluations / 2 *(starts - 1); this.totalEvaluations = totalEvaluations / 2 *(maxEvaluations - 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    /    1;    this.maxEvaluations  =  maxEvaluations  /  2  *(starts  -  1);  this.totalEvaluations  =  totalEvaluations  /  2  *(maxEvaluations  -  1);  ,this.starts = starts / 2; this.maxEvaluations = totalEvaluations / 2 *(starts - 1); this.totalEvaluations = totalEvaluations / 2 *(maxEvaluations - 1);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.maxEvaluations  =  minEvaluations  -  1;  int  starts  =  maxEvaluations  -  1;  ,this.maxEvaluations = starts - 1; int starts = maxEvaluations - 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  -=  3;  int  starts  =  Math.min(startValue,  max);  ,totalEvaluations -= 3; double starts = Math.min(startValue, max);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  5;  totalEvaluations  =  5;  int  ends  =  getStarts();  ,int starts = Math.min(maxEvaluations, totalEvaluations);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.minimumEvaluations  =  starts  +  1;  ,this.maxEvaluations = starts + 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, int  starts  =  generator.getStartPoint(),  endEvaluations  +  1;  ,int totalEvaluations = 1; totalEvaluations = 0;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts;  this.maxEvaluations  =  starts  +  1;  this.totalEvaluations  =  starts  +  1;  ,this.starts = 0; this.maxEvaluations = starts + 1; this.totalEvaluations = starts + 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  Math.max(maxEvaluations,  starts  +  1);  this.totalEvaluations  =  Math.min(totalEvaluations,  0);  ,this.starts = Math.min(starts, starts / 2);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  1;  int  starts  =  Math.min(startValue,  min)-  startValue;  ,totalEvaluations = 1; double starts = Math.min(startValue, min)- startValue;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  starts  =  optima.length;  ,int starts = optima.length - 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  starts  =  optima.length;  ,int starts = optima.length - 2;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, int  starts  =  optima.length;  ,int starts = optima.length * 2;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.max(maxEvaluations,  totalEvaluations  +  1);  this.totalEvaluations  =  Math.min(starts,  totalEvaluations  +  1);  ,this.starts = totalEvaluations + 1; this.maxEvaluations = Math.max(maxEvaluations, totalEvaluations + 1); this.totalEvaluations = Math.min(starts, totalEvaluations + 1);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.minEvaluations  =  Math.min(0,  maxEvaluations);  ,this.maxEvaluations = Math.min(0, maxEvaluations);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  totalEvaluations;  int  totalEvaluations  =  Math.min(startValue,  max);  ,totalEvaluations = totalEvaluations; double totalEvaluations = Math.min(startValue, max);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  0;  totalEvaluations  =  4;  int  starts  =  min  -  startValue;  ,totalEvaluations = 0; totalEvaluations = 4; double starts = min - startValue;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.maxEvaluations  =  minEvaluations  +  1;  int  totalEvaluations  =  maxEvaluations  +  1;  ,int minEvaluations = maxEvaluations + 1; int totalEvaluations = maxEvaluations + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.maxEvaluations  =  minEvaluations  +  1;  int  totalEvaluations  =  maxEvaluations  +  1;  ,this.maxEvaluations = starts + 1; int totalEvaluations = maxEvaluations + 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, int  totalEvaluations  =  this.maximumEvaluations  +  1;  ,int totalEvaluations = this.starts + 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, int  totalEvaluations  =  this.maximumEvaluations  +  1;  ,int maxEvaluations = starts + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  Math.min(0,  starts);  this.totalEvaluations  =  Math.max(totalEvaluations,  starts);  ,this.starts = Math.min(starts, totalEvaluations);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  -=  2;  int  starts  =  Math.min(startValue,  max)-  1;  ,this.starts = starts / 2; this.maxEvaluations = totalEvaluations / 2;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  -=  2;  int  starts  =  Math.min(startValue,  max)-  1;  ,this.starts = starts / 2; this.maxEvaluations = starts / 2;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  totalEvaluations  -  1;  int  starts  =  Math.min(startValue,  min);  ,totalEvaluations = totalEvaluations - 1; double starts = Math.min(startValue, min);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  2;  int  starts  =  Math.min(startValue,  max)/  startValue;  ,totalEvaluations = 2; double starts = Math.min(startValue, max)/ startValue;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  startings  =  min  -  startValue  +  1;  ,double startings = min - startValue + 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  0;  int  starts  =  Math.min(max,  startValue);  ,totalEvaluations = 0; double starts = Math.min(max, startValue);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  3;  int  starts  =  Math.min(startValue,  max)-  min;  ,totalEvaluations = 3; double starts = Math.min(startValue, max)- min;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  starts;  this.sumEvaluations  =  0;  ,this.maxEvaluations = starts; this.totalEvaluations = 0;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, int  starts  =  generator.size()  /(optimizer.nextDouble()  *  Math.min(startValue,  min),  max  -  min);  ,this.totalEvaluations = totalEvaluations; double starts = min - startValue + Math.min(max, min);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.minimumEvaluations  =  maxEvaluations  +  1  /  2  +  1;  ,this.maxEvaluations = maxEvaluations + 1 / 2 + 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, double  starts  =  Math.max(starts,  max);  ,double starts = Math.max(max, max);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, double  starts  =  Math.max(starts,  max);  ,double starts = Math.max(max, min);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, double  starts  =  Math.max(starts,  max);  ,double starts = Math.max(startValue, max);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  1;  int  starts  =  Math.min(max,  min);  ,totalEvaluations = 1; double starts = Math.min(max, min);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.minEvaluations  =  Math.min(0,  this.maxEvaluations);  ,this.maxEvaluations = Math.min(0, this.maxEvaluations);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.maxEvaluations  =  0;  this.numEvaluations  =  1;  ,this.maxEvaluations = 0; this.starts = 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  maxEvaluations;  int  totalEvaluations  =  generator.getStartEvaluation(starts,  0);  ,this.maxEvaluations = starts + 1; this.totalEvaluations = starts + 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  double  min  =  Math.min(min,  totalEvaluations);  ,final double min = Math.min(starts, totalEvaluations);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, final  double  min  =  Math.min(min,  totalEvaluations);  ,final double min = Math.min(maxEvaluations, totalEvaluations);
