increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.minEvaluations  =  Math.min(1,  maxEvaluations);  ,this.maxEvaluations = Math.min(1, maxEvaluations);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations;  ,this.maxEvaluations = 1; this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations;  ,this.maxEvaluations = 0; this.starts = 0; this.totalEvaluations = totalEvaluations;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  Math.max(maxEvaluations,  totalEvaluations,  generator,  starts);  ,int totalEvaluations = starts - 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, int  starts  =  Math.min(startValue,  min  +  1);  ,double starts = Math.min(startValue, min + 1);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  0;  int  starts  =  Math.min(startValue,  max)-  startValue;  ,totalEvaluations = 0; double starts = Math.min(startValue, max)- startValue;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  0.starts  =  f.size();  ,int starts = 0;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  2;  this.totalEvaluations  =  starts  +  1;  ,this.totalEvaluations = totalEvaluations / 2;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  2;  this.totalEvaluations  =  starts  +  1;  ,this.totalEvaluations = totalEvaluations / 2 + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    maxEvaluations;    this.maxEvaluations  =  totalEvaluations;  this.talentEvaluations  =  totalEvaluations;  ,this.maxEvaluations = maxEvaluations; this.maxEvaluations = totalEvaluations; this.generator = generator;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  values;  this.totalEvaluations  =  starts;  ,this.maxEvaluations = 0; this.totalEvaluations = starts;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin,         this.maxEvaluations    =    maxEvaluations;    this.totalEvaluations  =  totalEvaluations;  this.univariateRealPointValuePair  =  new  UnivariateRealPointValuePair();  ,totalEvaluations = 1; totalEvaluations = 0;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin,         this.maxEvaluations    =    maxEvaluations;    this.totalEvaluations  =  totalEvaluations;  this.univariateRealPointValuePair  =  new  UnivariateRealPointValuePair();  ,totalEvaluations = 2; totalEvaluations = 0;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin,         this.maxEvaluations    =    maxEvaluations;    this.totalEvaluations  =  totalEvaluations;  this.univariateRealPointValuePair  =  new  UnivariateRealPointValuePair();  ,totalEvaluations = 3; totalEvaluations = 0;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  0;  int  starts  =  Math.min(startValue,  min);  ,totalEvaluations = 0; double starts = Math.min(startValue, min);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  0;  this.trimmerEvaluations  =  0;  ,this.maxEvaluations = 0; this.starts = 0;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  1;  int  starts  =  Math.min(startValue,  max)+  1;  ,totalEvaluations = 1; double starts = Math.min(startValue, max)+ 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  3;  this.maxEvaluations  =  0;  ,this.starts = starts / 3; this.maxEvaluations = 0;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  3;  this.maxEvaluations  =  0;  ,this.starts = starts - 3; this.maxEvaluations = 0;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  max  -  min;  ,double starts = max - min;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  1;  float  totalEvaluations  =  maxEvaluations  *(min  -  min);  ,totalEvaluations = 1; double totalEvaluations = maxEvaluations *(max - min);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.maxEvaluations  =  totalEvaluations  -  1;  int  totalEvaluations  =  this.minEvaluations  -  1;  ,int totalEvaluations = this.maxEvaluations - 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations    =    1;    totalEvaluations  =  0;  int  starts  =  Math.min(startValue,  min);  ,totalEvaluations = 1; totalEvaluations = 0; double starts = Math.min(startValue, min);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  min  +(min  -  min)?  max  :  min  +  generator.nextDouble()  *(max  -  min);  ,totalEvaluations = 5; double starts = Math.min(max, min)+ 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  5;  int  starts  =  Math.min(max,  startValue);  ,totalEvaluations = 5; double starts = Math.min(max, startValue);
increase failing tests,75,replace, [FE] NegativeArraySizeException testQuinticMin, this.sumEvaluations  =  totalEvaluations  -  1;  ,this.starts = totalEvaluations - 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  1;  int  starts  =  Math.min(startValue,  max)-  startValue;  ,totalEvaluations = 1; double starts = Math.min(startValue, max)- startValue;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  0;  ,this.maxEvaluations = 0; this.starts = 0; this.totalEvaluations = 0;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  0;  ,this.maxEvaluations = 1; this.maxEvaluations = 0; this.totalEvaluations = 0;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  0;  ,this.maxEvaluations = 1; this.maxEvaluations = 1; this.totalEvaluations = 0;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.talentEvaluations  =  starts  -  1;  ,this.maxEvaluations = starts - 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  totalEvaluations  /  1;  ,this.totalEvaluations = starts - 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations    =    1;    totalEvaluations  =  0;  int  starts  =  Math.min(startValue,  max);  ,totalEvaluations = 1; totalEvaluations = 0; double starts = Math.min(startValue, max);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1  +  1;  ,this.starts = starts / 2 + 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1  +  1;  ,this.starts = starts / 10 + 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    +    1;    this.maxEvaluations  =  maxEvaluations  +  1;  this.totalEvaluations  =  totalEvaluations  -  1;  ,this.starts = starts - 1; this.maxEvaluations = maxEvaluations + 1; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  allEvaluations  +  1;  this.totalEvaluations  =  totalEvaluations  +  1;  ,this.maxEvaluations = starts + 1; this.totalEvaluations = totalEvaluations + 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  0;  int  starts  =  Math.min(startValue,  max);  ,totalEvaluations = 0; double starts = Math.min(startValue, max);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, this.maxEvaluations  =  totalEvaluations  -  1;  int  starts  =  this.minEvaluations  -  1;  ,int starts = this.maxEvaluations - 1;
increase failing tests,74,replace, [FE] ArithmeticException testQuinticMin, this.starts  =  starts  +  0;  ,this.starts = starts / 0;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.talentEvaluations  =  totalEvaluations  /  1;  ,this.maxEvaluations = totalEvaluations / 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    +    1;    this.maxEvaluations  =  Math.max(maxEvaluations,  starts);  this.totalEvaluations  =  Math.min(totalEvaluations,  totalEvaluations);  ,this.starts = Math.min(starts, 1);
increase failing tests,74,replace, [FE] NegativeArraySizeException testQuinticMin, this.starts    =    starts    +    1;    this.maxEvaluations  =  Math.max(maxEvaluations,  starts);  this.totalEvaluations  =  Math.min(totalEvaluations,  totalEvaluations);  ,this.starts = Math.min(starts, -1);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  allEvaluations  /  1;  ,this.maxEvaluations = starts / 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  allEvaluations  /  1;  ,this.maxEvaluations = totalEvaluations / 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  starts;  int  starts  =  generator.getStartEvaluation(startValue,  endValue);  ,this.maxEvaluations = Math.max(this.maxEvaluations, 1000);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  Math.min(max,  startValue  +  1);  ,double starts = Math.min(max, startValue + 1);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  totalEvaluations  +  1  -  generator,  factory.setOptimizer(generator);  ,this.totalEvaluations = starts * 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.totalEvaluations  =  toTotalEvaluations;  ,this.totalEvaluations = starts;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  begins  =  Math.min(startValue,  min);  ,double begins = Math.min(startValue, min);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  totalEvaluations;  this.talentEvaluations  =  totalEvaluations;  ,this.maxEvaluations = totalEvaluations; this.starts = totalEvaluations;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  maxEvaluations;  int  starts  =  generator.getStartEvaluation(thenValue,  outputFactory);  ,final int totalEvaluations = Math.min(starts, starts + 1);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  maxEvaluations;  int  starts  =  generator.getStartEvaluation(thenValue,  outputFactory);  ,final int totalEvaluations = Math.min(maxEvaluations, starts + 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  maxEvaluations  /  1  +  1;  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations / 2 + 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  totalEvaluations  /  1;  ,this.starts = starts / 2; this.maxEvaluations = totalEvaluations / 2;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.maxEvaluations  =  maxEvaluations  +  1;  this.talEvaluations  =  totalEvaluations  +  1;  ,this.maxEvaluations = maxEvaluations + 1; this.starts = totalEvaluations + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  allEvaluations  +  1;  this.totalEvaluations  =  totalEvaluations  /  2;  ,this.maxEvaluations = starts + 1; this.totalEvaluations = totalEvaluations / 2;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.talenEvaluations  =  starts  -  1;  ,totalEvaluations = starts - 1;
increase failing tests,155,add, [FE] ArrayIndexOutOfBoundsException testQuinticMin, ,optima  =  new  UnivariateRealPointValuePair[starts];  optima = new UnivariateRealPointValuePair[maxEvaluations];
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  5;  int  starts  =  Math.min(startValue,  max)-  min;  ,totalEvaluations = 5; double starts = Math.min(startValue, max)- min;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.optimaEvaluations  =  totalEvaluations  -  1;  ,maxEvaluations = totalEvaluations - 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  Math.max(maxEvaluations,  starts,  generator,  baseUri);  ,maxEvaluations = Math.max(maxEvaluations, starts + 1);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  Math.max(maxEvaluations,  starts,  generator,  baseUri);  ,maxEvaluations = Math.max(maxEvaluations, totalEvaluations + 1);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  Math.max(maxEvaluations,  starts,  generator,  baseUri);  ,maxEvaluations = Math.max(maxEvaluations, totalEvaluations - 1);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  totalEvaluations  =  Math.min(startValue,  min);  ,double totalEvaluations = Math.min(startValue, min);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  getStarts()  *  2;  ,this.maxEvaluations = 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  getStarts()  *  2;  ,this.totalEvaluations = 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  allEvaluations  *  1;  ,this.maxEvaluations = starts * 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  allEvaluations  *  1;  ,this.maxEvaluations = totalEvaluations * 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  maxEvaluations  /  1;  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations / 2;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.generator  =  optimizer?  generator  :  baseUri;  ,this.maxEvaluations = starts; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  totalEvaluations  =  maxEvaluations  *(min  -  startValue);  ,double totalEvaluations = maxEvaluations *(min - startValue);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  values;  this.maxEvaluations  =  totalEvaluations;  ,this.maxEvaluations = totalEvaluations; this.maxEvaluations = totalEvaluations;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  Math.max(optimize,  maxEvaluations);  ,this.maxEvaluations = Math.max(this.maxEvaluations, maxEvaluations);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  2;  int  starts  =  Math.min(startValue,  max)-  startValue;  ,totalEvaluations = 2; double starts = Math.min(startValue, max)- startValue;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, int  starts  =  this.minEvaluations  -  1;  ,int starts = maxEvaluations - 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  Math.max(optimizedEvaluations,  maxEvaluations);  ,this.maxEvaluations = Math.max(maxEvaluations, maxEvaluations);
increase failing tests,75,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  totalEvaluations;  this.trimmerEvaluations  =  totalEvaluations;  ,this.maxEvaluations = totalEvaluations; this.starts = totalEvaluations;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  Math.max(0,  totalEvaluations);  ,this.maxEvaluations = 0; this.maxEvaluations = 0; this.totalEvaluations = Math.min(0, totalEvaluations);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  Math.max(0,  totalEvaluations);  ,this.maxEvaluations = 0; this.starts = 0; this.totalEvaluations = Math.max(0, totalEvaluations);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  Math.max(0,  totalEvaluations);  ,this.maxEvaluations = 1; this.maxEvaluations = 0; this.totalEvaluations = Math.max(0, totalEvaluations);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  startings  =  min  -  startValue;  ,double startings = min - startValue;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.maxEvaluations  =  maxEvaluations  +  1;  int  totalEvaluations  =  minEvaluations  +  1;  ,int totalEvaluations = maxEvaluations + 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, this.maxEvaluations  =  totalEvaluations  -  1;  int  starts  =  this.minEvaluations;  ,int starts = this.maxEvaluations;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, this.maxEvaluations  =  totalEvaluations  -  1;  int  starts  =  this.minEvaluations;  ,this.maxEvaluations = totalEvaluations - 1; int starts = maxEvaluations;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  2;  int  starts  =  Math.min(max,  min);  ,totalEvaluations = 2; double starts = Math.min(max, min);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    +    1;    this.maxEvaluations  =  starts  +  1;  this.totalEvaluations  =  starts  +  1;  ,this.starts = 1; this.maxEvaluations = starts + 1; this.totalEvaluations = starts + 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  min  -  startValue  +  Math.min(startValue,  max);  ,double starts = min - startValue + Math.min(startValue, max);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  1;  int  starts  =  Math.min(startValue,  min);  ,totalEvaluations = 1; double starts = Math.min(startValue, min);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  Math.max(maxEvaluations,  starts);  ,this.starts = starts / 2; this.maxEvaluations = Math.max(maxEvaluations, starts);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  Math.max(maxEvaluations,  starts);  ,this.starts = starts / 2; this.maxEvaluations = Math.min(maxEvaluations, starts);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  Math.max(maxEvaluations,  starts);  ,this.starts = starts - 1; this.maxEvaluations = Math.max(maxEvaluations, starts);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  startings  =  Math.min(startValue,  min);  ,double startings = Math.min(startValue, min);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  totalEvaluations  =  this.minEvaluations  -  1;  ,int totalEvaluations = starts - 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  +=  1;  int  totalEvaluations  =  totalEvaluations  /  2;  ,int totalEvaluations = starts / 2;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  +=  1;  int  totalEvaluations  =  totalEvaluations  /  2;  ,int totalEvaluations = maxEvaluations / 2;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.generator  =  generator,  this.unKNOWN;  ,this.starts = starts;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, if(optima!=  null)  {  optima  =  new  UnivariateRealPointValuePair[starts];  this.minEvaluations  =  minEvaluations  *  1;  }  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations / 2 + 1;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, if(optima!=  null)  {  optima  =  new  UnivariateRealPointValuePair[starts];  this.minEvaluations  =  minEvaluations  *  1;  }  ,this.starts = starts + 1; this.maxEvaluations = maxEvaluations / 2 + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, if(optima!=  null)  {  optima  =  new  UnivariateRealPointValuePair[starts];  this.minEvaluations  =  minEvaluations  *  1;  }  ,this.starts = starts / 2; this.maxEvaluations = totalEvaluations / 2 + 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  +=  1;  int  starts  =  Math.min(startValue,  min);  ,totalEvaluations += 1; double starts = Math.min(startValue, min);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.totalEvaluations  =  startEvaluations  +  1;  ,this.totalEvaluations = maxEvaluations + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  +=  1;  int  starts  =  Math.min(startValue,  max)+  1;  ,totalEvaluations += 1; double starts = Math.min(startValue, max)+ 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  -=  1;  int  starts  =  Math.min(startValue,  max)-  1;  ,totalEvaluations -= 1; double starts = Math.min(startValue, max)- 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  Math.max(generator,  maxEvaluations,  maxEvaluations);  ,this.maxEvaluations = Math.max(maxEvaluations, maxEvaluations);
increase failing tests,75,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  totalEvaluations;  this.trimmerEvaluations  =  maxEvaluations;  ,this.maxEvaluations = totalEvaluations; this.starts = maxEvaluations;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  max  -  startValue  +  1;  ,double starts = max - startValue + 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.univariateRealPointValuePair  =  new  UnivariateRealPointValuePair( "UnivariateRealPointValuePair.create(),  optimizator,  starts,  generator);  ,int totalEvaluations = starts + 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.sumEvaluations  =  totalEvaluations  +  1;  ,this.starts = totalEvaluations + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  starts  =  this.minEvaluations  +  1;  ,int starts = maxEvaluations + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  starts  =  this.minEvaluations  +  1;  ,int starts = totalEvaluations + 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    +    1;    this.maxEvaluations  =  starts  +  1;  this.totalEvaluations  =  totalEvaluations  -  1;  ,this.starts = starts - 1; this.maxEvaluations = starts - 1; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  5;  int  starts  =  Math.min(startValue,  max)/  startValue;  ,totalEvaluations = 5; double starts = Math.min(startValue, max)/ startValue;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  2;  int  starts  =  Math.min(startValue,  max)+  1;  ,totalEvaluations = 2; double starts = Math.min(startValue, max)+ 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  0;  this.totalEvaluations  =  0;  ,this.maxEvaluations = 0; this.starts = 0; this.totalEvaluations = 0; this.totalEvaluations = 0;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  0;  this.totalEvaluations  =  0;  ,this.maxEvaluations = 1; this.maxEvaluations = 0; this.totalEvaluations = 0; this.totalEvaluations = 0;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  3;  int  starts  =  Math.min(startValue,  max)-  startValue;  ,totalEvaluations = 3; double starts = Math.min(startValue, max)- startValue;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  0;  ,this.starts = starts / 2; this.maxEvaluations = 0;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  0;  ,this.starts = starts - 2; this.maxEvaluations = 0;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  maxEvaluations  /  1;  ,this.totalEvaluations = starts / 2;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  +=  1;  int  totalEvaluations  =  totalEvaluations  -  1;  ,int totalEvaluations = maxEvaluations - 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  -=  1;  int  starts  =  Math.min(startValue,  max);  ,totalEvaluations -= 1; double starts = Math.min(startValue, max);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  -=  1;  int  starts  =  Math.min(startValue,  min);  ,totalEvaluations -= 1; double starts = Math.min(startValue, min);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  maxEvaluations  /  2  *(starts  -  1);  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations / 2 *(starts - 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  maxEvaluations  /  2  *(starts  -  1);  ,this.starts = starts - 1; this.maxEvaluations = maxEvaluations / 2 *(starts - 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  maxEvaluations  /  2  *(starts  -  1);  ,this.starts = starts / 2; this.maxEvaluations = totalEvaluations / 2 *(starts - 1);
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, totalEvaluations  =  0;  overallEvaluations  =  2;  ,totalEvaluations = 0; maxEvaluations = 2;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  maxEvaluations  /  2;  ,this.starts = starts / 4; this.maxEvaluations = maxEvaluations / 2;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    maxEvaluations;    this.maxEvaluations  =  totalEvaluations;  this.totalEvaluations  =  totalEvaluations;  ,this.maxEvaluations = maxEvaluations; this.maxEvaluations = totalEvaluations; this.totalEvaluations = starts;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    maxEvaluations;    this.maxEvaluations  =  totalEvaluations;  this.totalEvaluations  =  totalEvaluations;  ,this.maxEvaluations = maxEvaluations; this.maxEvaluations = totalEvaluations; this.totalEvaluations = 0;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    +    1;    this.maxEvaluations  =  maxEvaluations  +  1  -  1;  this.totalEvaluations  =  starts  +  1;  ,this.starts = starts - 1; this.maxEvaluations = maxEvaluations + 1; this.totalEvaluations = starts + 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  1;  int  starts  =  Math.min(startValue,  max);  ,totalEvaluations = 1; double starts = Math.min(startValue, max);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  max  +(min  -  min)?  min  :  min  +  generator.nextDouble()  *(max  -  min);  ,this.maxEvaluations = starts + 1; this.totalEvaluations = totalEvaluations;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  initialEvaluations;  this.totalEvaluations  =  totalEvaluations;  ,this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, int  totalEvaluations  =  minEvaluations  *  1;  ,int totalEvaluations = starts * 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, int  starts  =  this.starts  =  getStartUnivariateRealPointValuePair();  ,totalEvaluations = 2; totalEvaluations = 4; totalEvaluations = 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, int  starts  =  this.starts  =  getStartUnivariateRealPointValuePair();  ,totalEvaluations = 0; totalEvaluations = 4; totalEvaluations = 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, int  starts  =  this.starts  =  getStartUnivariateRealPointValuePair();  ,totalEvaluations = 3; totalEvaluations = 4; totalEvaluations = 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, int  starts  =  this.starts  =  getStartUnivariateRealPointValuePair();  ,totalEvaluations = 2; totalEvaluations = 4; totalEvaluations = 0;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  maxEvaluations;  this.sumEvaluations  =  0;  ,this.maxEvaluations = maxEvaluations; this.totalEvaluations = 0;
increase failing tests,74,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  totalEvaluations;  int  starts  =  generator.getStartEvaluation(startValue,  endValue);  ,this.maxEvaluations = Math.max(optima.length, 1000);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  =  5;  int  starts  =  Math.min(max,  min);  ,totalEvaluations = 5; double starts = Math.min(max, min);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, this.totalEvaluations  =  totalEvaluations  -  1;  int  starts  =  f.getStart();  ,int starts = this.totalEvaluations - 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  1  -  generator.generateUnivariatePointValues();  ,int totalEvaluations = maxEvaluations + 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  +=  1;  int  starts  =  Math.min(startValue,  max);  ,totalEvaluations += 1; double starts = Math.min(startValue, max);
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, int  starts  =  this.minEvaluations;  ,int starts = maxEvaluations;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  0;  int  starts  =  Math.min(startValue,  max)+  1;  ,totalEvaluations = 0; double starts = Math.min(startValue, max)+ 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, if(optimize  ==  null)  {  totalEvaluations  =  1;  totalEvaluations  =  1;  }  else  {  System.err.println( "Unable  to  verify  the  given  value ");  }  ,if(generator == null) { totalEvaluations = 1; totalEvaluations = 1; } else { System.err.println("Unable to verify the given value"); }
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, if(optimize  ==  null)  {  totalEvaluations  =  1;  totalEvaluations  =  1;  }  else  {  System.err.println( "Unable  to  verify  the  given  value ");  }  ,if(optimizer == null) { totalEvaluations = 1; totalEvaluations = 1; } else { System.err.println("Unable to verify the given value"); }
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    maxEvaluations;    this.maxEvaluations  =  totalEvaluations;  this.totalEvaluations  =  totalEvaluations;  ,this.maxEvaluations = starts; this.maxEvaluations = totalEvaluations; this.totalEvaluations = totalEvaluations;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  totalEvaluations  -  1;  ,this.starts = starts - 2; this.maxEvaluations = totalEvaluations - 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  totalEvaluations  -  1;  ,this.starts = starts / 2; this.maxEvaluations = totalEvaluations - 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, double  starts  =  Math.min(startValue,  maximum);  ,double starts = Math.min(startValue, 0);
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  -=  1;  int  starts  =  Math.min(startValue,  max)+  1;  ,totalEvaluations -= 1; double starts = Math.min(startValue, max)+ 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  1;  ,this.maxEvaluations = 0; this.starts = 0; this.totalEvaluations = 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  1;  ,this.maxEvaluations = 1; this.maxEvaluations = 0; this.totalEvaluations = 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  1;  ,this.maxEvaluations = 0; this.maxEvaluations = 0; this.totalEvaluations = 2;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  maxEvaluations  -  1;  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations - 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    maxEvaluations;    this.maxEvaluations  =  totalEvaluations;  this.totalEvaluations  =  totalEvaluations  +  1;  ,this.maxEvaluations = starts; this.maxEvaluations = totalEvaluations; this.totalEvaluations = totalEvaluations + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    maxEvaluations;    this.maxEvaluations  =  totalEvaluations;  this.totalEvaluations  =  totalEvaluations  +  1;  ,this.maxEvaluations = totalEvaluations; this.maxEvaluations = totalEvaluations; this.totalEvaluations = totalEvaluations + 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  Math.max(optimizer,  f,  starts,  maxEvaluations);  ,this.maxEvaluations = totalEvaluations;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  Math.max(optimizer,  f,  starts,  maxEvaluations);  ,this.maxEvaluations = starts;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, totalEvaluations  +=  1;  int  starts  =  Math.min(startValue,  max)-  startValue;  ,totalEvaluations += 1; double starts = Math.min(startValue, max)- startValue;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations  -  1;  ,this.maxEvaluations = 0; this.starts = 0; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations  -  1;  ,this.maxEvaluations = 1; this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations  -  1;  ,this.maxEvaluations = 0; this.maxEvaluations = 1; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  begins  =  min  -  startValue;  ,double begins = min - startValue;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  maxEvaluations  -  1;  ,this.starts = starts - 2; this.maxEvaluations = maxEvaluations - 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  1  -  generator.generateUnivariatePointValues();  ,totalEvaluations -= 1; int totalEvaluations = starts + 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  1  -  generator.generateUnivariatePointValues();  ,totalEvaluations -= 2; int totalEvaluations = starts + 1;
increase failing tests,155,add, [FE] AssertionError testQuinticMin, ,this.maxEvaluations  =  maxEvaluations  *  2;  int totalEvaluations = maxEvaluations * 2;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, if(optima!=  null)  {  optima  =  new  UnivariateRealPointValuePair[starts];  this.minEvaluations  =  minEvaluations  *  1;  }  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations / 2;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, if(optima!=  null)  {  optima  =  new  UnivariateRealPointValuePair[starts];  this.minEvaluations  =  minEvaluations  *  1;  }  ,this.starts = starts + 1; this.maxEvaluations = maxEvaluations / 2;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, this.totalEvaluations  =  totalEvaluations;  int  starts  =  this.optimizedEvaluations;  ,this.totalEvaluations = totalEvaluations; int starts = 0;
increase failing tests,74,replace, [FE] ArithmeticException testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  Math.max(maxEvaluations,  starts);  ,this.starts = starts/0; this.maxEvaluations = Math.max(maxEvaluations, starts);
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  Math.max(optimization,  maxEvaluations);  ,this.maxEvaluations = Math.max(totalEvaluations, maxEvaluations);
increase failing tests,155,add, [FE] AssertionError testQuinticMin, ,totalEvaluations  +=  5;  int totalEvaluations = 1;
increase failing tests,155,add, [FE] AssertionError testQuinticMin, ,totalEvaluations  +=  5;  int totalEvaluations = 5;
increase failing tests,155,add, [FE] AssertionError testQuinticMin, ,this.totalEvaluations  =  0;  int totalEvaluations = starts - 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations;  ,this.maxEvaluations = starts; this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations;  ,this.maxEvaluations = 0; this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations + 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  totalEvaluations  +  1;  ,this.starts = starts / 2; this.maxEvaluations = totalEvaluations + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.totalEvaluations  =  toTotalEvaluations;  ,this.totalEvaluations = maxEvaluations;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, float  starts  =  min  -  startValue  +  Math.min(max,  startValue);  ,double starts = max - startValue + Math.min(max, startValue);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  maxEvaluations;  int  starts  =  generator.getStartEvaluation(thenValue,  outputFactory);  ,final int totalEvaluations = Math.min(starts, maxEvaluations + 1);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  maxEvaluations  /  2;  ,this.totalEvaluations = totalEvaluations / 1 + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations    =    7;    totalEvaluations  =  7;  int  starts  =  getStarts();  ,int totalEvaluations = 0; totalEvaluations = 0;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.maxEvaluations  =  maxEvaluations  +  1;  int  totalEvaluations  =  minEvaluations  +  1;  ,int totalEvaluations = starts + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.totalEvaluations  =  totalEvaluations  *  1;  int  starts  =  getStarts();  ,int totalEvaluations = this.totalEvaluations * 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.maxEvaluations  =  totalEvaluations  -  1;  int  totalEvaluations  =  this.minEvaluations  -  1;  ,this.maxEvaluations = totalEvaluations - 1; int totalEvaluations = starts - 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  Math.max(0,  totalEvaluations);  ,this.maxEvaluations = 0; this.maxEvaluations = 0; this.totalEvaluations = Math.max(0, totalEvaluations + 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts    =    starts    +    1;    this.maxEvaluations  =  starts  +  1;  this.totalEvaluations  =  totalEvaluations  -  1;  ,this.starts = starts - 1; this.maxEvaluations = starts + 1; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  totalEvaluations  -  1;  ,this.starts = starts * 2; this.maxEvaluations = totalEvaluations - 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  starts  =  max  +(min  -  min)?  min  :  min  +  generator.nextDouble()  *(max  -  min);  ,this.maxEvaluations = totalEvaluations + 1; this.totalEvaluations = totalEvaluations;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  starts  +  1;  ,this.starts = starts / 2; this.maxEvaluations = starts / 1;
increase failing tests,155,add, [FE] AssertionError testQuinticMin, ,totalEvaluations  =  0;  totalEvaluations  =  3;  int totalEvaluations = 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.totalEvaluations  =  totalEvaluations;  int  starts  =  getStarts();  ,int totalEvaluations = this.totalEvaluations;
increase failing tests,155,add, [FE] AssertionError testQuinticMin, ,totalEvaluations  =  0;  totalEvaluations  =  0;  int totalEvaluations = starts - 1;
increase failing tests,155,add, [FE] AssertionError testQuinticMin, ,totalEvaluations  =  0;  totalEvaluations  =  0;  int totalEvaluations = starts + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, this.maxEvaluations  =  Math.max(maxEvaluations,  1);  int  totalEvaluations  =  Math.min(startValue,  min);  ,int totalEvaluations = Math.min(maxEvaluations, 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  maxEvaluations  +  1;  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations / 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, int  starts  =  this.minEvaluations  -  1;  ,int starts = totalEvaluations - 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, int  starts  =  Math.min(startValue,  min  +  1);  ,double starts = Math.min(startValue, max + 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  0;  ,this.starts = starts * 2; this.maxEvaluations = 0;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations  -  1;  ,this.maxEvaluations = starts; this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations  -  1;  ,this.maxEvaluations = 0; this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations * 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, if(optimize  ==  null)  {  totalEvaluations  =  1;  totalEvaluations  =  1;  }  else  {  System.arraycopy(optimized,  0,  optima,  startValue);  }  ,if(optimizer == null) { totalEvaluations = 1; totalEvaluations = 1; }
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  =  1;  float  totalEvaluations  =  maxEvaluations  *(min  -  min);  ,double totalEvaluations = maxEvaluations *(min - min);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, int  starts  =  this.starts  =  getStartUnivariateRealPointValuePair();  ,totalEvaluations = 0; totalEvaluations = 4;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, int  starts  =  this.starts  =  getStartUnivariateRealPointValuePair();  ,totalEvaluations = 0; totalEvaluations = 4; totalEvaluations = 5;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, int  starts  =  this.starts  =  getStartUnivariateRealPointValuePair();  ,totalEvaluations = 0; totalEvaluations = 4; totalEvaluations = 7;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  starts  +  1  -  generator.startOptimizer(generator);  ,this.maxEvaluations = maxEvaluations * 2;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  Math.max(maxEvaluations,  starts,  generator,  baseUri);  ,maxEvaluations = Math.min(maxEvaluations, totalEvaluations + 1);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  maxEvaluations  -  1;  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations - 2;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, optima  =  new  UnivariateRealPointValuePair[starts];  ,optima = new UnivariateRealPointValuePair[starts + 1];
increase failing tests,155,add, [FE] AssertionError testQuinticMin, ,totalEvaluations  =  4;  totalEvaluations  =  4;  int totalEvaluations = 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  ends;  this.maxEvaluations  =  totalEvaluations;  ,this.maxEvaluations = totalEvaluations; this.maxEvaluations = starts;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  maximumEvaluations;  this.maxEvaluations  =  0;  ,totalEvaluations = 7;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  maximumEvaluations;  this.maxEvaluations  =  0;  ,totalEvaluations = 5;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  maximumEvaluations;  this.maxEvaluations  =  0;  ,totalEvaluations = 6;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  -=  1;  totalEvaluations  -=  2;  ,totalEvaluations -= 2; int totalEvaluations = 2;
increase failing tests,74,replace, [FE] TooManyEvaluationsException testQuinticMin, this.starts  =  starts  +  3;  this.maxEvaluations  =  0;  ,this.starts = starts * 3; this.maxEvaluations = 0;
increase failing tests,155,add, [FE] AssertionError testQuinticMin, ,this.totalEvaluations  =  totalEvaluations  /  1;  int totalEvaluations = maxEvaluations - 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, totalEvaluations  =  0;  overallEvaluations  =  2;  ,totalEvaluations = 0; this.totalEvaluations = 2;
increase failing tests,155,add, [FE] AssertionError testQuinticMin, ,totalEvaluations  =  3;  totalEvaluations  =  3;  int totalEvaluations = 1;
increase failing tests,155,add, [FE] AssertionError testQuinticMin, ,totalEvaluations  =  3;  totalEvaluations  =  3;  int totalEvaluations = 0;
increase failing tests,155,add, [FE] AssertionError testQuinticMin, ,totalEvaluations  =  3;  totalEvaluations  =  3;  int totalEvaluations = starts + 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, if(optimize  ==  null)  {  totalEvaluations  =  1;  totalEvaluations  =  1;  }  else  {  System.err.println( "Unable  to  verify  the  given  value ");  }  ,if(generator == null) { totalEvaluations = 1; totalEvaluations = 1; }
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, this.maxEvaluations  =  totalEvaluations  -  1;  int  starts  =  this.minEvaluations  -  1;  ,this.maxEvaluations = totalEvaluations - 1; int starts = maxEvaluations - 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, int  starts  =  this.minEvaluations;  ,int starts = 0;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin,         this.maxEvaluations    =    maxEvaluations;    this.totalEvaluations  =  totalEvaluations;  this.univariateRealPointValuePair  =  new  UnivariateRealPointValuePair();  ,totalEvaluations = 0; totalEvaluations = 7;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  2;  this.totalEvaluations  =  starts  +  1;  ,this.starts = starts * 2; this.totalEvaluations = starts + 1;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  starts  /  1;  ,this.starts = starts / 2; this.maxEvaluations = starts / 2;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  +=  1;  int  totalEvaluations  =  totalEvaluations  -  1;  ,totalEvaluations += 1; int totalEvaluations = starts - 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.generator  =  generator,  0;  ,this.maxEvaluations = maxEvaluations; this.maxEvaluations = totalEvaluations;
increase failing tests,155,add, [FE] AssertionError testQuinticMin, ,this.maxEvaluations  =  starts  +  1;  int totalEvaluations = starts + 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  totalEvaluations  +  1  -  1;  ,this.totalEvaluations = totalEvaluations + 1 / 2 + 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.talenEvaluations  =  starts  -  1;  ,this.totalEvaluations = starts - 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.generator  =  optimizer?  generator  :  baseUri;  ,this.maxEvaluations = totalEvaluations; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  0;  ,this.maxEvaluations = 1; this.maxEvaluations = 1; this.totalEvaluations = 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    maxEvaluations    +    1    /    2;    this.totalEvaluations  =  totalEvaluations  +  1  /  2;  this.univariateRealPointValuePair  =  createMultiStartUnivariateRealPointValuePair(generator);  ,this.maxEvaluations = maxEvaluations + 1; this.totalEvaluations = totalEvaluations + 1 / 2;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  Math.max(maxEvaluations,  starts,  generator,  baseUri);  ,maxEvaluations = Math.max(starts, totalEvaluations + 1);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  2;  this.maxEvaluations  =  maxEvaluations  -  1;  ,this.totalEvaluations = maxEvaluations - 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, float  starts  =  max  -  startValue;  ,double begins = max - startValue;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1  +  1;  ,this.starts = starts / 4 + 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  +=  3;  ,totalEvaluations += 1000;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  &&  this.maxEvaluations  >  0?  1  :  0;  ,this.starts = starts + this.maxEvaluations > 0? 1 : 0;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations;  ,this.maxEvaluations = 0; this.maxEvaluations = 1; this.totalEvaluations = totalEvaluations;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  maximumEvaluations;  this.maxEvaluations  =  0;  ,totalEvaluations = 8;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  &&  totalEvaluations  >  0?  1  :  0;  ,this.starts = starts + totalEvaluations > 0? 1 : 0;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  -=  1;  totalEvaluations  -=  2;  ,totalEvaluations -= 1; int totalEvaluations = maxEvaluations - 1;
increase failing tests,155,replace, [FE] AssertionError testQuinticMin, totalEvaluations  +=  1;  int  totalEvaluations  =  totalEvaluations  -  1;  ,totalEvaluations += 1; int totalEvaluations = maxEvaluations - 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    maxEvaluations;    this.maxEvaluations  =  totalEvaluations;  this.totalEvaluations  =  totalEvaluations  +  1;  ,this.maxEvaluations = maxEvaluations; this.maxEvaluations = starts; this.totalEvaluations = totalEvaluations + 1;
increase failing tests,155,replace, [FE] ConvergenceException testQuinticMin, this.totalEvaluations  =  totalEvaluations  *  1;  int  starts  =  this.optimizedEvaluations;  ,this.totalEvaluations = totalEvaluations * 1; int starts = 0;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  Math.max(maxEvaluations,  totalEvaluations,  generator,  starts);  ,int totalEvaluations = maxEvaluations - 1;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, float  starts  =  Math.min(startValue,  max  +  1);  ,double begins = Math.min(startValue, max + 1);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  maxEvaluations;  this.sumEvaluations  =  0;  ,this.maxEvaluations = maxEvaluations; this.totalEvaluations = 0;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  Math.max(maxEvaluations,  starts);  ,this.starts = starts / 2; this.maxEvaluations = Math.max(this.maxEvaluations, starts);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  Math.max(maxEvaluations,  starts);  ,this.starts = starts / 2; this.maxEvaluations = Math.max(totalEvaluations, starts);
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  /  1;  this.maxEvaluations  =  maxEvaluations  /  2  *(starts  -  1);  ,this.starts = starts / 2; this.maxEvaluations = maxEvaluations / 2 *(totalEvaluations - 1);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    0;    this.maxEvaluations  =  0;  this.totalEvaluations  =  totalEvaluations  -  1;  ,this.maxEvaluations = 0; this.maxEvaluations = 0; this.totalEvaluations = starts - 1;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin,         this.maxEvaluations    =    maxEvaluations;    this.maxEvaluations  =  totalEvaluations;  this.totalEvaluations  =  totalEvaluations;  ,this.maxEvaluations = maxEvaluations; this.maxEvaluations = starts; this.totalEvaluations = totalEvaluations;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  allEvaluations  *  1;  ,this.maxEvaluations = 0 * 1;
increase failing tests,155,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, optima  =  new  UnivariateRealPointValuePair[starts];  ,optima = new UnivariateRealPointValuePair[2];
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  3;  this.maxEvaluations  =  0;  ,this.starts = starts + 5; this.maxEvaluations = 0;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  Math.max(optimizer,  f,  starts,  maxEvaluations);  ,this.maxEvaluations = maxEvaluations;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.generator  =  generator,  0;  ,this.maxEvaluations = maxEvaluations; this.maxEvaluations = starts;
increase failing tests,154,replace, [FE] NullPointerException testQuinticMin, int  begins  =  min  -  startValue;  ,double beginnings = min - startValue;
increase failing tests,74,replace, [FE] AssertionError testQuinticMin, this.starts  =  starts  +  0;  ,this.starts = starts - 1 + 0;
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.maxEvaluations  =  values;  this.totalEvaluations  =  totalEvaluations  -  1;  ,this.maxEvaluations = 0; this.totalEvaluations = totalEvaluations - 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.maxEvaluations  =  1  -  generator.generateUnivariatePointValues();  ,totalEvaluations -= 1; int totalEvaluations = maxEvaluations + 1;
increase failing tests,75,replace, [FE] NullPointerException testQuinticMin, this.multiStartUnivariateRealPointValuePair  =  createUnivariateRealPointValuePair(maxEvaluations,  generator);  ,maxEvaluations = Math.max(maxEvaluations, 0);
increase failing tests,74,replace, [FE] ArrayIndexOutOfBoundsException testQuinticMin, this.starts  =  starts  +  1;  this.maxEvaluations  =  totalEvaluations  +  1  -  1;  ,this.totalEvaluations = totalEvaluations + 1 / 2;
