bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	n.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  n.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	28	None	replace
2	[BUG]  [BUGGY]  n.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  n.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	n.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);	  n.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	28	None	replace
3	[BUG]  [BUGGY]  addExpr(last.getNext(),  2,  rhsContext);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(last.getNext(),  2,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(last.getNext(),  2,  rhsContext);	  addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  orphaned  case	18	None	replace
4	[BUG]  [BUGGY]  addExpr(first.getNext(),  3,  rhsContext);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(first.getNext(),  3,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(first.getNext(),  3,  rhsContext);	  addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  orphaned  case	18	None	replace
5	[BUG]  [BUGGY]  cc.addOp( "! ".,  false);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "! ".,  false);  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "! ".,  false);	  cc.addOp(   "!   ".,    true);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
6	[BUG]  [BUGGY]  cc.addOp( "!   ".equals(last.getString()));  addExpr(first.getNext(),  1,  rhsContext);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "!   ".equals(last.getString()));  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "!   ".equals(last.getString()));  addExpr(first.getNext(),  1,  rhsContext);	  cc.addOp(   "!   ".equals(first.getString()));    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	13	None	replace
7	[BUG]  [BUGGY]  cc.addOp( "!. ".equals(first.getString()));  addExpr(first.getNext(),  1,  rhsContext);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "!. ".equals(first.getString()));  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "!. ".equals(first.getString()));  addExpr(first.getNext(),  1,  rhsContext);	  cc.addOp(   "!   ".equals(first.getString()));    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	13	None	replace
8	[BUG]  [BUGGY]  cc.addOp( ":   ",  false);  addExpr(first,  1,  rhsContext);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( ":   ",  false);  addExpr(first,  1,  rhsContext);  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( ":   ",  false);  addExpr(first,  1,  rhsContext);	  cc.addOp(   "?       ",    false);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	14	None	replace
9	[BUG]  [BUGGY]  cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]              ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);	  cc.addOp(   ",       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  unclosed  string  literal	10	None	replace
10	[BUG]  [BUGGY]  cc.addOp( ":  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]              ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( ":  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( ":  true);  addExpr(first.getNext(),  1,  rhsContext);	  cc.addOp(   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  unclosed  string  literal	29	None	replace
11	[BUG]  [BUGGY]  cc.addOp( ",  true);  addExpr(first.getNext(),  1,  context);  [CE]  unclosed  string  literal  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( ",  true);  addExpr(first.getNext(),  1,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( ",  true);  addExpr(first.getNext(),  1,  context);	  cc.addOp(   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  unclosed  string  literal	29	None	replace
12	[BUG]  [BUGGY]  parent.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  parent.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	parent.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	30	None	replace
13	[BUG]  [BUGGY]  parent.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  parent.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	parent.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  if(last    ==    null)    {    cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
14	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	n.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  n.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	33	None	replace
15	[BUG]  [BUGGY]  n.addOp( ": ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  n.addOp( ": ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	n.addOp( ": ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  n.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	33	None	replace
16	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(first,  1,  rhsContext);  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(first,  1,  rhsContext);	  addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	26	None	replace
17	[BUG]  [BUGGY]  addExpr(n,  1,  rhsContext);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(n,  1,  rhsContext);  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(n,  1,  rhsContext);	  addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	26	None	replace
18	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(childCount    ==    2)    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	44	None	replace
19	[BUG]  [BUGGY]  cc.addOp( ": ",  true);  addExpr(last.getNext(),  1,  rhsContext);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( ": ",  true);  addExpr(last.getNext(),  1,  rhsContext);  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( ": ",  true);  addExpr(last.getNext(),  1,  rhsContext);	  cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	1	None	replace
20	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(first,  0,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(first,  0,  rhsContext);	  addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  orphaned  case	35	None	replace
21	[BUG]  [BUGGY]  addExpr(last,  0,  p);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(last,  0,  p);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(last,  0,  p);	  addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  orphaned  case	35	None	replace
22	[BUG]  [BUGGY]  cc.addOp( ": ");  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( ": ");  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( ": ");	  addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  orphaned  case	35	None	replace
23	[BUG]  [BUGGY]  cc.addOp( "!   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "!   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "!   ",  false);  addExpr(last.getNext(),  1,  rhsContext);	  cc.addOp(   "!       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	41	None	replace
24	[BUG]  [BUGGY]  addExpr(last.getNext(),  1,  cc);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(last.getNext(),  1,  cc);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(last.getNext(),  1,  cc);	  addExpr(first.getNext(),    1,    cc);    	non-compiled	[CE]  orphaned  case	20	None	replace
25	[BUG]  [BUGGY]  addExpr(first.getNext(),  2,  cc);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(first.getNext(),  2,  cc);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(first.getNext(),  2,  cc);	  addExpr(first.getNext(),    1,    cc);    	non-compiled	[CE]  orphaned  case	20	None	replace
26	[BUG]  [BUGGY]  addExpr(first.getNext(),  0,  cc);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(first.getNext(),  0,  cc);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(first.getNext(),  0,  cc);	  addExpr(first.getNext(),    1,    cc);    	non-compiled	[CE]  orphaned  case	20	None	replace
27	[BUG]  [BUGGY]  cc.addOp( "!   ".equals(type));  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "!   ".equals(type));  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "!   ".equals(type));	  cc.addOp(   "!   ".equals(p));    	non-compiled	[CE]  orphaned  case	45	None	replace
28	[BUG]  [BUGGY]  cc.addOp( "!   ".equals(context));  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "!   ".equals(context));  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "!   ".equals(context));	  cc.addOp(   "!   ".equals(p));    	non-compiled	[CE]  orphaned  case	45	None	replace
29	[BUG]  [BUGGY]  cc.addOp( "!. ".equals(p));  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "!. ".equals(p));  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "!. ".equals(p));	  cc.addOp(   "!   ".equals(p));    	non-compiled	[CE]  orphaned  case	45	None	replace
30	[BUG]  [BUGGY]  addExpr(last.getNext(),  1,  context);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(last.getNext(),  1,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(last.getNext(),  1,  context);	  addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	17	None	replace
31	[BUG]  [BUGGY]  cc.addOp( ":   ",  false);  addExpr(last,  0,  rhsContext);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( ":   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( ":   ",  false);  addExpr(last,  0,  rhsContext);	  cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  orphaned  case	15	None	replace
32	[BUG]  [BUGGY]  cc.addOp( ",   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( ",   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( ",   ",  false);  addExpr(last.getNext(),  1,  rhsContext);	  cc.addOp(   ",       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	23	None	replace
33	[BUG]  [BUGGY]  cc.addOp( "!. ".equals(first.getString()));  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "!. ".equals(first.getString()));  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "!. ".equals(first.getString()));	  cc.addOp(   "!   ".equals(first.getString()));    	non-compiled	[CE]  orphaned  case	4	None	replace
34	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "?   ",  false);  addExpr(last.getNext(),  1,  rhsContext);	  cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	2	None	replace
35	[BUG]  [BUGGY]  cc.addOp( ": ".,  false);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( ": ".,  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( ": ".,  false);  addExpr(first.getNext(),  1,  rhsContext);	  cc.addOp(   ":       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
36	[BUG]  [BUGGY]  addExpr(last.getNext(),  0,  rhsContext);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(last.getNext(),  0,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(last.getNext(),  0,  rhsContext);	  addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  orphaned  case	19	None	replace
37	[BUG]  [BUGGY]  addExpr(first.getNext(),  0,  p);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(first.getNext(),  0,  p);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(first.getNext(),  0,  p);	  addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  orphaned  case	19	None	replace
38	[BUG]  [BUGGY]  addExpr(first.getNext(),  0,  context);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(first.getNext(),  0,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(first.getNext(),  0,  context);	  addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  orphaned  case	19	None	replace
39	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "!   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "!   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  1)  {  cc.addOp( "!   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  cc.addOp(   "!       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	41	None	replace
40	[BUG]  [BUGGY]  cc.addOp( "!   ",  p.equals(p));  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "!   ",  p.equals(p));  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "!   ",  p.equals(p));	  cc.addOp(   "!   ".equals(p));    	non-compiled	[CE]  orphaned  case	45	None	replace
41	[BUG]  [BUGGY]  cc.addOp( "!   ");  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "!   ");  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "!   ");	  cc.addOp(   "!   ".equals(p));    	non-compiled	[CE]  orphaned  case	45	None	replace
42	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "!   ".equals(first.getString()));  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "!   ".equals(first.getString()));  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  1)  {  cc.addOp( "!   ".equals(first.getString()));  addExpr(first.getNext(),  1,  rhsContext);  }	  cc.addOp(   "!   ".equals(first.getString()));    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	13	None	replace
43	[BUG]  [BUGGY]  cc.addOp( "!   ",  first.getString());  addExpr(first.getNext(),  1,  rhsContext);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "!   ",  first.getString());  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "!   ",  first.getString());  addExpr(first.getNext(),  1,  rhsContext);	  cc.addOp(   "!   ".equals(first.getString()));    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	13	None	replace
44	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  true);  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	n.addOp( "?   ",  true);	  n.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	28	None	replace
45	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	42	None	replace
46	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( ",   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( ",   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  1)  {  cc.addOp( ",   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  cc.addOp(   ",       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	23	None	replace
47	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(last    ==    null)    {    cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
48	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(last    ==    null)    {    cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	39	None	replace
49	[BUG]  [BUGGY]  cc.addOp( "! ".,  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "! ".,  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "! ".,  true);  addExpr(first.getNext(),  1,  rhsContext);	  cc.addOp(   "!       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
50	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	n.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);	  cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  orphaned  case	15	None	replace
51	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  addExpr(last,  2,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	addExpr(last,  2,  rhsContext);	  addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  orphaned  case	35	None	replace
52	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	2	None	replace
53	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  n.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	n.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);	  cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	2	None	replace
54	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  1)  {  cc.addOp( ":   ",  false);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   ":       ",    false);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	25	None	replace
55	[BUG]  [BUGGY]  cc.addOp( "!   ",  first.getString());  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "!   ",  first.getString());  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "!   ",  first.getString());	  cc.addOp(   "!   ".equals(first.getString()));    	non-compiled	[CE]  orphaned  case	4	None	replace
56	[BUG]  [BUGGY]  cc.addOp( "!   ".equals(last.getString()));  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "!   ".equals(last.getString()));  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "!   ".equals(last.getString()));	  cc.addOp(   "!   ".equals(first.getString()));    	non-compiled	[CE]  orphaned  case	4	None	replace
57	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   ":   ".,    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	40	None	replace
58	[BUG]  [BUGGY]  cc.addOp( "!   ".equals(p  +  1));  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( "!   ".equals(p  +  1));  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( "!   ".equals(p  +  1));	  cc.addOp(   "!   ".equals(p));    	non-compiled	[CE]  orphaned  case	45	None	replace
59	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "!   ".equals(first.getString()));  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "!   ".equals(first.getString()));  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  2)  {  cc.addOp( "!   ".equals(first.getString()));  addExpr(first.getNext(),  1,  rhsContext);  }	  cc.addOp(   "!   ".equals(first.getString()));    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	13	None	replace
60	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "!   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "!   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  1)  {  cc.addOp( "!   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }	  cc.addOp(   "!       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	12	None	replace
61	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(last!=  null)  {  cc.addOp( ",   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  cc.addOp(   ",       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	23	None	replace
62	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	42	None	replace
63	[BUG]  [BUGGY]  cc.addOp( ":. ",  true);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  cc.addOp( ":. ",  true);  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	cc.addOp( ":. ",  true);	  cc.addOp(   ":       ",    true);    	non-compiled	[CE]  orphaned  case	5	None	replace
64	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  orphaned  case	15	None	replace
65	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	32	None	replace
66	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( ":   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( ":   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  1)  {  cc.addOp( ":   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }	  cc.addOp(   ":       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	24	None	replace
67	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	30	None	replace
68	[BUG]  [BUGGY]  if(childCount  >  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(childCount  >  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(childCount  >  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	30	None	replace
69	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }  [BUGGY]      }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	2	None	replace
