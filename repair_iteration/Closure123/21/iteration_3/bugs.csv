bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	cc.addOp( "?   ",  true);  addExpr(last.getNext(),  1,  rhsContext);	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
2	[BUG]  [BUGGY]  parent.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  parent.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	parent.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  if(last    ==    null)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
3	[BUG]  [BUGGY]  Node  last  =  rhsContext.getFirstChild();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  Node  last  =  rhsContext.getFirstChild();  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	Node  last  =  rhsContext.getFirstChild();	  Node    last    =    rhsContext.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
4	[BUG]  [BUGGY]  addExpr(first,  1,  p  +  1);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first,  1,  p  +  1);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first,  1,  p  +  1);	  addExpr(first,    1,    p);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
5	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  context);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first,  p  +  1,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first,  p  +  1,  context);	  addExpr(first,    1,    p);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
6	[BUG]  [BUGGY]  addExpr(first,  0,  p);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first,  0,  p);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first,  0,  p);	  addExpr(first,    1,    p);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
7	[BUG]  [BUGGY]  Node  last  =  first.getLastChild()  +  1;  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  Node  last  =  first.getLastChild()  +  1;  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	Node  last  =  first.getLastChild()  +  1;	  Node    last    =    n.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
8	[BUG]  [BUGGY]  Node  last  =  n.getFirstChild()  +  1;  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  Node  last  =  n.getFirstChild()  +  1;  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	Node  last  =  n.getFirstChild()  +  1;	  Node    last    =    n.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
9	[BUG]  [BUGGY]  Node  last  =  rhsContext.getLastChild()  +  1;  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  Node  last  =  rhsContext.getLastChild()  +  1;  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	Node  last  =  rhsContext.getLastChild()  +  1;	  Node    last    =    n.getLastChild()    +    1;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
10	[BUG]  [BUGGY]  addExpr(first,  p,  context);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first,  p,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first,  p,  context);	  addExpr(first,    p,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
11	[BUG]  [BUGGY]  addExpr(first,  0,  context);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first,  0,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first,  0,  context);	  addExpr(last,    0,    context);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
12	[BUG]  [BUGGY]  addExpr(n,  0,  context);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(n,  0,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(n,  0,  context);	  addExpr(last,    0,    context);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
13	[BUG]  [BUGGY]  addExpr(p,  0,  context);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(p,  0,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(p,  0,  context);	  addExpr(last,    0,    context);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
14	[BUG]  [BUGGY]  cc.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);  break;  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  cc.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);  break;  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	cc.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);  break;	  cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
15	[BUG]  [BUGGY]  addExpr(first,  p  +  1);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first,  p  +  1);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first,  p  +  1);	  addExpr(first,    p);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
16	[BUG]  [BUGGY]  cc.addOp( ": ");  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  cc.addOp( ": ");  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	cc.addOp( ": ");	  addExpr(first,    p);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
17	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  break;  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  break;  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  break;	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    break;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
18	[BUG]  [BUGGY]  cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);  break;  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);  break;  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);  break;	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    break;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
19	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  cc);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first,  p  +  1,  cc);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first,  p  +  1,  cc);	  addExpr(last,    p    +    1,    cc);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]  cc.addOp( ": ",  true);  addExpr(last,  0,  rhsContext);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  cc.addOp( ": ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	cc.addOp( ": ",  true);  addExpr(last,  0,  rhsContext);	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
21	[BUG]  [BUGGY]  cc.addOp( ": ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  cc.addOp( ": ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	cc.addOp( ": ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  cc.addOp(   ":   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
22	[BUG]  [BUGGY]  addExpr(p,  0,  rhsContext);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(p,  0,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(p,  0,  rhsContext);	  addExpr(n,    0,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
23	[BUG]  [BUGGY]  addExpr(n,  0,  p);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(n,  0,  p);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(n,  0,  p);	  addExpr(n,    0,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
24	[BUG]  [BUGGY]  Node  last  =  first.getNext();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  Node  last  =  first.getNext();  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	Node  last  =  first.getNext();	  Node    last    =    first.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
25	[BUG]  [BUGGY]  addExpr(first,  p,  cc);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first,  p,  cc);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first,  p,  cc);	  addExpr(first,    1,    cc);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  addExpr(first,  0,  cc);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first,  0,  cc);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first,  0,  cc);	  addExpr(first,    1,    cc);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  Node  last  =  context.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  Node  last  =  context.getFirstChild();  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	Node  last  =  context.getFirstChild();	  Node    last    =    context.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
28	[BUG]  [BUGGY]  addExpr(last,  1,  p);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  1,  p);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  1,  p);	  addExpr(n,    1,    p);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
29	[BUG]  [BUGGY]  addExpr(n,  1,  p  +  1);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(n,  1,  p  +  1);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(n,  1,  p  +  1);	  addExpr(n,    1,    p);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
30	[BUG]  [BUGGY]  addExpr(p,  1,  n);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(p,  1,  n);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(p,  1,  n);	  addExpr(n,    1,    p);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
31	[BUG]  [BUGGY]  addExpr(first.getNext(),  p  +  1,  rhsContext);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first.getNext(),  p  +  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first.getNext(),  p  +  1,  rhsContext);	  addExpr(n,    p    +    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  addExpr(n,  p  +  1,  context);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(n,  p  +  1,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(n,  p  +  1,  context);	  addExpr(n,    p    +    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  cc.addOp( ": ".,  false);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  cc.addOp( ": ".,  false);  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	cc.addOp( ": ".,  false);	  cc.addOp(   ":       ",    false);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
34	[BUG]  [BUGGY]  addExpr(n,  p,  context);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(n,  p,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(n,  p,  context);	  addExpr(last,    p,    context);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
35	[BUG]  [BUGGY]  cc.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  cc.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	cc.addOp( ": ",  false);  addExpr(last,  1,  rhsContext);	  cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
36	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  context);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first.getNext(),  1,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first.getNext(),  1,  context);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
37	[BUG]  [BUGGY]  addExpr(first.getNext(),  0,  rhsContext);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first.getNext(),  0,  rhsContext);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
38	[BUG]  [BUGGY]  addExpr(first.getNext(),  2,  rhsContext);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first.getNext(),  2,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first.getNext(),  2,  rhsContext);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
39	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  p);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first.getNext(),  1,  p);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first.getNext(),  1,  p);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  cc);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first.getNext(),  1,  cc);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first.getNext(),  1,  cc);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
41	[BUG]  [BUGGY]  addExpr(first,  2,  rhsContext);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first,  2,  rhsContext);  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first,  2,  rhsContext);	  addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
42	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  regexp);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  p  +  1,  regexp);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  p  +  1,  regexp);	  addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
43	[BUG]  [BUGGY]  addExpr(last,  0,  p  +  1);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  0,  p  +  1);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  0,  p  +  1);	  addExpr(last,    0,    p);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
44	[BUG]  [BUGGY]  addExpr(last,  0,  p  +  2);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  0,  p  +  2);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  0,  p  +  2);	  addExpr(last,    0,    p);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
45	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
46	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	n.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
47	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  if(childCount    ==    2)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
48	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	53	None	replace
49	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
50	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	53	None	replace
51	[BUG]  [BUGGY]  addExpr(last,  p);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  p);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  p);	  addExpr(first,    p);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
52	[BUG]  [BUGGY]  addExpr(first,  p  +  2);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first,  p  +  2);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first,  p  +  2);	  addExpr(first,    p);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
53	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
54	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
55	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
56	[BUG]  [BUGGY]  addExpr(p,  1,  cc);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(p,  1,  cc);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(p,  1,  cc);	  addExpr(n,    1,    cc);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
57	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  break;  }  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    break;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
58	[BUG]  [BUGGY]  Node  last  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  Node  last  =  node.getLastChild();  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	Node  last  =  node.getLastChild();	  Node    last    =    first.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
59	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
60	[BUG]  [BUGGY]  addExpr(first.getNext(),  3,  rhsContext);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first.getNext(),  3,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first.getNext(),  3,  rhsContext);	  addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
61	[BUG]  [BUGGY]  addExpr(last,  0,  cc.length);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  0,  cc.length);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  0,  cc.length);	  addExpr(last,    0,    cc);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
62	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
63	[BUG]  [BUGGY]  addExpr(last,  1,  rhsContext);  break;  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  1,  rhsContext);  break;  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  1,  rhsContext);  break;	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
64	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
65	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  cc,  context);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  p  +  1,  cc,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  p  +  1,  cc,  context);	  addExpr(last,    p    +    1,    cc);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
66	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
67	[BUG]  [BUGGY]  addExpr(last,  0,  p  +  3);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  0,  p  +  3);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  0,  p  +  3);	  addExpr(last,    0,    p);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
68	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
69	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	55	None	replace
70	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	55	None	replace
71	[BUG]  [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	55	None	replace
72	[BUG]  [BUGGY]  int  childCount  =  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  int  childCount  =  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	int  childCount  =  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
73	[BUG]  [BUGGY]  int  childCount  =  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  int  childCount  =  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	int  childCount  =  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
74	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(last    ==    null)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
75	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
76	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
77	[BUG]  [BUGGY]  addExpr(childCount,  p  +  1,  rhsContext);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(childCount,  p  +  1,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(childCount,  p  +  1,  rhsContext);	  addExpr(n,    p    +    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  int  childCount  =  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  int  childCount  =  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	int  childCount  =  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
79	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  2)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  }	  if(childCount    ==    2)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
80	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(NodeUtil.isExpressionNode(n)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isExpressionNode(n))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
81	[BUG]  [BUGGY]  addExpr(last,  2,  cc);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  2,  cc);  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  2,  cc);	  addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
82	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  3,  rhsContext);  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  3,  rhsContext);	  addExpr(last,    2,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
83	[BUG]  [BUGGY]  addExpr(last,  childCount,  cc);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  childCount,  cc);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  childCount,  cc);	  addExpr(last,    p,    cc);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
84	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  cc.addOp(   ":   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
85	[BUG]  [BUGGY]  Node  last  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  Node  last  =  node.getFirstChild();  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	Node  last  =  node.getFirstChild();	  Node    last    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
86	[BUG]  [BUGGY]  addExpr(last,  0,  p  +  1,  context);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  0,  p  +  1,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  0,  p  +  1,  context);	  addExpr(last,    0,    p);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
87	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
88	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
89	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
90	[BUG]  [BUGGY]  addExpr(first.getNext(),  p  +  1,  context);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(first.getNext(),  p  +  1,  context);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first.getNext(),  p  +  1,  context);	  addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
91	[BUG]  [BUGGY]  if(childCount  >  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  >  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  >  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
92	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
93	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
94	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
95	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(last,    0,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
96	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    false);    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
97	[BUG]  [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  }	  if(last    ==    null)    {    cc.addOp(   "?       ",    true);    addExpr(first.getNext(),    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
98	[BUG]  [BUGGY]  addExpr(last,  p,  cc,  rhsContext);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  addExpr(last,  p,  cc,  rhsContext);  [BUGGY]      break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  p,  cc,  rhsContext);	  addExpr(last,    p,    cc);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
99	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  break;  }  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    break;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
100	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(NodeUtil.isExpressionNode(last)&&  NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(NodeUtil.isExpressionNode(last))    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
101	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
102	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    0,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
103	[BUG]  [BUGGY]  Node  last  =  n.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  Node  last  =  n.removeFirstChild();  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	Node  last  =  n.removeFirstChild();	  Node    last    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
104	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
105	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
106	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  false);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
107	[BUG]  [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(childCount  ==  2)  {  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  if(last!=    null)    {    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    }    else    {    addExpr(last,    1,    rhsContext);    }    	non-compiled	[CE]  orphaned  case	53	None	replace
108	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  }	  if(childCount    ==    1)    {    cc.addOp(   "?       ",    true);    addExpr(last,    2,    rhsContext);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
109	[BUG]  [BUGGY]  if(p  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);      [BUGGY]  if(p  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	if(p  ==  2)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	  if(childCount    ==    2)    {    cc.addOp(   "?       ",    true);    addExpr(last,    1,    rhsContext);    break;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
