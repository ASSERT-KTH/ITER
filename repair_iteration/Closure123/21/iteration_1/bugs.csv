bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    cc.addOp( "? ",  true);  [CE]  [FE]    ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]    cc.addOp( "? ",  true);  [BUGGY]  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	    cc.addOp( "? ",  true);		non-compiled	[CE]  	43	None	add
2	[BUG]  [BUGGY]    cc.addOp( "? ",  true);  addExpr(last,  1,  rhsContext);  [CE]  [FE]      ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]    cc.addOp( "? ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	    cc.addOp( "? ",  true);  addExpr(last,  1,  rhsContext);		non-compiled	[CE]  	43	None	add
3	[BUG]  [BUGGY]    cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]    cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	    cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);		non-compiled	[CE]  ';'  expected	43	None	add
4	[BUG]  [BUGGY]    cc.addOp( "? ",  false);  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]    cc.addOp( "? ",  false);  [BUGGY]  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	    cc.addOp( "? ",  false);		non-compiled	[CE]  ';'  expected	43	None	add
5	[BUG]  [BUGGY]    Node  last  =  n.getLastChild();  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]    Node  last  =  n.getLastChild();  [BUGGY]  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	    Node  last  =  n.getLastChild();		non-compiled	[CE]  ';'  expected	43	None	add
6	[BUG]  [BUGGY]    cc.addOp( "? ",  true);  addExpr(last,  1,  rhsContext);  break;  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]    cc.addOp( "? ",  true);  addExpr(last,  1,  rhsContext);  break;  [BUGGY]  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	    cc.addOp( "? ",  true);  addExpr(last,  1,  rhsContext);  break;		non-compiled	[CE]  ';'  expected	43	None	add
7	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  [CE]  [FE]    ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]  addExpr(first,  1,  rhsContext);  [BUGGY]  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(first,  1,  rhsContext);	addExpr(last,  1,  rhsContext);  	non-compiled	[CE]  	42	None	replace
8	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  [CE]  [FE]      ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  p  +  1,  rhsContext);	addExpr(last,  1,  rhsContext);  	non-compiled	[CE]  	42	None	replace
9	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]  addExpr(last,  0,  rhsContext);  [BUGGY]  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  0,  rhsContext);	addExpr(last,  1,  rhsContext);  	non-compiled	[CE]  illegal  start  of  type	42	None	replace
10	[BUG]  [BUGGY]  addExpr(n,  1,  rhsContext);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]  addExpr(n,  1,  rhsContext);  [BUGGY]  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(n,  1,  rhsContext);	addExpr(last,  1,  rhsContext);  	non-compiled	[CE]  illegal  start  of  type	42	None	replace
11	[BUG]  [BUGGY]  addExpr(last,  1,  cc);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]  addExpr(last,  1,  cc);  [BUGGY]  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  1,  cc);	addExpr(last,  1,  rhsContext);  	non-compiled	[CE]  illegal  start  of  type	42	None	replace
12	[BUG]  [BUGGY]    cc.addOp( "? ",  false);  addExpr(last,  1,  rhsContext);  [CE]  illegal  start  of  type  [FE]    ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]    cc.addOp( "? ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	    cc.addOp( "? ",  false);  addExpr(last,  1,  rhsContext);		non-compiled	[CE]  illegal  start  of  type	43	None	add
13	[BUG]  [BUGGY]    cc.addOp( "? ",  true);  addExpr(last,  0,  rhsContext);  [CE]  illegal  start  of  type  [FE]      ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]    cc.addOp( "? ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	    cc.addOp( "? ",  true);  addExpr(last,  0,  rhsContext);		non-compiled	[CE]  illegal  start  of  type	43	None	add
14	[BUG]  [BUGGY]  addExpr(last,  p,  rhsContext);  [CE]  illegal  start  of  type  [FE]    ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]  addExpr(last,  p,  rhsContext);  [BUGGY]  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	addExpr(last,  p,  rhsContext);	addExpr(last,  1,  rhsContext);  	non-compiled	[CE]  illegal  start  of  type	42	None	replace
15	[BUG]  [BUGGY]    cc.addOp( "? ",  true);  addExpr(last,  2,  rhsContext);  [CE]  illegal  start  of  type  [FE]    ComparisonFailure  [CONTEXT]  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp( "? ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]    cc.addOp( "? ",  true);  addExpr(last,  2,  rhsContext);  [BUGGY]  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error( "Expected  children  to  be  strings ");  }  String  regexp  =  regexpEscape(first.getString(),  outputCharsetEncoder);  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	    cc.addOp( "? ",  true);  addExpr(last,  2,  rhsContext);		non-compiled	[CE]  illegal  start  of  type	43	None	add
