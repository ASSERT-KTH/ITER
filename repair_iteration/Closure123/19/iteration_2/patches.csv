bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Context  rhsContext  =  context.STATEMENT;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  context.STATEMENT;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  context.STATEMENT;	  Context    rhsContext    =    Context.STATEMENT;    	non-compiled	[CE]  not  a  statement	20	None	replace
2	[BUG]  [BUGGY]  Context  rhsContext  =  Context.STATEMENT  |  Context.OTHER;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.STATEMENT  |  Context.OTHER;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.STATEMENT  |  Context.OTHER;	  Context    rhsContext    =    Context.STATEMENT;    	non-compiled	[CE]  not  a  statement	20	None	replace
3	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(cc);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(cc);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(cc);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  not  a  statement	23	None	replace
4	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(first,  context);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(first,  context);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(first,  context);	  Context    rhsContext    =    Context.createChildObjectContext(context);    	non-compiled	[CE]  not  a  statement	23	None	replace
5	[BUG]  [BUGGY]  addExpr(first,  first.getNext(),  1,  context);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  first.getNext(),  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  first.getNext(),  1,  context);	  addExpr(first,    first.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	5	None	replace
6	[BUG]  [BUGGY]  addExpr(first,  first.getNext(),  1,  p  +  1);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  first.getNext(),  1,  p  +  1);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  first.getNext(),  1,  p  +  1);	  addExpr(first,    first.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	5	None	replace
7	[BUG]  [BUGGY]  addExpr(first,  first.getNext(),  0,  p);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  first.getNext(),  0,  p);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  first.getNext(),  0,  p);	  addExpr(first,    first.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	5	None	replace
8	[BUG]  [BUGGY]  addExpr(first,  first.getNext(),  2,  p);  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  first.getNext(),  2,  p);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  first.getNext(),  2,  p);	  addExpr(first,    first.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	5	None	replace
9	[BUG]  [BUGGY]  addExpr(first,  p.getNext(),  1,  context);  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  p.getNext(),  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  p.getNext(),  1,  context);	  addExpr(first,    first.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	5	None	replace
10	[BUG]  [BUGGY]  addExpr(first.getNext(),  4,  rhsContext);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first.getNext(),  4,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  4,  rhsContext);	  addExpr(first.getNext(),    3,    rhsContext);    	non-compiled	[CE]  not  a  statement	27	None	replace
11	[BUG]  [BUGGY]  addExpr(last,  rhsContext.getNext(),  2,  context);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  rhsContext.getNext(),  2,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  rhsContext.getNext(),  2,  context);	  addExpr(last.getNext(),    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	10	None	replace
12	[BUG]  [BUGGY]  Context  rhsContext  =  Context.END_OF_EXPR;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.END_OF_EXPR;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.END_OF_EXPR;	  Context    rhsContext    =    Context.START_OF_EXPR;    	non-compiled	[CE]  not  a  statement	19	None	replace
13	[BUG]  [BUGGY]  Context  rhsContext  =  Context.START_OF_EXPR  |  Context.OTHER;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.START_OF_EXPR  |  Context.OTHER;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.START_OF_EXPR  |  Context.OTHER;	  Context    rhsContext    =    Context.START_OF_EXPR;    	non-compiled	[CE]  not  a  statement	19	None	replace
14	[BUG]  [BUGGY]  Context  rhsContext  =  Context.START_OF_EXPR  +  1;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.START_OF_EXPR  +  1;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.START_OF_EXPR  +  1;	  Context    rhsContext    =    Context.START_OF_EXPR;    	non-compiled	[CE]  not  a  statement	19	None	replace
15	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  1,  rhsContext);	  addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	14	None	replace
16	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  0,  rhsContext);	  addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	14	None	replace
17	[BUG]  [BUGGY]  addExpr(last,  p,  rhsContext);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  p,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  p,  rhsContext);	  addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	14	None	replace
18	[BUG]  [BUGGY]  addExpr(last,  1,  context);  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  1,  context);	  addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	14	None	replace
19	[BUG]  [BUGGY]  Node  first  =  context.removeFirstChild();  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  first  =  context.removeFirstChild();  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  context.removeFirstChild();	  Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	47	None	replace
20	[BUG]  [BUGGY]  cc.addOp(first.getNext(),  p,  context);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  cc.addOp(first.getNext(),  p,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	cc.addOp(first.getNext(),  p,  context);	  addExpr(first.getNext(),    p,    context);    	non-compiled	[CE]  not  a  statement	11	None	replace
21	[BUG]  [BUGGY]  addExpr(first,  first.getNext(),  p,  context);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  first.getNext(),  p,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  first.getNext(),  p,  context);	  addExpr(first.getNext(),    p,    context);    	non-compiled	[CE]  not  a  statement	11	None	replace
22	[BUG]  [BUGGY]  cc.addOp( ": ".,  false);  [CE]  <identifier>  expected  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  cc.addOp( ": ".,  false);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	cc.addOp( ": ".,  false);	  cc.addOp(   ":   ",    false);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount  +  1);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount  +  1);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  ==  2  -  childCount  +  1);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  not  a  statement	16	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  2  -  1);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Preconditions.checkState(childCount  >=  2  -  1);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  >=  2  -  1);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  not  a  statement	16	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  *  childCount);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Preconditions.checkState(childCount  ==  2  *  childCount);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  ==  2  *  childCount);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  not  a  statement	16	None	replace
26	[BUG]  [BUGGY]  addExpr(first,  first.getNext(),  0,  context);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  first.getNext(),  0,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  first.getNext(),  0,  context);	  addExpr(first,    first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	7	None	replace
27	[BUG]  [BUGGY]  addExpr(first,  rhsContext.getNext(),  0,  first.getParent());  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  rhsContext.getNext(),  0,  first.getParent());  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  rhsContext.getNext(),  0,  first.getParent());	  addExpr(first,    first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	7	None	replace
28	[BUG]  [BUGGY]  addExpr(first,  first.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  first.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  first.getNext(),  1,  rhsContext);	  addExpr(first,    first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	7	None	replace
29	[BUG]  [BUGGY]  addExpr(first,  rhsContext.getNext(),  0,  first.getValue());  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  rhsContext.getNext(),  0,  first.getValue());  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  rhsContext.getNext(),  0,  first.getValue());	  addExpr(first,    first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	7	None	replace
30	[BUG]  [BUGGY]  addExpr(first.getNext(),  0,  p  +  1);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first.getNext(),  0,  p  +  1);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  0,  p  +  1);	  addExpr(first.getNext(),    0,    p);    	non-compiled	[CE]  not  a  statement	3	None	replace
31	[BUG]  [BUGGY]  addExpr(first,  rhsContext.getNext(),  0,  p);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  rhsContext.getNext(),  0,  p);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  rhsContext.getNext(),  0,  p);	  addExpr(first.getNext(),    0,    p);    	non-compiled	[CE]  not  a  statement	3	None	replace
32	[BUG]  [BUGGY]  Node  first  =  context.getLastChild();  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  first  =  context.getLastChild();  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  context.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	29	None	replace
33	[BUG]  [BUGGY]  Node  first  =  node.getLastChild();  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  first  =  node.getLastChild();  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  node.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	29	None	replace
34	[BUG]  [BUGGY]  addExpr(last,  rhsContext.getNext(),  1,  p);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  rhsContext.getNext(),  1,  p);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  rhsContext.getNext(),  1,  p);	  addExpr(last,    rhsContext.getNext(),    1,    context);    	non-compiled	[CE]  not  a  statement	40	None	replace
35	[BUG]  [BUGGY]  addExpr(last,  rhsContext.getNext(),  0,  context);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  rhsContext.getNext(),  0,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  rhsContext.getNext(),  0,  context);	  addExpr(last,    rhsContext.getNext(),    1,    context);    	non-compiled	[CE]  not  a  statement	40	None	replace
36	[BUG]  [BUGGY]  addExpr(first,  rhsContext.getNext(),  0,  context);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  rhsContext.getNext(),  0,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  rhsContext.getNext(),  0,  context);	  addExpr(first,    rhsContext.getNext(),    1,    context);    	non-compiled	[CE]  not  a  statement	36	None	replace
37	[BUG]  [BUGGY]  addExpr(first,  rhsContext.getNext(),  2,  context);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  rhsContext.getNext(),  2,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  rhsContext.getNext(),  2,  context);	  addExpr(first,    rhsContext.getNext(),    1,    context);    	non-compiled	[CE]  not  a  statement	36	None	replace
38	[BUG]  [BUGGY]  Node  first  =  context.getNext();  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  first  =  context.getNext();  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  context.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  not  a  statement	37	None	replace
39	[BUG]  [BUGGY]  Node  first  =  last.getNext();  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  first  =  last.getNext();  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  last.getNext();	  Node    first    =    n.getNext();    	non-compiled	[CE]  not  a  statement	37	None	replace
40	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  childCount);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  childCount);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n,  childCount);	  Context    rhsContext    =    Context.createChildObjectContext(n,    context);    	non-compiled	[CE]  not  a  statement	22	None	replace
41	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  p);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  p);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n,  p);	  Context    rhsContext    =    Context.createChildObjectContext(n,    context);    	non-compiled	[CE]  not  a  statement	22	None	replace
42	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(last,  context);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(last,  context);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(last,  context);	  Context    rhsContext    =    Context.createChildObjectContext(n,    context);    	non-compiled	[CE]  not  a  statement	22	None	replace
43	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  first);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  first);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n,  first);	  Context    rhsContext    =    Context.createChildObjectContext(n,    context);    	non-compiled	[CE]  not  a  statement	22	None	replace
44	[BUG]  [BUGGY]  addExpr(last.getNext(),  0,  p);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last.getNext(),  0,  p);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last.getNext(),  0,  p);	  addExpr(last.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	9	None	replace
45	[BUG]  [BUGGY]  addExpr(last.getNext(),  0,  context);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last.getNext(),  0,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last.getNext(),  0,  context);	  addExpr(last.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	9	None	replace
46	[BUG]  [BUGGY]  addExpr(n.getNext(),  0,  rhsContext);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(n.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(n.getNext(),  0,  rhsContext);	  addExpr(last.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	9	None	replace
47	[BUG]  [BUGGY]  addExpr(first,  p.getNext(),  0,  rhsContext);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  p.getNext(),  0,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  p.getNext(),  0,  rhsContext);	  addExpr(first,    p.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	46	None	replace
48	[BUG]  [BUGGY]  addExpr(last,  p.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  p.getNext(),  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  p.getNext(),  1,  rhsContext);	  addExpr(first,    p.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	46	None	replace
49	[BUG]  [BUGGY]  addExpr(first,  p.getNext(),  2,  rhsContext);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  p.getNext(),  2,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  p.getNext(),  2,  rhsContext);	  addExpr(first,    p.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	46	None	replace
50	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  parent,  context);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  parent,  context);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n,  parent,  context);	  Context    rhsContext    =    Context.createChildObjectContext(n,    parent);    	non-compiled	[CE]  not  a  statement	43	None	replace
51	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(first,  n);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(first,  n);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(first,  n);	  Context    rhsContext    =    Context.createChildObjectContext(n,    parent);    	non-compiled	[CE]  not  a  statement	43	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  3);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Preconditions.checkState(childCount  >=  3);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  >=  3);	  Preconditions.checkState(childCount    ==    3    +    1);    	non-compiled	[CE]  not  a  statement	34	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  3);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Preconditions.checkState(childCount!=  3);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount!=  3);	  Preconditions.checkState(childCount    ==    3    +    1);    	non-compiled	[CE]  not  a  statement	34	None	replace
54	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  childCount!=  Preconditions.IN_FOR_INIT_CLAUSE;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  childCount!=  Preconditions.IN_FOR_INIT_CLAUSE;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.OTHER  ||  childCount!=  Preconditions.IN_FOR_INIT_CLAUSE;	  Context    rhsContext    =    Context.OTHER    ||    context!=    Preconditions.IN_FOR_INIT_CLAUSE;    	non-compiled	[CE]  not  a  statement	49	None	replace
55	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  context  >=  Preconditions.IN_FOR_INIT_CLAUSE;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  context  >=  Preconditions.IN_FOR_INIT_CLAUSE;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.OTHER  ||  context  >=  Preconditions.IN_FOR_INIT_CLAUSE;	  Context    rhsContext    =    Context.OTHER    ||    context!=    Preconditions.IN_FOR_INIT_CLAUSE;    	non-compiled	[CE]  not  a  statement	49	None	replace
56	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  context  >>  Preconditions.IN_FOR_INIT_CLAUSE;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  context  >>  Preconditions.IN_FOR_INIT_CLAUSE;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.OTHER  ||  context  >>  Preconditions.IN_FOR_INIT_CLAUSE;	  Context    rhsContext    =    Context.OTHER    ||    context!=    Preconditions.IN_FOR_INIT_CLAUSE;    	non-compiled	[CE]  not  a  statement	49	None	replace
57	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  context);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  p  +  1,  context);	  addExpr(first.getNext(),    0,    context);    	non-compiled	[CE]  not  a  statement	6	None	replace
58	[BUG]  [BUGGY]  addExpr(first,  rhsContext.getNext(),  1,  p  +  1);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  rhsContext.getNext(),  1,  p  +  1);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  rhsContext.getNext(),  1,  p  +  1);	  addExpr(first,    rhsContext.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	44	None	replace
59	[BUG]  [BUGGY]  addExpr(first.getNext(),  p  +  1,  rhsContext);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first.getNext(),  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  p  +  1,  rhsContext);	  addExpr(first.getNext(),    p,    rhsContext);    	non-compiled	[CE]  not  a  statement	45	None	replace
60	[BUG]  [BUGGY]  addExpr(first,  first.getNext(),  p,  rhsContext);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  first.getNext(),  p,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  first.getNext(),  p,  rhsContext);	  addExpr(first.getNext(),    p,    rhsContext);    	non-compiled	[CE]  not  a  statement	45	None	replace
61	[BUG]  [BUGGY]  addExpr(last.getNext(),  p,  rhsContext);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last.getNext(),  p,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last.getNext(),  p,  rhsContext);	  addExpr(first.getNext(),    p,    rhsContext);    	non-compiled	[CE]  not  a  statement	45	None	replace
62	[BUG]  [BUGGY]  Context  rhsContext  =  context.UNKNOWN;  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  context.UNKNOWN;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  context.UNKNOWN;	  Context    rhsContext    =    Context.UNKNOWN;    	non-compiled	[CE]  not  a  statement	18	None	replace
63	[BUG]  [BUGGY]  Context  rhsContext  =  Context.UNKNOWN  |  Context.OTHER;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.UNKNOWN  |  Context.OTHER;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.UNKNOWN  |  Context.OTHER;	  Context    rhsContext    =    Context.UNKNOWN;    	non-compiled	[CE]  not  a  statement	18	None	replace
64	[BUG]  [BUGGY]  addExpr(first,  0,  p);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  0,  p);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  0,  p);	  addExpr(first,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	39	None	replace
65	[BUG]  [BUGGY]  addExpr(first,  0,  context);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  0,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  0,  context);	  addExpr(first,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	39	None	replace
66	[BUG]  [BUGGY]  addExpr(first.getNext(),  2,  p  +  1);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first.getNext(),  2,  p  +  1);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  2,  p  +  1);	  addExpr(first.getNext(),    2,    p);    	non-compiled	[CE]  not  a  statement	4	None	replace
67	[BUG]  [BUGGY]  addExpr(first.getNext(),  3,  p);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first.getNext(),  3,  p);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  3,  p);	  addExpr(first.getNext(),    2,    p);    	non-compiled	[CE]  not  a  statement	4	None	replace
68	[BUG]  [BUGGY]  addExpr(first.getNext(),  4,  p);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first.getNext(),  4,  p);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  4,  p);	  addExpr(first.getNext(),    2,    p);    	non-compiled	[CE]  not  a  statement	4	None	replace
69	[BUG]  [BUGGY]  Node  first  =  rhsContext.getLastChild();  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  first  =  rhsContext.getLastChild();  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  rhsContext.getLastChild();	  Node    first    =    rhsContext.getFirstChild();    	non-compiled	[CE]  not  a  statement	31	None	replace
70	[BUG]  [BUGGY]  Node  first  =  cc.getFirstChild();  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  first  =  cc.getFirstChild();  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  cc.getFirstChild();	  Node    first    =    rhsContext.getFirstChild();    	non-compiled	[CE]  not  a  statement	31	None	replace
71	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  break;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  1,  rhsContext);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  1,  rhsContext);  break;	  addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	13	None	replace
72	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  break;  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  0,  rhsContext);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  0,  rhsContext);  break;	  addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	13	None	replace
73	[BUG]  [BUGGY]  addExpr(last,  1,  context);  break;  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  1,  context);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  1,  context);  break;	  addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	13	None	replace
74	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  last);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  last);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n,  last);	  Context    rhsContext    =    Context.createChildObjectContext(last);    	non-compiled	[CE]  not  a  statement	25	None	replace
75	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  childCount  ==  Preconditions.IN_FOR_INIT_CLAUSE;  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  childCount  ==  Preconditions.IN_FOR_INIT_CLAUSE;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.OTHER  ||  childCount  ==  Preconditions.IN_FOR_INIT_CLAUSE;	  Context    rhsContext    =    Context.OTHER    ||    context    ==    Preconditions.IN_FOR_INIT_CLAUSE;    	non-compiled	[CE]  not  a  statement	48	None	replace
76	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  parent  ==  Preconditions.IN_FOR_INIT_CLAUSE;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  parent  ==  Preconditions.IN_FOR_INIT_CLAUSE;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.OTHER  ||  parent  ==  Preconditions.IN_FOR_INIT_CLAUSE;	  Context    rhsContext    =    Context.OTHER    ||    context    ==    Preconditions.IN_FOR_INIT_CLAUSE;    	non-compiled	[CE]  not  a  statement	48	None	replace
77	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  context  ==  Preconditions.IN_FOR_INIT_CLAUSE  +  1;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  context  ==  Preconditions.IN_FOR_INIT_CLAUSE  +  1;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.OTHER  ||  context  ==  Preconditions.IN_FOR_INIT_CLAUSE  +  1;	  Context    rhsContext    =    Context.OTHER    ||    context    ==    Preconditions.IN_FOR_INIT_CLAUSE;    	non-compiled	[CE]  not  a  statement	48	None	replace
78	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  p);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  p);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  p);	  Context    rhsContext    =    Context.createChildObjectContext(context,    n);    	non-compiled	[CE]  not  a  statement	26	None	replace
79	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  childCount);  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  childCount);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  childCount);	  Context    rhsContext    =    Context.createChildObjectContext(context,    n);    	non-compiled	[CE]  not  a  statement	26	None	replace
80	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  parent);  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  parent);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  parent);	  Context    rhsContext    =    Context.createChildObjectContext(context,    n);    	non-compiled	[CE]  not  a  statement	26	None	replace
81	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  first);  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  first);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  first);	  Context    rhsContext    =    Context.createChildObjectContext(context,    n);    	non-compiled	[CE]  not  a  statement	26	None	replace
82	[BUG]  [BUGGY]  addExpr(n.getNext(),  1,  context);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(n.getNext(),  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(n.getNext(),  1,  context);	  addExpr(last.getNext(),    1,    context);    	non-compiled	[CE]  not  a  statement	8	None	replace
83	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  context);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  p  +  1,  context);	  addExpr(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	50	None	replace
84	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  p  +  1,  rhsContext);	  addExpr(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	50	None	replace
85	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  Context.OTHER);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  p  +  1,  Context.OTHER);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  p  +  1,  Context.OTHER);	  addExpr(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	50	None	replace
86	[BUG]  [BUGGY]  Node  last  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  last  =  n.getFirstChild();  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  last  =  n.getFirstChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	41	None	replace
87	[BUG]  [BUGGY]  Node  last  =  first.getLastChild();  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  last  =  first.getLastChild();  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  last  =  first.getLastChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	41	None	replace
88	[BUG]  [BUGGY]  Node  last  =  rhsContext.getLastChild();  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  last  =  rhsContext.getLastChild();  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  last  =  rhsContext.getLastChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	41	None	replace
89	[BUG]  [BUGGY]  Node  last  =  context.getLastChild();  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  last  =  context.getLastChild();  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  last  =  context.getLastChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	41	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(childCount  >=  2);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Preconditions.checkState(childCount  >=  2);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  >=  2);	  Preconditions.checkState(childCount    ==    2    -    1);    	non-compiled	[CE]  not  a  statement	17	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(childCount!=  2);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Preconditions.checkState(childCount!=  2);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount!=  2);	  Preconditions.checkState(childCount    ==    2    -    1);    	non-compiled	[CE]  not  a  statement	17	None	replace
92	[BUG]  [BUGGY]  Context  rhsContext  =  Context.BLOCK  |  Context.OTHER;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.BLOCK  |  Context.OTHER;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.BLOCK  |  Context.OTHER;	  Context    rhsContext    =    Context.BLOCK;    	non-compiled	[CE]  not  a  statement	21	None	replace
93	[BUG]  [BUGGY]  Context  rhsContext  =  Context.BLOCK  |  Context.DECEMBER;  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.BLOCK  |  Context.DECEMBER;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.BLOCK  |  Context.DECEMBER;	  Context    rhsContext    =    Context.BLOCK;    	non-compiled	[CE]  not  a  statement	21	None	replace
94	[BUG]  [BUGGY]  Context  rhsContext  =  context.BLOCK;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  context.BLOCK;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  context.BLOCK;	  Context    rhsContext    =    Context.BLOCK;    	non-compiled	[CE]  not  a  statement	21	None	replace
95	[BUG]  [BUGGY]  addExpr(first,  p.getNext(),  1,  p  +  1);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  p.getNext(),  1,  p  +  1);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  p.getNext(),  1,  p  +  1);	  addExpr(first.getNext(),    1,    p    +    1);    	non-compiled	[CE]  not  a  statement	2	None	replace
96	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  p  +  1,  context);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first.getNext(),  1,  p  +  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  1,  p  +  1,  context);	  addExpr(first.getNext(),    1,    p    +    1);    	non-compiled	[CE]  not  a  statement	2	None	replace
97	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  childCount  +  1);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  childCount  +  1);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n,  childCount  +  1);	  Context    rhsContext    =    Context.createChildObjectContext(n    +    1);    	non-compiled	[CE]  not  a  statement	42	None	replace
98	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(first  +  1);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(first  +  1);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(first  +  1);	  Context    rhsContext    =    Context.createChildObjectContext(n    +    1);    	non-compiled	[CE]  not  a  statement	42	None	replace
99	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  p  +  1);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  p  +  1);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n,  p  +  1);	  Context    rhsContext    =    Context.createChildObjectContext(n    +    1);    	non-compiled	[CE]  not  a  statement	42	None	replace
100	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(first,  n  +  1);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(first,  n  +  1);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(first,  n  +  1);	  Context    rhsContext    =    Context.createChildObjectContext(n    +    1);    	non-compiled	[CE]  not  a  statement	42	None	replace
101	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  n  +  1);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  n  +  1);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  n  +  1);	  Context    rhsContext    =    Context.createChildObjectContext(n    +    1);    	non-compiled	[CE]  not  a  statement	42	None	replace
102	[BUG]  [BUGGY]  cc.addOp(first.getNext(),  p  +  1,  context);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  cc.addOp(first.getNext(),  p  +  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	cc.addOp(first.getNext(),  p  +  1,  context);	  addExpr(first.getNext(),    p    +    1,    context);    	non-compiled	[CE]  not  a  statement	12	None	replace
103	[BUG]  [BUGGY]  addExpr(first,  first.getNext(),  p  +  1,  context);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  first.getNext(),  p  +  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  first.getNext(),  p  +  1,  context);	  addExpr(first.getNext(),    p    +    1,    context);    	non-compiled	[CE]  not  a  statement	12	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3  +  p);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Preconditions.checkState(childCount  ==  3  +  p);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  ==  3  +  p);	  Preconditions.checkState(childCount    ==    3    +    1);    	non-compiled	[CE]  not  a  statement	34	None	replace
105	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  break;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  2,  rhsContext);  break;  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  2,  rhsContext);  break;	  addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  not  a  statement	13	None	replace
106	[BUG]  [BUGGY]  addExpr(first,  rhsContext.getNext(),  0,  first);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  rhsContext.getNext(),  0,  first);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  rhsContext.getNext(),  0,  first);	  addExpr(first,    first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	7	None	replace
107	[BUG]  [BUGGY]  Context  rhsContext  =  Context.BEFORE_DANGLING_ELSE;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.BEFORE_DANGLING_ELSE;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.BEFORE_DANGLING_ELSE;	  Context    rhsContext    =    Context.START_OF_EXPR;    	non-compiled	[CE]  not  a  statement	19	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3  -  1);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Preconditions.checkState(childCount  ==  3  -  1);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  ==  3  -  1);	  Preconditions.checkState(childCount    ==    2    -    1);    	non-compiled	[CE]  not  a  statement	17	None	replace
109	[BUG]  [BUGGY]  addExpr(first,  rhsContext.getNext(),  2,  p);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  rhsContext.getNext(),  2,  p);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  rhsContext.getNext(),  2,  p);	  addExpr(first,    rhsContext.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	44	None	replace
110	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  cc);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  cc);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  cc);	  Context    rhsContext    =    Context.createChildObjectContext(context,    n);    	non-compiled	[CE]  not  a  statement	26	None	replace
111	[BUG]  [BUGGY]  Context  rhsContext  =  Context.IN_FOR_INIT_CLAUSE  ||  context  ==  Preconditions.IN_FOR_INIT_CLAUSE;  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.IN_FOR_INIT_CLAUSE  ||  context  ==  Preconditions.IN_FOR_INIT_CLAUSE;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.IN_FOR_INIT_CLAUSE  ||  context  ==  Preconditions.IN_FOR_INIT_CLAUSE;	  Context    rhsContext    =    Context.OTHER    ||    context    ==    Preconditions.IN_FOR_INIT_CLAUSE;    	non-compiled	[CE]  not  a  statement	48	None	replace
112	[BUG]  [BUGGY]  Context  rhsContext  =  Context.IN_FOR_INIT_CLAUSE  ||  context!=  Preconditions.IN_FOR_INIT_CLAUSE;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.IN_FOR_INIT_CLAUSE  ||  context!=  Preconditions.IN_FOR_INIT_CLAUSE;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.IN_FOR_INIT_CLAUSE  ||  context!=  Preconditions.IN_FOR_INIT_CLAUSE;	  Context    rhsContext    =    Context.OTHER    ||    context!=    Preconditions.IN_FOR_INIT_CLAUSE;    	non-compiled	[CE]  not  a  statement	49	None	replace
113	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  context!=  NodeUtil.IN_FOR_INIT_CLAUSE;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  context!=  NodeUtil.IN_FOR_INIT_CLAUSE;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.OTHER  ||  context!=  NodeUtil.IN_FOR_INIT_CLAUSE;	  Context    rhsContext    =    Context.OTHER    ||    context!=    Preconditions.IN_FOR_INIT_CLAUSE;    	non-compiled	[CE]  not  a  statement	49	None	replace
114	[BUG]  [BUGGY]  Node  first  =  n.getNext()  +  1;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  first  =  n.getNext()  +  1;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  n.getNext()  +  1;	  Node    first    =    n.getNext();    	non-compiled	[CE]  not  a  statement	37	None	replace
115	[BUG]  [BUGGY]  Context  rhsContext  =  Context.BLOCK  |  Context.ACTIVE;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.BLOCK  |  Context.ACTIVE;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.BLOCK  |  Context.ACTIVE;	  Context    rhsContext    =    Context.BLOCK;    	non-compiled	[CE]  not  a  statement	21	None	replace
116	[BUG]  [BUGGY]  Context  rhsContext  =  Context.BLOCK  +  1;  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.BLOCK  +  1;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.BLOCK  +  1;	  Context    rhsContext    =    Context.BLOCK;    	non-compiled	[CE]  not  a  statement	21	None	replace
117	[BUG]  [BUGGY]  add(last,  p  +  1,  rhsContext);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  add(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	add(last,  p  +  1,  rhsContext);	  addExpr(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	50	None	replace
118	[BUG]  [BUGGY]  Node  first  =  node.getNext();  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  first  =  node.getNext();  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  node.getNext();	  Node    first    =    node.getFirstChild();    	non-compiled	[CE]  not  a  statement	32	None	replace
119	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  context  +  1);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  context  +  1);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n,  context  +  1);	  Context    rhsContext    =    Context.createChildObjectContext(n    +    1);    	non-compiled	[CE]  not  a  statement	42	None	replace
120	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n  +  1,  context);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n  +  1,  context);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n  +  1,  context);	  Context    rhsContext    =    Context.createChildObjectContext(n    +    1);    	non-compiled	[CE]  not  a  statement	42	None	replace
121	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  2,  rhsContext);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  2,  rhsContext);	  addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	14	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  3);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Preconditions.checkState(childCount  ==  2  -  3);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  ==  2  -  3);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  not  a  statement	16	None	replace
123	[BUG]  [BUGGY]  Node  first  =  last.getLastChild();  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  first  =  last.getLastChild();  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  last.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	29	None	replace
124	[BUG]  [BUGGY]  addExpr(first.getNext(),  3,  context);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first.getNext(),  3,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  3,  context);	  addExpr(first.getNext(),    2,    context);    	non-compiled	[CE]  not  a  statement	28	None	replace
125	[BUG]  [BUGGY]  addExpr(first,  p.getNext(),  context);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  p.getNext(),  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  p.getNext(),  context);	  addExpr(first.getNext(),    p,    context);    	non-compiled	[CE]  not  a  statement	11	None	replace
126	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(parent);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(parent);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(parent);	  Context    rhsContext    =    Context.createChildObjectContext(last);    	non-compiled	[CE]  not  a  statement	25	None	replace
127	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(parent,  n);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(parent,  n);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(parent,  n);	  Context    rhsContext    =    Context.createChildObjectContext(n,    parent);    	non-compiled	[CE]  not  a  statement	43	None	replace
128	[BUG]  [BUGGY]  addExpr(last.getNext(),  2,  context);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last.getNext(),  2,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last.getNext(),  2,  context);	  addExpr(last.getNext(),    1,    context);    	non-compiled	[CE]  not  a  statement	8	None	replace
129	[BUG]  [BUGGY]  addExpr(first,  n.getNext(),  1,  p);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  n.getNext(),  1,  p);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  n.getNext(),  1,  p);	  addExpr(first,    first.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	5	None	replace
130	[BUG]  [BUGGY]  Node  first  =  last.removeFirstChild();  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  first  =  last.removeFirstChild();  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  last.removeFirstChild();	  Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	47	None	replace
131	[BUG]  [BUGGY]  Node  first  =  n.firstChild();  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  first  =  n.firstChild();  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  n.firstChild();	  Node    first    =    n.removeFirstChild();    	non-compiled	[CE]  not  a  statement	47	None	replace
132	[BUG]  [BUGGY]  Context  rhsContext  =  getContextForNoInOperator(context);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  getContextForNoInOperator(context);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  getContextForNoInOperator(context);	  Context    rhsContext    =    Context.STATEMENT;    	non-compiled	[CE]  not  a  statement	20	None	replace
133	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  parent,  childCount);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  parent,  childCount);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n,  parent,  childCount);	  Context    rhsContext    =    Context.createChildObjectContext(n,    parent);    	non-compiled	[CE]  not  a  statement	43	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3  -  childCount);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Preconditions.checkState(childCount  ==  3  -  childCount);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  ==  3  -  childCount);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  not  a  statement	16	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1  -  childCount);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Preconditions.checkState(childCount  ==  1  -  childCount);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  ==  1  -  childCount);	  Preconditions.checkState(childCount    ==    2    -    childCount);    	non-compiled	[CE]  not  a  statement	16	None	replace
136	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  parent!=  Preconditions.IN_FOR_INIT_CLAUSE;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  parent!=  Preconditions.IN_FOR_INIT_CLAUSE;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.OTHER  ||  parent!=  Preconditions.IN_FOR_INIT_CLAUSE;	  Context    rhsContext    =    Context.OTHER    ||    context!=    Preconditions.IN_FOR_INIT_CLAUSE;    	non-compiled	[CE]  not  a  statement	49	None	replace
137	[BUG]  [BUGGY]  Context  rhsContext  =  getCurrentContext();  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  getCurrentContext();  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  getCurrentContext();	  Context    rhsContext    =    Context.BLOCK;    	non-compiled	[CE]  not  a  statement	21	None	replace
138	[BUG]  [BUGGY]  addExpr(first.getNext(),  p,  p  +  1);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first.getNext(),  p,  p  +  1);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  p,  p  +  1);	  addExpr(first.getNext(),    1,    p    +    1);    	non-compiled	[CE]  not  a  statement	2	None	replace
139	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  n,  1);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  n,  1);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  n,  1);	  Context    rhsContext    =    Context.createChildObjectContext(context,    n);    	non-compiled	[CE]  not  a  statement	26	None	replace
140	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  n,  context);  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  n,  context);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  n,  context);	  Context    rhsContext    =    Context.createChildObjectContext(context,    n);    	non-compiled	[CE]  not  a  statement	26	None	replace
141	[BUG]  [BUGGY]  Node  first  =  next.getFirstChild();  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  first  =  next.getFirstChild();  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  next.getFirstChild();	  Node    first    =    last.getFirstChild();    	non-compiled	[CE]  not  a  statement	38	None	replace
142	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  context,  cc);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  context,  cc);  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n,  context,  cc);	  Context    rhsContext    =    Context.createChildObjectContext(n,    context);    	non-compiled	[CE]  not  a  statement	22	None	replace
143	[BUG]  [BUGGY]  addExpr(first.getNext(),  p,  0,  context);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first.getNext(),  p,  0,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  p,  0,  context);	  addExpr(first.getNext(),    0,    context);    	non-compiled	[CE]  not  a  statement	6	None	replace
144	[BUG]  [BUGGY]  Context  rhsContext  =  Context.IN_FOR_INIT_CLAUSE;  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  Context.IN_FOR_INIT_CLAUSE;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.IN_FOR_INIT_CLAUSE;	  Context    rhsContext    =    Context.OTHER    ||    context    ==    Preconditions.IN_FOR_INIT_CLAUSE;    	non-compiled	[CE]  not  a  statement	48	None	replace
145	[BUG]  [BUGGY]  Context  rhsContext  =  context  ==  Preconditions.IN_FOR_INIT_CLAUSE;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Context  rhsContext  =  context  ==  Preconditions.IN_FOR_INIT_CLAUSE;  [BUGGY]      addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  context  ==  Preconditions.IN_FOR_INIT_CLAUSE;	  Context    rhsContext    =    Context.OTHER    ||    context    ==    Preconditions.IN_FOR_INIT_CLAUSE;    	non-compiled	[CE]  not  a  statement	48	None	replace
146	[BUG]  [BUGGY]  addExpr(last,  0,  context);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(last,  0,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  0,  context);	  addExpr(first,    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	39	None	replace
147	[BUG]  [BUGGY]  Node  last  =  n.removeFirstChild();  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  Node  last  =  n.removeFirstChild();  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  last  =  n.removeFirstChild();	  Node    last    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	41	None	replace
148	[BUG]  [BUGGY]  addExpr(first,  p.getNext(),  0,  p);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first,  p.getNext(),  0,  p);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  p.getNext(),  0,  p);	  addExpr(first.getNext(),    0,    p);    	non-compiled	[CE]  not  a  statement	3	None	replace
149	[BUG]  [BUGGY]  addExpr(first.getNext(),  0,  p  +  1,  context);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first.getNext(),  0,  p  +  1,  context);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  0,  p  +  1,  context);	  addExpr(first.getNext(),    0,    p);    	non-compiled	[CE]  not  a  statement	3	None	replace
150	[BUG]  [BUGGY]  addExpr(first.getNext(),  0,  p  +  2);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);      [BUGGY]  addExpr(first.getNext(),  0,  p  +  2);  [BUGGY]      cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(     "Expected  children  to  be  strings     ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  0,  p  +  2);	  addExpr(first.getNext(),    0,    p);    	non-compiled	[CE]  not  a  statement	3	None	replace
