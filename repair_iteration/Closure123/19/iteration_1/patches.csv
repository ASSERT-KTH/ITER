bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cc.addOp( ": ",  false);  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  cc.addOp( ": ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	cc.addOp( ": ",  false);	      cc.addOp(   ":   ",    true);    	non-compiled	[CE]  not  a  statement	15	None	replace
2	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  p  +  1);  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first.getNext(),  1,  p  +  1);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  1,  p  +  1);	  addExpr(first.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	4	None	replace
3	[BUG]  [BUGGY]  addExpr(first.getNext(),  0,  p);  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first.getNext(),  0,  p);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  0,  p);	  addExpr(first.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	4	None	replace
4	[BUG]  [BUGGY]  addExpr(first.getNext(),  2,  p);  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first.getNext(),  2,  p);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  2,  p);	  addExpr(first.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	4	None	replace
5	[BUG]  [BUGGY]  addExpr(first,  first.getNext(),  1,  p);  [CE]  not  a  statement  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first,  first.getNext(),  1,  p);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  first.getNext(),  1,  p);	  addExpr(first.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	4	None	replace
6	[BUG]  [BUGGY]  addExpr(first.getNext(),  0,  context);  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first.getNext(),  0,  context);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  0,  context);	  addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	2	None	replace
7	[BUG]  [BUGGY]  addExpr(first,  first.getNext(),  0,  rhsContext);  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first,  first.getNext(),  0,  rhsContext);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  first.getNext(),  0,  rhsContext);	  addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	2	None	replace
8	[BUG]  [BUGGY]  addExpr(last.getNext(),  1,  context);  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(last.getNext(),  1,  context);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last.getNext(),  1,  context);	  addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	5	None	replace
9	[BUG]  [BUGGY]  addExpr(last.getNext(),  0,  rhsContext);  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(last.getNext(),  0,  rhsContext);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last.getNext(),  0,  rhsContext);	  addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	5	None	replace
10	[BUG]  [BUGGY]  addExpr(last.getNext(),  2,  rhsContext);  [CE]  not  a  statement  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(last.getNext(),  2,  rhsContext);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last.getNext(),  2,  rhsContext);	  addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	5	None	replace
11	[BUG]  [BUGGY]  addExpr(first.getNext(),  p,  context);  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first.getNext(),  p,  context);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  p,  context);	  addExpr(first.getNext(),    1,    context);    	non-compiled	[CE]  not  a  statement	1	None	replace
12	[BUG]  [BUGGY]  addExpr(first.getNext(),  p  +  1,  context);  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first.getNext(),  p  +  1,  context);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  p  +  1,  context);	  addExpr(first.getNext(),    1,    context);    	non-compiled	[CE]  not  a  statement	1	None	replace
13	[BUG]  [BUGGY]  addExpr(last,  1,  rhsContext);  break;  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(last,  1,  rhsContext);  break;  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  1,  rhsContext);  break;	      	non-compiled	[CE]  not  a  statement	6	None	replace
14	[BUG]  [BUGGY]  addExpr(last,  1,  rhsContext);  [CE]  not  a  statement  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  1,  rhsContext);	      	non-compiled	[CE]  not  a  statement	6	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Preconditions.checkState(childCount  ==  1);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  ==  1);	      Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	12	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [CE]  not  a  statement  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Preconditions.checkState(childCount  ==  2  -  childCount);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  ==  2  -  childCount);	      Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	12	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2  -  1);  [CE]  not  a  statement  [FE]                      ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Preconditions.checkState(childCount  ==  2  -  1);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  ==  2  -  1);	      Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  not  a  statement	12	None	replace
18	[BUG]  [BUGGY]  Context  rhsContext  =  Context.UNKNOWN;  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Context  rhsContext  =  Context.UNKNOWN;  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.UNKNOWN;	      Context    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  not  a  statement	13	None	replace
19	[BUG]  [BUGGY]  Context  rhsContext  =  Context.START_OF_EXPR;  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Context  rhsContext  =  Context.START_OF_EXPR;  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.START_OF_EXPR;	      Context    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  not  a  statement	13	None	replace
20	[BUG]  [BUGGY]  Context  rhsContext  =  Context.STATEMENT;  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Context  rhsContext  =  Context.STATEMENT;  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.STATEMENT;	      Context    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  not  a  statement	13	None	replace
21	[BUG]  [BUGGY]  Context  rhsContext  =  Context.BLOCK;  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Context  rhsContext  =  Context.BLOCK;  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.BLOCK;	      Context    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  not  a  statement	13	None	replace
22	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  context);  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  context);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n,  context);	      Context    rhsContext    =    Context.createChildObjectContext(n);    	non-compiled	[CE]  not  a  statement	11	None	replace
23	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context);  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context);	      Context    rhsContext    =    Context.createChildObjectContext(n);    	non-compiled	[CE]  not  a  statement	11	None	replace
24	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(first);  [CE]  not  a  statement  [FE]                    ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(first);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(first);	      Context    rhsContext    =    Context.createChildObjectContext(n);    	non-compiled	[CE]  not  a  statement	11	None	replace
25	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(last);  [CE]  not  a  statement  [FE]                      ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(last);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(last);	      Context    rhsContext    =    Context.createChildObjectContext(n);    	non-compiled	[CE]  not  a  statement	11	None	replace
26	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  n);  [CE]  not  a  statement  [FE]                        ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(context,  n);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(context,  n);	      Context    rhsContext    =    Context.createChildObjectContext(n);    	non-compiled	[CE]  not  a  statement	11	None	replace
27	[BUG]  [BUGGY]  addExpr(first.getNext(),  3,  rhsContext);  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first.getNext(),  3,  rhsContext);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  3,  rhsContext);	  addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	3	None	replace
28	[BUG]  [BUGGY]  addExpr(first.getNext(),  2,  context);  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first.getNext(),  2,  context);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  2,  context);	  addExpr(first.getNext(),    2,    rhsContext);    	non-compiled	[CE]  not  a  statement	3	None	replace
29	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  n.getLastChild();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
30	[BUG]  [BUGGY]  Node  first  =  context.getFirstChild();  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Node  first  =  context.getFirstChild();  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  context.getFirstChild();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
31	[BUG]  [BUGGY]  Node  first  =  rhsContext.getFirstChild();  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Node  first  =  rhsContext.getFirstChild();  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  rhsContext.getFirstChild();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
32	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild();  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Node  first  =  node.getFirstChild();  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  node.getFirstChild();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Preconditions.checkState(childCount  ==  0);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  ==  0);	      Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  not  a  statement	10	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3  +  1);  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Preconditions.checkState(childCount  ==  3  +  1);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  ==  3  +  1);	      Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  not  a  statement	10	None	replace
35	[BUG]  [BUGGY]  cc.addOp( ",   ",  false);  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  cc.addOp( ",   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	cc.addOp( ",   ",  false);	      cc.addOp(   ",   ",    true);    	non-compiled	[CE]  not  a  statement	14	None	replace
36	[BUG]  [BUGGY]  addExpr(first,  rhsContext.getNext(),  1,  context);  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first,  rhsContext.getNext(),  1,  context);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  rhsContext.getNext(),  1,  context);	  addExpr(first.getNext(),    1,    context);    	non-compiled	[CE]  not  a  statement	1	None	replace
37	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Node  first  =  n.getNext();  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  n.getNext();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
38	[BUG]  [BUGGY]  Node  first  =  last.getFirstChild();  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Node  first  =  last.getFirstChild();  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  last.getFirstChild();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
39	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first,  0,  rhsContext);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  0,  rhsContext);	  addExpr(first.getNext(),    0,    rhsContext);    	non-compiled	[CE]  not  a  statement	2	None	replace
40	[BUG]  [BUGGY]  addExpr(last,  rhsContext.getNext(),  1,  context);  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(last,  rhsContext.getNext(),  1,  context);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  rhsContext.getNext(),  1,  context);	  addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	5	None	replace
41	[BUG]  [BUGGY]  Node  last  =  n.getLastChild();  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Node  last  =  n.getLastChild();  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  last  =  n.getLastChild();	      	non-compiled	[CE]  not  a  statement	6	None	replace
42	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n  +  1);  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n  +  1);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n  +  1);	      Context    rhsContext    =    Context.createChildObjectContext(n);    	non-compiled	[CE]  not  a  statement	11	None	replace
43	[BUG]  [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  parent);  [CE]  not  a  statement  [FE]                  ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Context  rhsContext  =  Context.createChildObjectContext(n,  parent);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.createChildObjectContext(n,  parent);	      Context    rhsContext    =    Context.createChildObjectContext(n);    	non-compiled	[CE]  not  a  statement	11	None	replace
44	[BUG]  [BUGGY]  addExpr(first,  rhsContext.getNext(),  1,  p);  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first,  rhsContext.getNext(),  1,  p);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  rhsContext.getNext(),  1,  p);	  addExpr(first.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	4	None	replace
45	[BUG]  [BUGGY]  addExpr(first.getNext(),  p,  rhsContext);  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first.getNext(),  p,  rhsContext);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first.getNext(),  p,  rhsContext);	  addExpr(first.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	4	None	replace
46	[BUG]  [BUGGY]  addExpr(first,  p.getNext(),  1,  rhsContext);  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(first,  p.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(first,  p.getNext(),  1,  rhsContext);	  addExpr(first.getNext(),    1,    p);    	non-compiled	[CE]  not  a  statement	4	None	replace
47	[BUG]  [BUGGY]  Node  first  =  n.removeFirstChild();  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Node  first  =  n.removeFirstChild();  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Node  first  =  n.removeFirstChild();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
48	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  context  ==  Preconditions.IN_FOR_INIT_CLAUSE;  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  context  ==  Preconditions.IN_FOR_INIT_CLAUSE;  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.OTHER  ||  context  ==  Preconditions.IN_FOR_INIT_CLAUSE;	      Context    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  not  a  statement	13	None	replace
49	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  context!=  Preconditions.IN_FOR_INIT_CLAUSE;  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Context  rhsContext  =  Context.OTHER  ||  context!=  Preconditions.IN_FOR_INIT_CLAUSE;  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Context  rhsContext  =  Context.OTHER  ||  context!=  Preconditions.IN_FOR_INIT_CLAUSE;	      Context    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  not  a  statement	13	None	replace
50	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	addExpr(last,  p  +  1,  rhsContext);	  addExpr(last.getNext(),    1,    rhsContext);    	non-compiled	[CE]  not  a  statement	5	None	replace
51	[BUG]  [BUGGY]  cc.addOp( ": ".,  true);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  cc.addOp( ": ".,  true);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	cc.addOp( ": ".,  true);	      cc.addOp(   ":   ",    true);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);    [BUGGY]  Preconditions.checkState(childCount  ==  4);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  }  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	Preconditions.checkState(childCount  ==  4);	      Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  not  a  statement	10	None	replace
