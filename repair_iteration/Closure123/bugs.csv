bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] addExpr(first, p, context); [FE] ComparisonFailure [CONTEXT]   Context rhsContext = getContextForNoInOperator(context);    if (last.getType() == type && NodeUtil.isAssociative(type)) { [BUGGY] addExpr(first, p, context); [BUGGY] cc.addOp(opstr, true); addExpr(last, p, rhsContext); } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {  addExpr(first, p, context); cc.addOp(opstr, true); addExpr(last, p, rhsContext); } else { unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	135	135	1	replace	
2	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]   Context rhsContext = getContextForNoInOperator(context);    if (last.getType() == type && NodeUtil.isAssociative(type)) { [BUGGY] [BUGGY] addExpr(first, p, context); cc.addOp(opstr, true); addExpr(last, p, rhsContext); } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {  addExpr(first, p, context); cc.addOp(opstr, true); addExpr(last, p, rhsContext); } else { unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	135	135	1	add	
3	[BUG] [BUGGY] cc.addOp(opstr, true); [FE] ComparisonFailure [CONTEXT]   Context rhsContext = getContextForNoInOperator(context);    if (last.getType() == type && NodeUtil.isAssociative(type)) { addExpr(first, p, context); [BUGGY] cc.addOp(opstr, true); [BUGGY] addExpr(last, p, rhsContext); } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {  addExpr(first, p, context); cc.addOp(opstr, true); addExpr(last, p, rhsContext); } else { unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1); } return; [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	136	136	1	replace	
4	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]   Context rhsContext = getContextForNoInOperator(context);    if (last.getType() == type && NodeUtil.isAssociative(type)) { addExpr(first, p, context); [BUGGY] [BUGGY] cc.addOp(opstr, true); addExpr(last, p, rhsContext); } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {  addExpr(first, p, context); cc.addOp(opstr, true); addExpr(last, p, rhsContext); } else { unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1); } return; [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	136	136	1	add	
5	[BUG] [BUGGY] addExpr(last, p, rhsContext); [FE] ComparisonFailure [CONTEXT]  Context rhsContext = getContextForNoInOperator(context);    if (last.getType() == type && NodeUtil.isAssociative(type)) { addExpr(first, p, context); cc.addOp(opstr, true); [BUGGY] addExpr(last, p, rhsContext); [BUGGY] } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {  addExpr(first, p, context); cc.addOp(opstr, true); addExpr(last, p, rhsContext); } else { unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1); } return; } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	137	137	1	replace	
6	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  Context rhsContext = getContextForNoInOperator(context);    if (last.getType() == type && NodeUtil.isAssociative(type)) { addExpr(first, p, context); cc.addOp(opstr, true); [BUGGY] [BUGGY] addExpr(last, p, rhsContext); } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {  addExpr(first, p, context); cc.addOp(opstr, true); addExpr(last, p, rhsContext); } else { unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1); } return; } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	137	137	1	add	
7	[BUG] [BUGGY] add(first, Context.IN_FOR_INIT_CLAUSE); [FE] ComparisonFailure [CONTEXT] if (preserveBlock) { cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } break; } case Token.FOR: if (childCount == 4) { add("for("); if (first.isVar()) { [BUGGY] add(first, Context.IN_FOR_INIT_CLAUSE); [BUGGY] } else { addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE); } add(";"); add(first.getNext()); add(";"); add(first.getNext().getNext()); add(")"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), false); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	422	422	1	replace	
8	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (preserveBlock) { cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } break; } case Token.FOR: if (childCount == 4) { add("for("); if (first.isVar()) { [BUGGY] [BUGGY] add(first, Context.IN_FOR_INIT_CLAUSE); } else { addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE); } add(";"); add(first.getNext()); add(";"); add(first.getNext().getNext()); add(")"); addNonEmptyStatement( last, getContextForNonEmptyExpression(context), false); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.7071067811865475	422	422	1	add	
9	[BUG] [BUGGY] Preconditions.checkState(childCount == 1); [FE] ComparisonFailure [CONTEXT] case Token.BITNOT: case Token.POS: {  Preconditions.checkState(childCount == 1); cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); break; } case Token.NEG: { [BUGGY] Preconditions.checkState(childCount == 1); [BUGGY]     if (n.getFirstChild().isNumber()) { cc.addNumber(-n.getFirstChild().getDouble()); } else { cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5773502691896258	267	267	1	replace	
10	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] case Token.BITNOT: case Token.POS: {  Preconditions.checkState(childCount == 1); cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); break; } case Token.NEG: { [BUGGY] [BUGGY] Preconditions.checkState(childCount == 1);    if (n.getFirstChild().isNumber()) { cc.addNumber(-n.getFirstChild().getDouble()); } else { cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5773502691896258	267	267	1	add	
11	[BUG] [BUGGY] if (n.getFirstChild().isNumber()) { [FE] ComparisonFailure [CONTEXT] addExpr(first, NodeUtil.precedence(type), Context.OTHER); break; } case Token.NEG: { Preconditions.checkState(childCount == 1);    [BUGGY] if (n.getFirstChild().isNumber()) { [BUGGY] cc.addNumber(-n.getFirstChild().getDouble()); } else { cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); } break; } case Token.HOOK: { [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5773502691896258	272	272	1	replace	
12	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] addExpr(first, NodeUtil.precedence(type), Context.OTHER); break; } case Token.NEG: { Preconditions.checkState(childCount == 1);    [BUGGY] [BUGGY] if (n.getFirstChild().isNumber()) { cc.addNumber(-n.getFirstChild().getDouble()); } else { cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); } break; } case Token.HOOK: { [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5773502691896258	272	272	1	add	
13	[BUG] [BUGGY] cc.addOp(NodeUtil.opToStrNoFail(type), false); [FE] ComparisonFailure [CONTEXT] if (n.getFirstChild().isNumber()) { cc.addNumber(-n.getFirstChild().getDouble()); } else { [BUGGY] cc.addOp(NodeUtil.opToStrNoFail(type), false); [BUGGY] addExpr(first, NodeUtil.precedence(type), Context.OTHER); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5773502691896258	275	275	1	replace	
14	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (n.getFirstChild().isNumber()) { cc.addNumber(-n.getFirstChild().getDouble()); } else { [BUGGY] [BUGGY] cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5773502691896258	275	275	1	add	
15	[BUG] [BUGGY] addExpr(first, NodeUtil.precedence(type), Context.OTHER); [FE] ComparisonFailure [CONTEXT] if (n.getFirstChild().isNumber()) { cc.addNumber(-n.getFirstChild().getDouble()); } else { cc.addOp(NodeUtil.opToStrNoFail(type), false); [BUGGY] addExpr(first, NodeUtil.precedence(type), Context.OTHER); [BUGGY] } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5773502691896258	276	276	1	replace	
16	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (n.getFirstChild().isNumber()) { cc.addNumber(-n.getFirstChild().getDouble()); } else { cc.addOp(NodeUtil.opToStrNoFail(type), false); [BUGGY] [BUGGY] addExpr(first, NodeUtil.precedence(type), Context.OTHER); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5773502691896258	276	276	1	add	
18	[BUG] [BUGGY] cc.endStatement(true); [FE] ComparisonFailure [CONTEXT] if (cc.shouldPreserveExtraBlocks()) { cc.beginBlock(); cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } else { [BUGGY] cc.endStatement(true); [BUGGY] } [CLASS] CodeGenerator Context [METHOD] addNonEmptyStatement [RETURN_TYPE] void  Node n Context context boolean allowNonBlockChild [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean allowNonBlockChild alwaysWrapInBlock ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings Node firstAndOnlyChild n nodeToProcess CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opStr opstr regexp s str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int count char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5773502691896258	858	858	1	replace	
19	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (cc.shouldPreserveExtraBlocks()) { cc.beginBlock(); cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } else { [BUGGY] [BUGGY] cc.endStatement(true); } [CLASS] CodeGenerator Context [METHOD] addNonEmptyStatement [RETURN_TYPE] void  Node n Context context boolean allowNonBlockChild [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean allowNonBlockChild alwaysWrapInBlock ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings Node firstAndOnlyChild n nodeToProcess CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opStr opstr regexp s str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int count char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5773502691896258	858	858	1	add	
20	[BUG] [BUGGY] if (cc.shouldPreserveExtraBlocks()) { [FE] ComparisonFailure [CONTEXT] if (!allowNonBlockChild && !n.isBlock()) { throw new Error("Missing BLOCK child."); }   if (n.isBlock()) { int count = getNonEmptyChildCount(n, 2); if (count == 0) { [BUGGY] if (cc.shouldPreserveExtraBlocks()) { [BUGGY] cc.beginBlock(); cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } else { cc.endStatement(true); } return; } if (count == 1) {  [CLASS] CodeGenerator Context [METHOD] addNonEmptyStatement [RETURN_TYPE] void  Node n Context context boolean allowNonBlockChild [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean allowNonBlockChild alwaysWrapInBlock ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings Node firstAndOnlyChild n nodeToProcess CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opStr opstr regexp s str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int count char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5	854	854	1	replace	
21	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (!allowNonBlockChild && !n.isBlock()) { throw new Error("Missing BLOCK child."); }   if (n.isBlock()) { int count = getNonEmptyChildCount(n, 2); if (count == 0) { [BUGGY] [BUGGY] if (cc.shouldPreserveExtraBlocks()) { cc.beginBlock(); cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } else { cc.endStatement(true); } return; } if (count == 1) {  [CLASS] CodeGenerator Context [METHOD] addNonEmptyStatement [RETURN_TYPE] void  Node n Context context boolean allowNonBlockChild [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean allowNonBlockChild alwaysWrapInBlock ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings Node firstAndOnlyChild n nodeToProcess CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opStr opstr regexp s str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int count char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5	854	854	1	add	
22	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (cc.shouldPreserveExtraBlocks()) { cc.beginBlock(); cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } else { cc.endStatement(true); } [CLASS] CodeGenerator Context [METHOD] addNonEmptyStatement [RETURN_TYPE] void  Node n Context context boolean allowNonBlockChild [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean allowNonBlockChild alwaysWrapInBlock ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings Node firstAndOnlyChild n nodeToProcess CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opStr opstr regexp s str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int count char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5	860	860	1	replace	
23	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (cc.shouldPreserveExtraBlocks()) { cc.beginBlock(); cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } else { cc.endStatement(true); } [CLASS] CodeGenerator Context [METHOD] addNonEmptyStatement [RETURN_TYPE] void  Node n Context context boolean allowNonBlockChild [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean allowNonBlockChild alwaysWrapInBlock ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings Node firstAndOnlyChild n nodeToProcess CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opStr opstr regexp s str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int count char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5	860	860	1	add	
24	[BUG] [BUGGY] cc.listSeparator(); [FE] ComparisonFailure [CONTEXT] void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) { for (Node n = firstInList; n != null; n = n.getNext()) { boolean isFirst = n == firstInList; if (isFirst) { addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext); } else { [BUGGY] cc.listSeparator(); [BUGGY] addExpr(n, isArrayOrFunctionArgument ? 1 : 0, getContextForNoInOperator(lhsContext)); } } } [CLASS] CodeGenerator Context [METHOD] addList [RETURN_TYPE] void  Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext LanguageMode languageMode boolean allowNonBlockChild alwaysWrapInBlock ambiguousElseClause funcNeedsParens hasElse isArrayOrFunctionArgument isFirst needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings Node firstInList n CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opStr opstr regexp s str Map escapedJsStrings CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5	951	951	1	replace	
25	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) { for (Node n = firstInList; n != null; n = n.getNext()) { boolean isFirst = n == firstInList; if (isFirst) { addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext); } else { [BUGGY] [BUGGY] cc.listSeparator(); addExpr(n, isArrayOrFunctionArgument ? 1 : 0, getContextForNoInOperator(lhsContext)); } } } [CLASS] CodeGenerator Context [METHOD] addList [RETURN_TYPE] void  Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext LanguageMode languageMode boolean allowNonBlockChild alwaysWrapInBlock ambiguousElseClause funcNeedsParens hasElse isArrayOrFunctionArgument isFirst needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings Node firstInList n CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opStr opstr regexp s str Map escapedJsStrings CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5	951	951	1	add	
26	[BUG] [BUGGY] addExpr(n, isArrayOrFunctionArgument ? 1 : 0, getContextForNoInOperator(lhsContext)); [FE] ComparisonFailure [CONTEXT] void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) { for (Node n = firstInList; n != null; n = n.getNext()) { boolean isFirst = n == firstInList; if (isFirst) { addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext); } else { cc.listSeparator(); [BUGGY] addExpr(n, isArrayOrFunctionArgument ? 1 : 0,   getContextForNoInOperator(lhsContext)); [BUGGY] getContextForNoInOperator(lhsContext)); } } } [CLASS] CodeGenerator Context [METHOD] addList [RETURN_TYPE] void  Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext LanguageMode languageMode boolean allowNonBlockChild alwaysWrapInBlock ambiguousElseClause funcNeedsParens hasElse isArrayOrFunctionArgument isFirst needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings Node firstInList n CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opStr opstr regexp s str Map escapedJsStrings CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5	952	953	1	replace	
27	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) { for (Node n = firstInList; n != null; n = n.getNext()) { boolean isFirst = n == firstInList; if (isFirst) { addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext); } else { cc.listSeparator(); [BUGGY] [BUGGY] addExpr(n, isArrayOrFunctionArgument ? 1 : 0,   getContextForNoInOperator(lhsContext)); getContextForNoInOperator(lhsContext)); } } } [CLASS] CodeGenerator Context [METHOD] addList [RETURN_TYPE] void  Node firstInList boolean isArrayOrFunctionArgument Context lhsContext [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context lhsContext rhsContext LanguageMode languageMode boolean allowNonBlockChild alwaysWrapInBlock ambiguousElseClause funcNeedsParens hasElse isArrayOrFunctionArgument isFirst needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings Node firstInList n CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opStr opstr regexp s str Map escapedJsStrings CharsetEncoder outputCharsetEncoder char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.5	952	953	1	add	
28	[BUG] [BUGGY] Preconditions.checkState(childCount == 3); [FE] ComparisonFailure [CONTEXT] cc.addNumber(-n.getFirstChild().getDouble()); } else { cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); } break; } case Token.HOOK: { [BUGGY] Preconditions.checkState(childCount == 3); [BUGGY] int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); addExpr(last, 1, rhsContext); break; }  [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	283	283	1	replace	
29	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] cc.addNumber(-n.getFirstChild().getDouble()); } else { cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); } break; } case Token.HOOK: { [BUGGY] [BUGGY] Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); addExpr(last, 1, rhsContext); break; }  [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	283	283	1	add	
30	[BUG] [BUGGY] int p = NodeUtil.precedence(type); [FE] ComparisonFailure [CONTEXT] } else { cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); } break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); [BUGGY] int p = NodeUtil.precedence(type); [BUGGY] Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); addExpr(last, 1, rhsContext); break; } case Token.REGEXP: [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	284	284	1	replace	
31	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } else { cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); } break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); [BUGGY] [BUGGY] int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); addExpr(last, 1, rhsContext); break; } case Token.REGEXP: [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	284	284	1	add	
32	[BUG] [BUGGY] Context rhsContext = Context.OTHER; [FE] ComparisonFailure [CONTEXT] cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); } break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); [BUGGY] Context rhsContext = Context.OTHER; [BUGGY] addExpr(first, p + 1, context); cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); addExpr(last, 1, rhsContext); break; } case Token.REGEXP: if (!first.isString() || [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	285	285	1	replace	
33	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type), Context.OTHER); } break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); [BUGGY] [BUGGY] Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); addExpr(last, 1, rhsContext); break; } case Token.REGEXP: if (!first.isString() || [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	285	285	1	add	
34	[BUG] [BUGGY] addExpr(first, p + 1, context); [FE] ComparisonFailure [CONTEXT] addExpr(first, NodeUtil.precedence(type), Context.OTHER); } break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; [BUGGY] addExpr(first, p + 1, context); [BUGGY] cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); addExpr(last, 1, rhsContext); break; } case Token.REGEXP: if (!first.isString() || !last.isString()) { [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	
35	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] addExpr(first, NodeUtil.precedence(type), Context.OTHER); } break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; [BUGGY] [BUGGY] addExpr(first, p + 1, context); cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); addExpr(last, 1, rhsContext); break; } case Token.REGEXP: if (!first.isString() || !last.isString()) { [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	
36	[BUG] [BUGGY] cc.addOp("?", true); [FE] ComparisonFailure [CONTEXT] } break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); [BUGGY] cc.addOp("?", true); [BUGGY] addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); addExpr(last, 1, rhsContext); break; } case Token.REGEXP: if (!first.isString() || !last.isString()) { throw new Error("Expected children to be strings"); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	
37	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); [BUGGY] [BUGGY] cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); addExpr(last, 1, rhsContext); break; } case Token.REGEXP: if (!first.isString() || !last.isString()) { throw new Error("Expected children to be strings"); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	
38	[BUG] [BUGGY] addExpr(first.getNext(), 1, rhsContext); [FE] ComparisonFailure [CONTEXT] break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp("?", true); [BUGGY] addExpr(first.getNext(), 1, rhsContext); [BUGGY] cc.addOp(":", true); addExpr(last, 1, rhsContext); break; } case Token.REGEXP: if (!first.isString() || !last.isString()) { throw new Error("Expected children to be strings"); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	replace	
39	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp("?", true); [BUGGY] [BUGGY] addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); addExpr(last, 1, rhsContext); break; } case Token.REGEXP: if (!first.isString() || !last.isString()) { throw new Error("Expected children to be strings"); } [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	288	288	1	add	
40	[BUG] [BUGGY] cc.addOp(":", true); [FE] ComparisonFailure [CONTEXT] break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); [BUGGY] cc.addOp(":", true); [BUGGY] addExpr(last, 1, rhsContext); break; } case Token.REGEXP: if (!first.isString() || !last.isString()) { throw new Error("Expected children to be strings"); }  [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	replace	
41	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); [BUGGY] [BUGGY] cc.addOp(":", true); addExpr(last, 1, rhsContext); break; } case Token.REGEXP: if (!first.isString() || !last.isString()) { throw new Error("Expected children to be strings"); }  [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	289	289	1	add	
42	[BUG] [BUGGY] addExpr(last, 1, rhsContext); [FE] ComparisonFailure [CONTEXT] } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); [BUGGY] addExpr(last, 1, rhsContext); [BUGGY] break; } case Token.REGEXP: if (!first.isString() || !last.isString()) { throw new Error("Expected children to be strings"); } String regexp = regexpEscape(first.getString(), outputCharsetEncoder); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	replace	
43	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); [BUGGY] [BUGGY] addExpr(last, 1, rhsContext); break; } case Token.REGEXP: if (!first.isString() || !last.isString()) { throw new Error("Expected children to be strings"); } String regexp = regexpEscape(first.getString(), outputCharsetEncoder); [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	290	290	1	add	
44	[BUG] [BUGGY] break; [FE] ComparisonFailure [CONTEXT] case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); addExpr(last, 1, rhsContext); [BUGGY] break; [BUGGY] } case Token.REGEXP: if (!first.isString() || !last.isString()) { throw new Error("Expected children to be strings"); } String regexp = regexpEscape(first.getString(), outputCharsetEncoder);  [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	replace	
45	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); Context rhsContext = Context.OTHER; addExpr(first, p + 1, context); cc.addOp("?", true); addExpr(first.getNext(), 1, rhsContext); cc.addOp(":", true); addExpr(last, 1, rhsContext); [BUGGY] [BUGGY] break; } case Token.REGEXP: if (!first.isString() || !last.isString()) { throw new Error("Expected children to be strings"); } String regexp = regexpEscape(first.getString(), outputCharsetEncoder);  [CLASS] CodeGenerator Context [METHOD] add [RETURN_TYPE] void  Node n Context context [VARIABLES] Context BEFORE_DANGLING_ELSE IN_FOR_INIT_CLAUSE OTHER PRESERVE_BLOCK START_OF_EXPR STATEMENT context rhsContext LanguageMode languageMode boolean ambiguousElseClause funcNeedsParens hasElse needsParens preferLineBreaks preferSingleQuotes preserveBlock trustedStrings double d Node body c catchblock first fn last n next parameters CodeConsumer cc consumer String GT_ESCAPED LT_ESCAPED identifier key name o opstr regexp str Map escapedJsStrings CharsetEncoder outputCharsetEncoder int childCount p postProp precedence type char[] HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	291	291	1	add	
46	[BUG] [BUGGY] if (childCount == 4) { [FE] ComparisonFailure [CONTEXT] } break; } case Token.FOR: [BUGGY] if (childCount == 4) { [BUGGY] add("for("); if (first.isVar()) { add(first, Context.IN_FOR_INIT_CLAUSE); } else { addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE); [CLASS] 	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	419	419	1	replace	
47	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } break; } case Token.FOR: [BUGGY] [BUGGY] if (childCount == 4) { add("for("); if (first.isVar()) { add(first, Context.IN_FOR_INIT_CLAUSE); } else { addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE); [CLASS] 	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	419	419	1	add	
48	[BUG] [BUGGY] add("for("); [FE] ComparisonFailure [CONTEXT] break; } case Token.FOR: if (childCount == 4) { [BUGGY] add("for("); [BUGGY] if (first.isVar()) { add(first, Context.IN_FOR_INIT_CLAUSE); } else { addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE); } [CLASS] 	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	420	420	1	replace	
49	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] break; } case Token.FOR: if (childCount == 4) { [BUGGY] [BUGGY] add("for("); if (first.isVar()) { add(first, Context.IN_FOR_INIT_CLAUSE); } else { addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE); } [CLASS] 	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	420	420	1	add	
