bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	          Preconditions.checkState(childCount    ==    2);    int    childCount    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	116	None	replace
2	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
3	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
4	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	57	None	add
5	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
6	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
7	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
8	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
9	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	57	None	add
10	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
11	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
12	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]                  IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  childCount  =  NodeUtil.precedence(type);	          Preconditions.checkState(childCount    ==    2);    int    childCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	119	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type,  rhsContext);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]                    IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type,  rhsContext);	          Preconditions.checkState(childCount    ==    2);    int    childCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	119	None	replace
14	[BUG]  [BUGGY]  Integer  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]                      IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  childCount  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  childCount  =  NodeUtil.precedence(type);	          Preconditions.checkState(childCount    ==    2);    int    childCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	119	None	replace
15	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  int  firstCount  =  NodeUtil.precedence(childCount);  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  int  firstCount  =  NodeUtil.precedence(childCount);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(childCount);    int  firstCount  =  NodeUtil.precedence(childCount);	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	33	None	add
16	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  int  firstCount  =  NodeUtil.precedence(childCount);  cc.addOp( "?   ",  true);  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  int  firstCount  =  NodeUtil.precedence(childCount);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(childCount);    int  firstCount  =  NodeUtil.precedence(childCount);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	33	None	add
17	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  int  firstCount  =  NodeUtil.precedence(childCount);  addExpr(first,  1,  rhsContext);  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  int  firstCount  =  NodeUtil.precedence(childCount);  addExpr(first,  1,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(childCount);    int  firstCount  =  NodeUtil.precedence(childCount);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	33	None	add
18	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  int  firstCount  =  NodeUtil.precedence(childCount);  cc.addOp( ": ",  true);  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  int  firstCount  =  NodeUtil.precedence(childCount);  cc.addOp( ": ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(childCount);    int  firstCount  =  NodeUtil.precedence(childCount);  cc.addOp( ": ",  true);	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	33	None	add
19	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  int  secondCount  =  NodeUtil.precedence(childCount);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int    firstCount    =    NodeUtil.precedence(childCount);    int  secondCount  =  NodeUtil.precedence(childCount);	  	compilable	  [FE]  IllegalStateException  	33	5	add
20	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  int  secondCount  =  NodeUtil.precedence(childCount);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  int  secondCount  =  NodeUtil.precedence(childCount);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(childCount);    int  secondCount  =  NodeUtil.precedence(childCount);	  	compilable	  [FE]  IllegalStateException  	33	5	add
21	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  childCount);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  childCount);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  childCount);	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER);    	non-compiled	[CE]  ';'  expected	167	None	replace
22	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount),  Context.OTHER);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount),  Context.OTHER);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(childCount),  Context.OTHER);	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER);    	non-compiled	[CE]  ';'  expected	167	None	replace
23	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  childCount++;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  childCount++;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  childCount++;	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER);    	non-compiled	[CE]  ';'  expected	167	None	replace
24	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  |  Context.OTHER);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  |  Context.OTHER);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  |  Context.OTHER);	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER);    	non-compiled	[CE]  ';'  expected	167	None	replace
25	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,    0,    rhsContext);    addExpr(first,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	135	5	add
26	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  addExpr(first,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    0,    rhsContext);    addExpr(first,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	135	5	add
27	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,    0,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	135	5	add
28	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    0,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	135	5	add
29	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  0,  rhsContext);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    0,    rhsContext);    cc.addOp( "?   ",  0,  rhsContext);	  	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	135	None	add
30	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]          ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,    0,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	135	5	add
31	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]          ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    0,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	135	5	add
32	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  0,  rhsContext);  addExpr(first,  0,  rhsContext);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  0,  rhsContext);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    0,    rhsContext);    cc.addOp( "?   ",  0,  rhsContext);  addExpr(first,  0,  rhsContext);	  	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	135	None	add
33	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]              ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,    0,    rhsContext);    addExpr(last,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	135	5	add
34	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  addExpr(last,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]              ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    0,    rhsContext);    addExpr(last,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	135	5	add
35	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER,  childCount);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER,  childCount);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  Context.OTHER,  childCount);	  Integer    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	171	None	replace
36	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(first,  type,  Context.OTHER);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(first,  type,  Context.OTHER);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(first,  type,  Context.OTHER);	  Integer    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	171	None	replace
37	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER,  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER,  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  Context.OTHER,  1);	  Integer    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	171	None	replace
38	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	9	5	add
39	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	9	5	add
40	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	9	5	add
41	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	9	5	add
42	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	9	5	add
43	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	9	5	add
44	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    int  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	9	None	add
45	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	9	5	add
46	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	9	5	add
47	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	9	None	add
48	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
49	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
50	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
51	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
52	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
53	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
54	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
55	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
56	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
57	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
58	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext  +  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext  +  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  rhsContext  +  1);	  int    p    =    NodeUtil.precedence(type    +    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	79	None	replace
59	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type)+  1;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type)+  1;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type)+  1;	  int    p    =    NodeUtil.precedence(type    +    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	79	None	replace
60	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type)-  1;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type)-  1;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type)-  1;	  int    p    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	77	None	replace
61	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER  +  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER  +  1;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type),  Context.OTHER  +  1;	  int    p    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  ';'  expected	77	None	replace
62	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type)/  Context.OTHER;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type)/  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type)/  Context.OTHER;	  int    p    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	77	None	replace
63	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                Preconditions.checkState(childCount        ==        1);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	26	5	add
64	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        1);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	26	5	add
65	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Context.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Context.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        1);        Preconditions.checkState(childCount    ==    1);    Context.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
66	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        1);        Preconditions.checkState(childCount    ==    1);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	26	None	add
67	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        1);        Preconditions.checkState(childCount    ==    1);    int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	26	None	add
68	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	69	5	add
69	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	69	5	add
70	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	69	5	add
71	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	69	5	add
72	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	69	5	add
73	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	69	5	add
74	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	69	None	add
75	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	69	5	add
76	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	69	5	add
77	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
78	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	163	5	add
79	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	163	5	add
80	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	163	5	add
81	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	163	5	add
82	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);	  	non-compiled	[CE]  not  a  statement	163	None	add
83	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	163	None	add
84	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(last,  NodeUtil.precedence(type),  Context.OTHER);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(last,  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(last,  NodeUtil.precedence(type),  Context.OTHER);	  	non-compiled	[CE]  not  a  statement	163	None	add
85	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	163	None	add
86	[BUG]  [BUGGY]  Node  first  =  context.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Node  first  =  context.getFirstChild().getNext();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  context.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	137	None	replace
87	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext()  +  1;  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Node  first  =  n.getFirstChild().getNext()  +  1;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  n.getFirstChild().getNext()  +  1;	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	137	None	replace
88	[BUG]  [BUGGY]  Node  first  =  n.getLastChild().getNext();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Node  first  =  n.getLastChild().getNext();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  n.getLastChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	137	None	replace
89	[BUG]  [BUGGY]  Node  first  =  rhsContext.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Node  first  =  rhsContext.getFirstChild().getNext();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  rhsContext.getFirstChild().getNext();	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	137	None	replace
90	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  n.addOp('?',  true);  [CE]  cannot  find  symbol  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  true);  n.addOp('?',  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  true);  n.addOp('?',  true);	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
91	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);	          Preconditions.checkState(childCount    ==    1);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	28	None	replace
92	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);	          Preconditions.checkState(childCount    ==    1);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	28	None	replace
93	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  ComparisonFailure  	11	1	add
94	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  ComparisonFailure  	11	1	add
95	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	11	None	add
96	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Context.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Context.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Context.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
97	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	11	None	add
98	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  true);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  true);	  addExpr(first,    p    +    1,    rhsContext,    false);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	170	None	replace
99	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  false,  context);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  false,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  false,  context);	  addExpr(first,    p    +    1,    rhsContext,    false);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	170	None	replace
100	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  null);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  null);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  null);	  addExpr(first,    p    +    1,    rhsContext,    false);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	170	None	replace
101	[BUG]  [BUGGY]  addExpr(first.getNext(),  p  +  1,  rhsContext,  false);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first.getNext(),  p  +  1,  rhsContext,  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first.getNext(),  p  +  1,  rhsContext,  false);	  addExpr(first,    p    +    1,    rhsContext,    false);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	170	None	replace
102	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	junit.framework.ComparisonFailure:  expected	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  not  a  statement	133	None	replace
103	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
104	[BUG]  [BUGGY]  junit.framework.ComparisonFailure:  expected;  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  junit.framework.ComparisonFailure:  expected;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	junit.framework.ComparisonFailure:  expected;	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  not  a  statement	133	None	replace
105	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  [CE]  cannot  find  symbol  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  true);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
106	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.removeChild(first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	n.removeChild(first);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  NullPointerException  	133	5	replace
107	[BUG]  [BUGGY]  n.removeChild(first);  [FE]  NullPointerException  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.removeChild(first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.removeChild(first);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  NullPointerException  	133	5	replace
108	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);	          Preconditions.checkState(childCount    ==    3);    int    childCount    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	14	None	replace
109	[BUG]  [BUGGY]  Node  first  =  context.getLastChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Node  first  =  context.getLastChild();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  context.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	17	None	replace
110	[BUG]  [BUGGY]  Node  first  =  rhsContext.getLastChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Node  first  =  rhsContext.getLastChild();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  rhsContext.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	17	None	replace
111	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  context);  addExpr(n,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(n,    p    +    1,    context);    addExpr(n,  p  +  1,  context);	  	compilable	  [FE]  StackOverflowError  	54	5	add
112	[BUG]  [BUGGY]  addExpr(n,  p  +  1,  context);  addExpr(n,  p  +  1,  context);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  context);  addExpr(n,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(n,    p    +    1,    context);    addExpr(n,  p  +  1,  context);	  	compilable	  [FE]  StackOverflowError  	54	5	add
113	[BUG]  [BUGGY]  addExpr(n,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(n,    p    +    1,    context);    int  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	54	None	add
114	[BUG]  [BUGGY]  addExpr(n,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  addExpr(n,  p  +  1,  context);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  addExpr(n,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(n,    p    +    1,    context);    int  p  =  NodeUtil.precedence(type);  addExpr(n,  p  +  1,  context);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	54	None	add
115	[BUG]  [BUGGY]  addExpr(n,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(n,    p    +    1,    context);    int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	54	None	add
116	[BUG]  [BUGGY]  addExpr(n,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  context);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(n,    p    +    1,    context);    int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  context);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	54	None	add
117	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(n,    p    +    1,    context);    addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  StackOverflowError  	54	5	add
118	[BUG]  [BUGGY]  addExpr(n,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(n,    p    +    1,    context);    addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  StackOverflowError  	54	5	add
119	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(context,  type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(context,  type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(context,  type);	  int    p    =    NodeUtil.precedence(type,    context);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	78	None	replace
120	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  n);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type,  n);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  n);	  int    p    =    NodeUtil.precedence(type,    context);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	78	None	replace
121	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);	  addExpr(first,    p    +    1,    rhsContext);    int    p    =    NodeUtil.precedence(type);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	3	None	replace
122	[BUG]  [BUGGY]  int  rhsContext  =  NodeUtil.precedence(type);  [CE]  variable  rhsContext  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  rhsContext  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  rhsContext  =  NodeUtil.precedence(type);	  addExpr(first,    p    +    1,    rhsContext);    int    p    =    NodeUtil.precedence(type);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  variable  rhsContext  is  already  defined  in  method  add(Node,Context)	3	None	replace
123	[BUG]  [BUGGY]  int  rhsContext  =  NodeUtil.precedence(type);  addExpr(first,  rhsContext,  rhsContext);  [CE]  variable  rhsContext  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  rhsContext  =  NodeUtil.precedence(type);  addExpr(first,  rhsContext,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  rhsContext  =  NodeUtil.precedence(type);  addExpr(first,  rhsContext,  rhsContext);	  addExpr(first,    p    +    1,    rhsContext);    int    p    =    NodeUtil.precedence(type);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  variable  rhsContext  is  already  defined  in  method  add(Node,Context)	3	None	replace
124	[BUG]  [BUGGY]  addExpr(first,  0,  p);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  p);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  0,  p);	  addExpr(first,    0,    rhsContext);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	136	None	replace
125	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,  1,  rhsContext);	  addExpr(first,    0,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	136	3	replace
126	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  1,  rhsContext);	  addExpr(first,    0,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	136	3	replace
127	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,  0,  rhsContext);	  addExpr(first,    0,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	136	5	replace
128	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,  0,  rhsContext);	  addExpr(first,    0,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	136	5	replace
129	[BUG]  [BUGGY]  addExpr(p,  0,  rhsContext);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(p,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(p,  0,  rhsContext);	  addExpr(first,    0,    rhsContext);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	136	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type,  rhsContext);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]              IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type,  rhsContext);	          Preconditions.checkState(childCount    ==    1);    int    childCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	30	None	replace
131	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type),  Context.OTHER  +  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type),  Context.OTHER  +  1;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type),  Context.OTHER  +  1;	  Integer    p    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  ';'  expected	45	None	replace
132	[BUG]  [BUGGY]  Context  cc  =  getCurrentStatementContext(n);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentStatementContext(n);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentStatementContext(n);	  Context    cc    =    getCurrentStatementContext();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
133	[BUG]  [BUGGY]  Context  cc  =  getCurrentStatementContext().getCurrentStatementContext();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentStatementContext().getCurrentStatementContext();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentStatementContext().getCurrentStatementContext();	  Context    cc    =    getCurrentStatementContext();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
134	[BUG]  [BUGGY]  Context  cc  =  createCurrentStatementContext();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  createCurrentStatementContext();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  createCurrentStatementContext();	  Context    cc    =    getCurrentStatementContext();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
135	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	111	5	add
136	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	111	5	add
137	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	111	5	add
138	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	111	5	add
139	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Integer  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	111	None	add
140	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    int  childCount  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	111	None	add
141	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	111	None	add
142	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	111	None	add
143	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    int    childCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
144	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]                IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    int    childCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	72	None	replace
145	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	87	5	replace
146	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	87	5	replace
147	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	87	5	replace
148	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	87	5	replace
149	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	87	5	replace
150	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	87	5	replace
151	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	87	5	replace
152	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	87	5	replace
153	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [CE]  cannot  find  symbol  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
154	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addChildToFront(first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	n.addChildToFront(first);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  IllegalArgumentException  	130	5	replace
155	[BUG]  [BUGGY]  n.addChildToFront(first);  [FE]  IllegalArgumentException  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addChildToFront(first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addChildToFront(first);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  IllegalArgumentException  	130	5	replace
156	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	143	5	add
157	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	143	5	add
158	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	143	5	add
159	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	143	5	add
160	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	143	5	add
161	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	143	5	add
162	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	143	5	add
163	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	143	5	add
164	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	143	5	add
165	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	143	5	add
166	[BUG]  [BUGGY]  add(first,  p  +  1,  n,  context);  [CE]  no  suitable  method  found  for  add(Node,int,Node,Context)  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  n,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  n,  context);	  add(first,    p    +    1,    context);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Node,Context)	147	None	replace
167	[BUG]  [BUGGY]  add(first,  p  +  1,  context,  rhsContext);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Context)  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  context,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  context,  rhsContext);	  add(first,    p    +    1,    context);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Context)	147	None	replace
168	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);	  addExpr(last,    p    +    1,    context);    int    p    =    NodeUtil.precedence(type);    addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	60	None	replace
169	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);	  addExpr(last,    p    +    1,    context);    int    p    =    NodeUtil.precedence(type);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  ComparisonFailure  	60	2	replace
170	[BUG]  [BUGGY]  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [FE]  ComparisonFailure  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);	  addExpr(last,    p    +    1,    context);    int    p    =    NodeUtil.precedence(type);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  ComparisonFailure  	60	2	replace
171	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	91	5	replace
172	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	91	5	replace
173	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	91	5	replace
174	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	91	5	replace
175	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ":   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp( ":   ",  false);  addExpr(first,  p  +  1,  rhsContext);	  cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	91	5	replace
176	[BUG]  [BUGGY]  cc.addOp( ":   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ":   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ":   ",  false);  addExpr(first,  p  +  1,  rhsContext);	  cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	91	5	replace
177	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	89	5	replace
178	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	89	5	replace
179	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);	  cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
180	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	89	5	replace
181	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	89	5	replace
182	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	89	5	replace
183	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	89	5	replace
184	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance(context);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextInstance(context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextInstance(context);	  Context    cc    =    getCurrentContextInstance();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
185	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance(n);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextInstance(n);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextInstance(n);	  Context    cc    =    getCurrentContextInstance();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
186	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance(p);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextInstance(p);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextInstance(p);	  Context    cc    =    getCurrentContextInstance();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
187	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance(p,  context);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextInstance(p,  context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextInstance(p,  context);	  Context    cc    =    getCurrentContextInstance();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
188	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
189	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
190	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
191	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
192	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
193	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
194	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
195	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
196	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
197	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
198	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,  1,  rhsContext);	  addExpr(last,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	24	5	replace
199	[BUG]  [BUGGY]  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,  1,  rhsContext);	  addExpr(last,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	24	5	replace
200	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  n);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,  p  +  1,  n);	  addExpr(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	24	None	replace
201	[BUG]  [BUGGY]  n.addExpr(first,  p  +  1,  context);  [CE]  cannot  find  symbol  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addExpr(first,  p  +  1,  context);	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
202	[BUG]  [BUGGY]  n.addExpr(last,  p  +  1,  context);  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addExpr(last,  p  +  1,  context);	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
203	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  last,  context);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Node,Context)  [FE]                        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  last,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  last,  context);	  add(first,    p    +    1,    rhsContext,    last);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Node,Context)	126	None	replace
204	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  last);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  last);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  last);	  add(first,    p    +    1,    rhsContext,    last);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	126	None	replace
205	[BUG]  [BUGGY]  add(last,  p  +  1,  rhsContext,  first);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Node)  [FE]                            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(last,  p  +  1,  rhsContext,  first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(last,  p  +  1,  rhsContext,  first);	  add(first,    p    +    1,    rhsContext,    last);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Node)	126	None	replace
206	[BUG]  [BUGGY]  add(first,  p  +  1,  n,  rhsContext);  [CE]  no  suitable  method  found  for  add(Node,int,Node,Context)  [FE]                              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  n,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  n,  rhsContext);	  add(first,    p    +    1,    rhsContext,    last);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Node,Context)	126	None	replace
207	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	92	5	add
208	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	92	5	add
209	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	92	5	add
210	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	92	5	add
211	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	92	5	add
212	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	92	5	add
213	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	92	5	add
214	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	92	5	add
215	[BUG]  [BUGGY]  cc.addOp( ": ".,  false);  [CE]  <identifier>  expected  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ": ".,  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ": ".,  false);	  cc.addOp(   ":   ",    false);    	non-compiled	[CE]  <identifier>  expected	121	None	replace
216	[BUG]  [BUGGY]  cc.addOp( ": ", "  false);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ": ", "  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ": ", "  false);	  cc.addOp(   ":   ",    false);    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
217	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(n,  p  +  1,  rhsContext);	  addExpr(n,    p    +    1,    context);    	compilable	  [FE]  StackOverflowError  	55	5	replace
218	[BUG]  [BUGGY]  addExpr(n,  p  +  1,  rhsContext);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(n,  p  +  1,  rhsContext);	  addExpr(n,    p    +    1,    context);    	compilable	  [FE]  StackOverflowError  	55	5	replace
219	[BUG]  [BUGGY]  [FE]  Error  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount  +  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int  firstCount  =  NodeUtil.precedence(childCount  +  1);	  int    firstCount    =    NodeUtil.precedence(childCount);    	compilable	  [FE]  Error  	34	5	replace
220	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount  +  1);  [FE]  Error  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount  +  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(childCount  +  1);	  int    firstCount    =    NodeUtil.precedence(childCount);    	compilable	  [FE]  Error  	34	5	replace
221	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount  -  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int  firstCount  =  NodeUtil.precedence(childCount  -  1);	  int    firstCount    =    NodeUtil.precedence(childCount);    	compilable	  [FE]  IllegalStateException  	34	5	replace
222	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount  -  1);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount  -  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(childCount  -  1);	  int    firstCount    =    NodeUtil.precedence(childCount);    	compilable	  [FE]  IllegalStateException  	34	5	replace
223	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(last);  [CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(last);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(last);	  int    firstCount    =    NodeUtil.precedence(childCount);    	non-compiled	[CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;	34	None	replace
224	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	86	5	add
225	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	86	5	add
226	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	86	5	add
227	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	86	5	add
228	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	86	5	add
229	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	86	5	add
230	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER  |  Context.OTHER);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER  |  Context.OTHER);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type),  Context.OTHER  |  Context.OTHER);	  int    p    =    NodeUtil.precedence(type),    Context.OTHER);    	non-compiled	[CE]  ';'  expected	168	None	replace
231	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER,  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER,  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type),  Context.OTHER,  1);	  int    p    =    NodeUtil.precedence(type),    Context.OTHER);    	non-compiled	[CE]  ';'  expected	168	None	replace
232	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
233	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
234	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
235	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
236	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
237	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
238	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
239	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
240	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
241	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
242	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( ": ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
243	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( ": ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( ": ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
244	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	115	None	replace
245	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount    ==    1);    	compilable	  [FE]  IllegalStateException  	70	5	replace
246	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount    ==    1);    	compilable	  [FE]  IllegalStateException  	70	5	replace
247	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNode(n);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNode(n);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNode(n);	  Context    cc    =    getCurrentContextForNode();    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
248	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNode(p);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNode(p);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNode(p);	  Context    cc    =    getCurrentContextForNode();    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
249	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNonNode();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNonNode();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNonNode();	  Context    cc    =    getCurrentContextForNode();    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
250	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(p  -  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int  firstCount  =  NodeUtil.precedence(p  -  1);	  int    firstCount    =    NodeUtil.precedence(type    -    1);    	compilable	  [FE]  IllegalStateException  	38	5	replace
251	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(p  -  1);  [FE]  IllegalStateException  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(p  -  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(p  -  1);	  int    firstCount    =    NodeUtil.precedence(type    -    1);    	compilable	  [FE]  IllegalStateException  	38	5	replace
252	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int  firstCount  =  NodeUtil.precedence(type  -  2);	  int    firstCount    =    NodeUtil.precedence(type    -    1);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	38	5	replace
253	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  2);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type  -  2);	  int    firstCount    =    NodeUtil.precedence(type    -    1);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	38	5	replace
254	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
255	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
256	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
257	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
258	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
259	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
260	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
261	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
262	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
263	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
264	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
265	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
266	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	90	5	add
267	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	90	5	add
268	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ".,  true);  addExpr(first,  p  +  1,  rhsContext);  [CE]  <identifier>  expected  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ".,  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ": ".,  true);  addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  <identifier>  expected	90	None	add
269	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	90	5	add
270	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ":   ",  true);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	90	5	add
271	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext,  context);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext,  context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  rhsContext,  context);	  int    p    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	76	None	replace
272	[BUG]  [BUGGY]  Context.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                  IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	118	None	replace
274	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  n);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Node)  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  n);	  add(first,    p    +    1,    rhsContext,    context);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Node)	123	None	replace
275	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  true);  [CE]  no  suitable  method  found  for  add(Node,int,Context,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  true);	  add(first,    p    +    1,    rhsContext,    false);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,boolean)	150	None	replace
276	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  false,  context);  [CE]  no  suitable  method  found  for  add(Node,int,Context,boolean,Context)  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  false,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  false,  context);	  add(first,    p    +    1,    rhsContext,    false);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,boolean,Context)	150	None	replace
277	[BUG]  [BUGGY]  cc.addOp( ":   ".equals(p),  rhsContext);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ":   ".equals(p),  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ":   ".equals(p),  rhsContext);	  cc.addOp(   ":   ".equals(p));    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	84	None	replace
278	[BUG]  [BUGGY]  cc.addOp( ":   ".equals(p,  context));  [CE]  no  suitable  method  found  for  equals(int,Context)  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ":   ".equals(p,  context));  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ":   ".equals(p,  context));	  cc.addOp(   ":   ".equals(p));    	non-compiled	[CE]  no  suitable  method  found  for  equals(int,Context)	84	None	replace
279	[BUG]  [BUGGY]  cc.addOp( ":   ".equals(p,  rhsContext));  [CE]  no  suitable  method  found  for  equals(int,Context)  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ":   ".equals(p,  rhsContext));  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ":   ".equals(p,  rhsContext));	  cc.addOp(   ":   ".equals(p));    	non-compiled	[CE]  no  suitable  method  found  for  equals(int,Context)	84	None	replace
280	[BUG]  [BUGGY]  cc.addOp( ":   ".equals(p  +  1));  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ":   ".equals(p  +  1));  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ":   ".equals(p  +  1));	  cc.addOp(   ":   ".equals(p));    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	84	None	replace
281	[BUG]  [BUGGY]  cc.addOp( ":   ".equals(p),  context);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ":   ".equals(p),  context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ":   ".equals(p),  context);	  cc.addOp(   ":   ".equals(p));    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	84	None	replace
282	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(),  context.getRootContext();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext(),  context.getRootContext();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(),  context.getRootContext();	  Context    cc    =    getCurrentContext().getRootContext();    	non-compiled	[CE]  ';'  expected	42	None	replace
283	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(),  rhsContext.getRootContext();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext(),  rhsContext.getRootContext();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(),  rhsContext.getRootContext();	  Context    cc    =    getCurrentContext().getRootContext();    	non-compiled	[CE]  ';'  expected	42	None	replace
284	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().cloneTree().getRootContext();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext().cloneTree().getRootContext();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext().cloneTree().getRootContext();	  Context    cc    =    getCurrentContext().getRootContext();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
285	[BUG]  [BUGGY]  n.addOp( ": ");  n.addOp( ".: ", ",  true);  [CE]  unclosed  string  literal  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( ": ");  n.addOp( ".: ", ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( ": ");  n.addOp( ".: ", ",  true);	  cc.addOp(       ":       ",    true);    cc.addOp(   ".:       ",    true);    	non-compiled	[CE]  unclosed  string  literal	105	None	replace
286	[BUG]  [BUGGY]  n.addOp( ": ");  n.addOp( ".: ",  true);  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( ": ");  n.addOp( ".: ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( ": ");  n.addOp( ".: ",  true);	  cc.addOp(       ":       ",    true);    cc.addOp(   ".:       ",    true);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
287	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  0);  Preconditions.checkState(childCount  ==  0);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount    ==    0);    Preconditions.checkState(childCount  ==  0);	  	compilable	  [FE]  IllegalStateException  	80	5	add
288	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  Preconditions.checkState(childCount  ==  0);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  0);  Preconditions.checkState(childCount  ==  0);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    0);    Preconditions.checkState(childCount  ==  0);	  	compilable	  [FE]  IllegalStateException  	80	5	add
289	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  0);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    0);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	80	None	add
290	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  0);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    0);    int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	80	None	add
291	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  0);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    0);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	80	None	add
292	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  0);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    0);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	80	None	add
293	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  0);  Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    0);    Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	80	None	add
294	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
295	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
296	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
297	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
298	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
299	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
300	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  childCount);  [CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  childCount);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  childCount);	  int    firstCount    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;	36	None	replace
301	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  n,  rhsContext);  [CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  n,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  n,  rhsContext);	  int    firstCount    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;	36	None	replace
302	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  parent);  [CE]  cannot  find  symbol  parent  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  parent);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  parent);	  int    firstCount    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol  parent	36	None	replace
303	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  p,  rhsContext);  [CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  p,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  p,  rhsContext);	  int    firstCount    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;	36	None	replace
304	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  context);  [CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  context);	  int    firstCount    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;	36	None	replace
305	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [CE]  cannot  find  symbol  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
306	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  rhsContext);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  rhsContext);	  Context.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
307	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  cc.addExpr(first,  p  +  1,  rhsContext);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context.checkState(childCount  ==  1);  cc.addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context.checkState(childCount  ==  1);  cc.addExpr(first,  p  +  1,  rhsContext);	  Context.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
308	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context.checkState(childCount  ==  1);	  Context.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
309	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	7	5	add
310	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	7	5	add
311	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	7	5	add
312	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	7	5	add
313	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ": ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	7	5	add
314	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ": ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	7	5	add
315	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	7	5	add
316	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	7	5	add
317	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	7	5	add
318	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	7	5	add
319	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(rhsContext);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext(rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(rhsContext);	  Context    cc    =    getCurrentContext(context);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
320	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context,  p);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext(context,  p);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(context,  p);	  Context    cc    =    getCurrentContext(context);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
321	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context,  first);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext(context,  first);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(context,  first);	  Context    cc    =    getCurrentContext(context);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
322	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  n.addOp( ".?   ",  true);  [CE]  cannot  find  symbol  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  true);  n.addOp( ".?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  true);  n.addOp( ".?   ",  true);	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
323	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ".?   ",  true);  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ".?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  false);  n.addOp( ".?   ",  true);	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
324	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(   ".:     ",  true);  cc.addOp( ":   ",  true);  cc.addOp(   ".:   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       ":       ",        true);        cc.addOp(   ".:       ",    true);    cc.addOp( ":   ",  true);  cc.addOp(   ".:   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	104	5	add
325	[BUG]  [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(   ".:     ",  true);  cc.addOp( ":   ",  true);  cc.addOp(   ".:   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(   ".:     ",  true);  cc.addOp( ":   ",  true);  cc.addOp(   ".:   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       ":       ",        true);        cc.addOp(   ".:       ",    true);    cc.addOp( ":   ",  true);  cc.addOp(   ".:   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	104	5	add
326	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
327	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
328	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
329	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
330	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
331	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
332	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
333	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
334	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
335	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
336	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  1);  addExpr(first,  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	73	None	replace
337	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
338	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                    IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	73	None	replace
339	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	157	5	add
340	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	157	5	add
341	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	157	5	add
342	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	157	5	add
343	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	157	5	add
344	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	157	5	add
345	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	157	5	add
346	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	157	5	add
347	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext.getNext());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext.getNext());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext.getNext());	  addExpr(first,    p    +    1,    rhsContext.getParent());    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
348	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext.getLastChild());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext.getLastChild());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext.getLastChild());	  addExpr(first,    p    +    1,    rhsContext.getParent());    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
349	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  context.getParent());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  context.getParent());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  context.getParent());	  addExpr(first,    p    +    1,    rhsContext.getParent());    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
350	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext.getParent());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext.getParent());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,  p  +  1,  rhsContext.getParent());	  addExpr(first,    p    +    1,    rhsContext.getParent());    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
351	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  PRESERVE_BLOCK);  [CE]  cannot  find  symbol  PRESERVE_BLOCK  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  PRESERVE_BLOCK);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  PRESERVE_BLOCK);	  add(first,    p    +    1,    rhsContext,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  cannot  find  symbol  PRESERVE_BLOCK	174	None	replace
352	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  DEFAULT_INIT_CLAUSE);  [CE]  cannot  find  symbol  DEFAULT_INIT_CLAUSE  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  DEFAULT_INIT_CLAUSE);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  DEFAULT_INIT_CLAUSE);	  add(first,    p    +    1,    rhsContext,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INIT_CLAUSE	174	None	replace
353	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
354	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
355	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
356	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
357	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
358	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
359	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
360	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
361	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( ": ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
362	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( ": ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( ": ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
363	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
364	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
365	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNonOperator();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNonOperator();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNonOperator();	  Context    cc    =    getCurrentContextForNoInOperator();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
366	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNonInOperator();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNonInOperator();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNonInOperator();	  Context    cc    =    getCurrentContextForNoInOperator();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
367	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNonEmptyContext();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNonEmptyContext();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNonEmptyContext();	  Context    cc    =    getCurrentContextForNoInOperator();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
368	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);	  addExpr(last,    p    +    1,    context);    int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	59	None	replace
369	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(     ":     ",  true);  cc.addOp( ":   ",  true);  cc.addOp( ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       ":       ",        true);        cc.addOp(       ":       ",    true);    cc.addOp( ":   ",  true);  cc.addOp( ":   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	102	5	add
370	[BUG]  [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(     ":     ",  true);  cc.addOp( ":   ",  true);  cc.addOp( ":   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(     ":     ",  true);  cc.addOp( ":   ",  true);  cc.addOp( ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       ":       ",        true);        cc.addOp(       ":       ",    true);    cc.addOp( ":   ",  true);  cc.addOp( ":   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	102	5	add
371	[BUG]  [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(     ":     ",  true);  cc.addOp( ",  true);  cc.addOp( ":   ",  true);  [CE]  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(     ":     ",  true);  cc.addOp( ",  true);  cc.addOp( ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       ":       ",        true);        cc.addOp(       ":       ",    true);    cc.addOp( ",  true);  cc.addOp( ":   ",  true);	  	non-compiled	[CE]  	102	None	add
372	[BUG]  [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(     ":     ",  true);  cc.addOp( ": ".,  true);  cc.addOp( ": ".,  true);  [CE]  <identifier>  expected  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(     ":     ",  true);  cc.addOp( ": ".,  true);  cc.addOp( ": ".,  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       ":       ",        true);        cc.addOp(       ":       ",    true);    cc.addOp( ": ".,  true);  cc.addOp( ": ".,  true);	  	non-compiled	[CE]  <identifier>  expected	102	None	add
373	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  ==  4);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount    ==    4);    Preconditions.checkState(childCount  ==  4);	  	compilable	  [FE]  IllegalStateException  	52	5	add
374	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  ==  4);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Preconditions.checkState(childCount  ==  4);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    4);    Preconditions.checkState(childCount  ==  4);	  	compilable	  [FE]  IllegalStateException  	52	5	add
375	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  4);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  4);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    4);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  4);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	52	None	add
376	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  4);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  4);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  4);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    4);    int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  4);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	52	None	add
377	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  4);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    4);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	52	None	add
378	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    4);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	52	None	add
379	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    4);    Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	52	None	add
380	[BUG]  [BUGGY]  cc.addOp( ": ",  p);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ": ",  p);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ": ",  p);	  cc.addOp(   ":   ");    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	56	None	replace
381	[BUG]  [BUGGY]  cc.addOp(first,   ": ");  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(first,   ": ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(first,   ": ");	  cc.addOp(   ":   ");    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	56	None	replace
382	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(n,  context);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext(n,  context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(n,  context);	  Context    cc    =    getCurrentContext(n);    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
383	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(last);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext(last);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(last);	  Context    cc    =    getCurrentContext(n);    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
384	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context,  n);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext(context,  n);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(context,  n);	  Context    cc    =    getCurrentContext(n);    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
385	[BUG]  [BUGGY]  cc.addOp( ",  false);  [CE]  unclosed  string  literal  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ",  false);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ",  false);	  cc.addOp(   ",    true);    	non-compiled	[CE]  unclosed  string  literal	85	None	replace
386	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	141	None	add
387	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	141	None	add
388	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	141	None	add
389	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	141	None	add
390	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  a:3  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  a:3  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  a:3	  	non-compiled	[CE]  not  a  statement	141	None	add
391	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
392	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
393	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  2);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  2);	  Integer    p    =    NodeUtil.precedence(type,    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	44	None	replace
394	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  1L);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  1L);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  1L);	  Integer    p    =    NodeUtil.precedence(type,    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	44	None	replace
395	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  3);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  3);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  3);	  Integer    p    =    NodeUtil.precedence(type,    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	44	None	replace
396	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  1  +  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  1  +  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  1  +  1);	  Integer    p    =    NodeUtil.precedence(type,    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	44	None	replace
397	[BUG]  [BUGGY]  add(last,  p  +  1,  rhsContext,  context);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Context)  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(last,  p  +  1,  rhsContext,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(last,  p  +  1,  rhsContext,  context);	  add(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Context)	175	None	replace
398	[BUG]  [BUGGY]  add(last,  p  +  1,  rhsContext,  type);  [CE]  no  suitable  method  found  for  add(Node,int,Context,int)  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(last,  p  +  1,  rhsContext,  type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(last,  p  +  1,  rhsContext,  type);	  add(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,int)	175	None	replace
399	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  n.addOp( ",?   ",  true);  [CE]  cannot  find  symbol  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  true);  n.addOp( ",?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  true);  n.addOp( ",?   ",  true);	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
400	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( "?   ",  false);  cc.addOp( ",?   ",  false);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp( "?   ",  false);  cc.addOp( ",?   ",  false);	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
401	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  cc.addOp( ",?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( "?   ",  false);  cc.addOp( ",?   ",  false);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( "?   ",  false);  cc.addOp( ",?   ",  false);	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
402	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ",?   ",  true);  [CE]  cannot  find  symbol  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ",?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  false);  n.addOp( ",?   ",  true);	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
403	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	74	5	add
404	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	74	5	add
405	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	74	5	add
406	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	74	5	add
407	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	74	5	add
408	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	74	5	add
409	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	74	5	add
410	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	74	5	add
411	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	74	None	add
412	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	74	5	add
413	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	74	5	add
414	[BUG]  [BUGGY]  Integer  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);	          Preconditions.checkState(childCount    ==    1);    int    childCount    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	29	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]              IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);	          Preconditions.checkState(childCount    ==    1);    int    childCount    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	29	None	replace
416	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                cc.addOp(       "?       ",        true);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	94	5	add
417	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	94	5	add
418	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( ",  true);  cc.addOp( "?   ",  true);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   "?       ",    true);    cc.addOp( ",  true);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  unclosed  string  literal	94	None	add
419	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                cc.addOp(       "?       ",        true);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  false);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	94	5	add
420	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  false);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	94	5	add
421	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount),  Context.OTHER;  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount),  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(childCount),  Context.OTHER;	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  ';'  expected	35	None	replace
422	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  rhsContext.OTHER;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  rhsContext.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  rhsContext.OTHER;	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  ';'  expected	35	None	replace
423	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  +  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  +  1;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  +  1;	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  ';'  expected	35	None	replace
424	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  |  Context.OTHER;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  |  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  |  Context.OTHER;	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  ';'  expected	35	None	replace
425	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( "?   ",  true);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	48	5	replace
426	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( "?   ",  true);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	48	5	replace
427	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  firstCount  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Integer  firstCount  =  NodeUtil.precedence(type);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	48	5	replace
428	[BUG]  [BUGGY]  Integer  firstCount  =  NodeUtil.precedence(type);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  firstCount  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  firstCount  =  NodeUtil.precedence(type);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	48	5	replace
429	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext);  cc.addOp( "?   ",  true);  [CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  rhsContext);  cc.addOp( "?   ",  true);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;	48	None	replace
430	[BUG]  [BUGGY]  Context.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
431	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	176	5	add
432	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	176	5	add
433	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	176	5	add
434	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	176	5	add
435	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( ": ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	176	5	add
436	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( ": ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( ": ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( ": ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	176	5	add
437	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  rhsContext);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Context.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  IllegalStateException  	71	5	replace
438	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]            IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  rhsContext);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Context.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  IllegalStateException  	71	5	replace
439	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    Context    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	117	None	replace
440	[BUG]  [BUGGY]  Context  rhsContext  =  Context.OTHER;  [CE]  variable  rhsContext  is  already  defined  in  method  add(Node,Context)  [FE]                IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  rhsContext  =  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  rhsContext  =  Context.OTHER;	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    Context    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  variable  rhsContext  is  already  defined  in  method  add(Node,Context)	117	None	replace
441	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                  IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    Context    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	117	None	replace
442	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                    IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    Context    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	117	None	replace
443	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	127	5	add
444	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	127	5	add
445	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	127	5	add
446	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	127	5	add
447	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);	  	non-compiled	[CE]  not  a  statement	127	None	add
448	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	127	None	add
449	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  1  >=  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  1  >=  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  1  >=  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);	  	non-compiled	[CE]  not  a  statement	127	None	add
450	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(last,  NodeUtil.precedence(type),  Context.OTHER);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(last,  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(last,  NodeUtil.precedence(type),  Context.OTHER);	  	non-compiled	[CE]  not  a  statement	127	None	add
451	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  cc.addOp( "?   ",  false);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    false);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	82	5	add
452	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  cc.addOp( "?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  cc.addOp( "?   ",  false);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    false);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	82	5	add
453	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  cc.addOp( ".?   ",  false);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    false);    cc.addOp( ".?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	82	5	add
454	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  cc.addOp( ".?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  cc.addOp( ".?   ",  false);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    false);    cc.addOp( ".?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	82	5	add
455	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    false);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	82	5	add
456	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    false);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	82	5	add
457	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  cc.addOp( ",  false);  [CE]  unclosed  string  literal  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  cc.addOp( ",  false);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    false);    cc.addOp( ",  false);	  	non-compiled	[CE]  unclosed  string  literal	82	None	add
458	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);	          Preconditions.checkState(childCount    ==    3);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	13	None	replace
459	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	88	5	add
460	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	88	5	add
461	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	88	5	add
462	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	88	5	add
463	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	88	5	add
464	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	88	5	add
465	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	88	5	add
466	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	88	5	add
467	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ",  false);  addExpr(first,  p  +  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ",  false);  addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	88	None	add
468	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	6	5	replace
469	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	6	5	replace
470	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  n);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  n);	  addExpr(first,    p    +    1,    n);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	25	None	replace
471	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  n,  context);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  n,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  n,  context);	  addExpr(first,    p    +    1,    n);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	25	None	replace
472	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext.next);  [CE]  cannot  find  symbol  next  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext.next);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext.next);	  addExpr(first,    p    +    1,    n);    	non-compiled	[CE]  cannot  find  symbol  next	25	None	replace
473	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  int  firstCount  =  NodeUtil.precedence(type  -  1);  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  int  firstCount  =  NodeUtil.precedence(type  -  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(type    -    1);    int  firstCount  =  NodeUtil.precedence(type  -  1);	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	37	None	add
474	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  int  secondCount  =  NodeUtil.precedence(type  -  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int    firstCount    =    NodeUtil.precedence(type    -    1);    int  secondCount  =  NodeUtil.precedence(type  -  1);	  	compilable	  [FE]  ComparisonFailure  	37	1	add
475	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  int  secondCount  =  NodeUtil.precedence(type  -  1);  [FE]  ComparisonFailure  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  int  secondCount  =  NodeUtil.precedence(type  -  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(type    -    1);    int  secondCount  =  NodeUtil.precedence(type  -  1);	  	compilable	  [FE]  ComparisonFailure  	37	1	add
476	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  Integer  firstCount  =  NodeUtil.precedence(type  -  1);  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  Integer  firstCount  =  NodeUtil.precedence(type  -  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(type    -    1);    Integer  firstCount  =  NodeUtil.precedence(type  -  1);	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	37	None	add
477	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  int  firstCount  =  NodeUtil.precedence(type  -  1);  break;  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  int  firstCount  =  NodeUtil.precedence(type  -  1);  break;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(type    -    1);    int  firstCount  =  NodeUtil.precedence(type  -  1);  break;	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	37	None	add
478	[BUG]  [BUGGY]  Context.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);	          Preconditions.checkState(childCount    ==    3);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
479	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
480	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
481	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
482	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
483	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
484	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
485	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    int  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	1	None	add
486	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	1	None	add
487	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
488	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
489	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  first);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  first);	  addExpr(first,    p    +    1,    rhsContext,    context);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	169	None	replace
490	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  type);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  type);	  addExpr(first,    p    +    1,    rhsContext,    context);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	169	None	replace
491	[BUG]  [BUGGY]  addExpr(first,  p,  rhsContext,  type  +  1);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p,  rhsContext,  type  +  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p,  rhsContext,  type  +  1);	  addExpr(first,    p,    rhsContext    +    1);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	21	None	replace
492	[BUG]  [BUGGY]  addExpr(first,  p,  rhsContext,  1);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p,  rhsContext,  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p,  rhsContext,  1);	  addExpr(first,    p,    rhsContext    +    1);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	21	None	replace
493	[BUG]  [BUGGY]  addExpr(first,  p,  rhsContext  +  1,  context);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p,  rhsContext  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p,  rhsContext  +  1,  context);	  addExpr(first,    p,    rhsContext    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	21	None	replace
494	[BUG]  [BUGGY]  addExpr(last,  p,  rhsContext  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p,  rhsContext  +  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,  p,  rhsContext  +  1);	  addExpr(first,    p,    rhsContext    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	21	None	replace
495	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	63	5	add
496	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	63	5	add
497	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	63	None	add
498	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalStateException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  not  a  statement	63	None	add
499	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	63	None	add
500	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	63	5	add
501	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	63	5	add
502	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	63	None	add
503	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type)-  1;  addExpr(first,  p  +  1,  rhsContext);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]        IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  childCount  =  NodeUtil.precedence(type)-  1;  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  childCount  =  NodeUtil.precedence(type)-  1;  addExpr(first,  p  +  1,  rhsContext);	  int    childCount    =    NodeUtil.precedence(type);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	156	None	replace
504	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  rhsContext);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  childCount  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  rhsContext);	  int    childCount    =    NodeUtil.precedence(type);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	156	None	replace
505	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type)+  1;  addExpr(first,  p  +  1,  rhsContext);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  childCount  =  NodeUtil.precedence(type)+  1;  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  childCount  =  NodeUtil.precedence(type)+  1;  addExpr(first,  p  +  1,  rhsContext);	  int    childCount    =    NodeUtil.precedence(type);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	156	None	replace
506	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	108	5	add
507	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	108	5	add
508	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	108	5	add
509	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	108	5	add
510	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Context.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Context.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Context.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  cannot  find  symbol	108	None	add
511	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	108	None	add
512	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	108	None	add
513	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]              IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    int  childCount  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	108	None	add
514	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	162	5	replace
515	[BUG]  [BUGGY]  if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	162	5	replace
516	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	162	5	replace
517	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	162	5	replace
518	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	162	5	replace
519	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	162	5	replace
520	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  n.addOp( "?   ",  true);  [CE]  cannot  find  symbol  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  true);  n.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  true);  n.addOp( "?   ",  true);	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
521	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  n.addOp( "?   ",  true);  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  false);  n.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  false);  n.addOp( "?   ",  true);	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
522	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ",?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                cc.addOp(       "?       ",        true);        cc.addOp(   ",?       ",    true);    cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	98	5	add
523	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ",?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ",?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   ",?       ",    true);    cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	98	5	add
524	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(n);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(n);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNoInOperator(n);	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
525	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  n);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  n);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context,  n);	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
526	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(rhsContext);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNoInOperator(rhsContext);	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
527	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  first);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  first);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context,  first);	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
528	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,    p    +    1,    rhsContext);    addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
529	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    rhsContext);    addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
530	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    rhsContext);    int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  rhsContext);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	23	None	add
531	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
532	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
533	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    rhsContext);    int  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	23	None	add
534	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
535	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
536	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  cc.addOp(first,  p  +  1,  rhsContext);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  cc.addOp(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    rhsContext);    cc.addOp(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	23	None	add
537	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  first);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,  p  +  1,  first);	  addExpr(last,    p    +    1);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	146	None	replace
538	[BUG]  [BUGGY]  Node  first  =  p.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Node  first  =  p.getFirstChild();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  p.getFirstChild();	  Node    first    =    rhsContext.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	19	None	replace
539	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  false);  cc.addOp(   ":   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   ":   ",    false);    cc.addOp(   ":   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	120	5	add
540	[BUG]  [BUGGY]  cc.addOp(   ":   ",  false);  cc.addOp(   ":   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  false);  cc.addOp(   ":   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    false);    cc.addOp(   ":   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	120	5	add
541	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  false);  cc.addOp( ".:   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   ":   ",    false);    cc.addOp( ".:   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	120	5	add
542	[BUG]  [BUGGY]  cc.addOp(   ":   ",  false);  cc.addOp( ".:   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  false);  cc.addOp( ".:   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    false);    cc.addOp( ".:   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	120	5	add
543	[BUG]  [BUGGY]  cc.addOp(   ":   ",  false);  cc.addOp(':',  false);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  false);  cc.addOp(':',  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    false);    cc.addOp(':',  false);	  	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	120	None	add
544	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  false);  cc.addOp(   ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   ":   ",    false);    cc.addOp(   ":   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	120	5	add
545	[BUG]  [BUGGY]  cc.addOp(   ":   ",  false);  cc.addOp(   ":   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  false);  cc.addOp(   ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    false);    cc.addOp(   ":   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	120	5	add
546	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  p);  [CE]  no  suitable  method  found  for  add(Node,int,Context,int)  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  p);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  p);	  add(first,    p    +    1,    rhsContext,    first);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,int)	124	None	replace
547	[BUG]  [BUGGY]  n.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [CE]  cannot  find  symbol  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
548	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
549	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
550	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
551	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
552	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
553	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
554	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
555	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
556	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
557	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
558	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
559	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
560	[BUG]  [BUGGY]  addExpr(first.getNext(),  p  +  1,  rhsContext.next());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first.getNext(),  p  +  1,  rhsContext.next());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first.getNext(),  p  +  1,  rhsContext.next());	  addExpr(first,    p    +    1,    rhsContext.next());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
561	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext.next());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext.next());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,  p  +  1,  rhsContext.next());	  addExpr(first,    p    +    1,    rhsContext.next());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
562	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(),  rhsContext.getCurrentContext();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext(),  rhsContext.getCurrentContext();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(),  rhsContext.getCurrentContext();	  Context    cc    =    getCurrentContext().getCurrentContext();    	non-compiled	[CE]  ';'  expected	39	None	replace
563	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(),  context.getCurrentContext();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext(),  context.getCurrentContext();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(),  context.getCurrentContext();	  Context    cc    =    getCurrentContext().getCurrentContext();    	non-compiled	[CE]  ';'  expected	39	None	replace
564	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().cloneTree();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext().cloneTree();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext().cloneTree();	  Context    cc    =    getCurrentContext().getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
565	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
566	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
567	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
568	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
569	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
570	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
571	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  IllegalArgumentException  	177	5	replace
572	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  IllegalArgumentException  	177	5	replace
573	[BUG]  [BUGGY]  Context.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
574	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  addExpr(first,  1,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int  firstCount  =  NodeUtil.precedence(type);  addExpr(first,  1,  rhsContext);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	51	3	replace
575	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  addExpr(first,  1,  rhsContext);  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  addExpr(first,  1,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type);  addExpr(first,  1,  rhsContext);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	51	3	replace
576	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  addExpr(last,  1,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int  firstCount  =  NodeUtil.precedence(type);  addExpr(last,  1,  rhsContext);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	51	5	replace
577	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  addExpr(last,  1,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type);  addExpr(last,  1,  rhsContext);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	51	5	replace
578	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	158	5	replace
579	[BUG]  [BUGGY]  if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	158	5	replace
580	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	158	5	replace
581	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	158	5	replace
582	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER,  childCount);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER,  childCount);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  Context.OTHER,  childCount);	  int    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	138	None	replace
583	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER  +  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER  +  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  Context.OTHER  +  1);	  int    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	138	None	replace
584	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER,  first);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER,  first);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  Context.OTHER,  first);	  int    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	138	None	replace
585	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.HOOK);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.HOOK);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  Context.HOOK);	  int    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	138	None	replace
586	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  p);  [CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  p);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  p);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;	46	None	replace
587	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  childCount);  [CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  childCount);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  childCount);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;	46	None	replace
588	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  parent);  [CE]  cannot  find  symbol  parent  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  parent);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  parent);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  cannot  find  symbol  parent	46	None	replace
589	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);	  	non-compiled	[CE]  not  a  statement	132	None	add
590	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	132	5	add
591	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	132	5	add
592	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	132	5	add
593	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	132	5	add
594	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	132	None	add
595	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(last,  NodeUtil.precedence(type),  Context.OTHER);  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(last,  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(last,  NodeUtil.precedence(type),  Context.OTHER);	  	non-compiled	[CE]  not  a  statement	132	None	add
596	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	132	None	add
597	[BUG]  [BUGGY]  Integer  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	50	None	replace
598	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type,  rhsContext  =  Context.OTHER;  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type,  rhsContext  =  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type,  rhsContext  =  Context.OTHER;	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  ')'  expected	50	None	replace
599	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    rhsContext    =    Context.OTHER;    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	50	5	replace
600	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    rhsContext    =    Context.OTHER;    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	50	5	replace
601	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  context);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  context);	  Integer    p    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	43	None	replace
602	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  n);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  n);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  n);	  Integer    p    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	43	None	replace
603	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ".?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                cc.addOp(       "?       ",        true);        cc.addOp(   ".?       ",    true);    cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	96	5	add
604	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ".?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ".?     ",  true);  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   ".?       ",    true);    cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	96	5	add
605	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                  IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER);	          Preconditions.checkState(childCount    ==    1);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	32	None	replace
606	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                    IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type,  rhsContext);	          Preconditions.checkState(childCount    ==    1);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	32	None	replace
607	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  int  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  1);  int  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  1);  int  p  =  NodeUtil.precedence(type);	  addExpr(first,    p    +    1,    rhsContext);    int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	4	None	replace
608	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	p  =  NodeUtil.precedence(type);	  addExpr(first,    p    +    1,    rhsContext);    int    p    =    NodeUtil.precedence(type);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	4	5	replace
609	[BUG]  [BUGGY]  p  =  NodeUtil.precedence(type);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	p  =  NodeUtil.precedence(type);	  addExpr(first,    p    +    1,    rhsContext);    int    p    =    NodeUtil.precedence(type);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	4	5	replace
610	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  1);  Node  first  =  n.getLastChild();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  1);  Node  first  =  n.getLastChild();	  Preconditions.checkState(childCount    ==    1);    Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	20	None	replace
611	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  Node  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  Node  first  =  n.getFirstChild();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  2);  Node  first  =  n.getFirstChild();	  Preconditions.checkState(childCount    ==    1);    Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	20	None	replace
612	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  Node  first  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context.checkState(childCount  ==  1);  Node  first  =  n.getFirstChild();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context.checkState(childCount  ==  1);  Node  first  =  n.getFirstChild();	  Preconditions.checkState(childCount    ==    1);    Node    first    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
613	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	113	5	add
614	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	113	5	add
615	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Context.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  cannot  find  symbol	113	None	add
616	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	113	None	add
617	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	113	None	add
618	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  null,  context);  [CE]  no  suitable  method  found  for  add(Node,int,Context,<null>,Context)  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  null,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  null,  context);	  add(first,    p    +    1,    rhsContext,    null);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,<null>,Context)	151	None	replace
619	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  context,  null);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Context,<null>)  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  context,  null);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  context,  null);	  add(first,    p    +    1,    rhsContext,    null);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Context,<null>)	151	None	replace
620	[BUG]  [BUGGY]  add(first,  p  +  1,  n,  rhsContext,  null);  [CE]  no  suitable  method  found  for  add(Node,int,Node,Context,<null>)  [FE]                        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  n,  rhsContext,  null);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  n,  rhsContext,  null);	  add(first,    p    +    1,    rhsContext,    null);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Node,Context,<null>)	151	None	replace
621	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	172	5	add
622	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	172	5	add
623	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	172	5	add
624	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	172	5	add
625	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	172	5	add
626	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	172	5	add
627	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	172	None	add
628	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	172	5	add
629	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	172	5	add
630	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	172	None	add
631	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type,  rhsContext);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type,  rhsContext);	          Preconditions.checkState(childCount    ==    3);    int    childCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	15	None	replace
632	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext.getFirstChild());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext.getFirstChild());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext.getFirstChild());	  addExpr(first,    p    +    1,    rhsContext.getType());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
633	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext.getType(),  context);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext.getType(),  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext.getType(),  context);	  addExpr(first,    p    +    1,    rhsContext.getType());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
634	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  addExpr(firstCount,  1,  rhsContext);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  addExpr(firstCount,  1,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type);  addExpr(firstCount,  1,  rhsContext);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    addExpr(firstCount,    1,    rhsContext);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	47	None	replace
635	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext);  addExpr(firstCount,  1,  rhsContext);  [CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext);  addExpr(firstCount,  1,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  rhsContext);  addExpr(firstCount,  1,  rhsContext);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    addExpr(firstCount,    1,    rhsContext);    	non-compiled	[CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;	47	None	replace
636	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	67	5	add
637	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	67	5	add
638	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	67	5	add
639	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	67	5	add
640	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	67	5	add
641	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	67	5	add
642	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	67	5	add
643	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	67	5	add
644	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	67	None	add
645	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  IllegalStateException  	67	5	add
646	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  IllegalStateException  	67	5	add
647	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	160	5	replace
648	[BUG]  [BUGGY]  if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  <  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	160	5	replace
649	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	160	5	replace
650	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	160	5	replace
651	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	160	None	replace
652	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  type,  context);  [CE]  no  suitable  method  found  for  add(Node,int,Context,int,Context)  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  type,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  type,  context);	  add(first,    p    +    1,    rhsContext,    type);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,int,Context)	125	None	replace
653	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  type,  first);  [CE]  no  suitable  method  found  for  add(Node,int,Context,int,Node)  [FE]                        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  type,  first);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  type,  first);	  add(first,    p    +    1,    rhsContext,    type);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,int,Node)	125	None	replace
654	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  first,  type);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Node,int)  [FE]                          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  first,  type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  first,  type);	  add(first,    p    +    1,    rhsContext,    type);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Node,int)	125	None	replace
655	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	129	5	add
656	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	129	5	add
657	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);	  	non-compiled	[CE]  not  a  statement	129	None	add
658	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	129	5	add
659	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	129	5	add
660	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	129	None	add
661	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	129	5	add
662	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	129	5	add
663	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  1  >=  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [CE]  not  a  statement  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  1  >=  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  1  >=  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);	  	non-compiled	[CE]  not  a  statement	129	None	add
664	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( ":   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( ":   ",  true);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    cc.addOp(   ":   ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	49	5	replace
665	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( ":   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( ":   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( ":   ",  true);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    cc.addOp(   ":   ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	49	5	replace
666	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(childCount  +  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(childCount  +  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(childCount  +  1);	  Integer    p    =    NodeUtil.precedence(type    +    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	134	None	replace
667	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance(parent);  [CE]  cannot  find  symbol  parent  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextInstance(parent);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextInstance(parent);	  Context    cc    =    getCurrentContextInstance();    	non-compiled	[CE]  cannot  find  symbol  parent	41	None	replace
668	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstanceUTC();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextInstanceUTC();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextInstanceUTC();	  Context    cc    =    getCurrentContextInstance();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
669	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForOperator();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForOperator();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForOperator();	  Context    cc    =    getCurrentContextForNoInOperator();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
670	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	113	5	add
671	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	113	5	add
672	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	113	None	add
673	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  0);	          Preconditions.checkState(childCount    ==    1);    int    childCount    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	29	None	replace
674	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext,  false);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext,  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,  p  +  1,  rhsContext,  false);	  addExpr(first,    p    +    1,    rhsContext,    false);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	170	None	replace
675	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type  -  1);  addExpr(first,  p  +  1,  rhsContext);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]        IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  childCount  =  NodeUtil.precedence(type  -  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  childCount  =  NodeUtil.precedence(type  -  1);  addExpr(first,  p  +  1,  rhsContext);	  int    childCount    =    NodeUtil.precedence(type);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	156	None	replace
676	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected;  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected;	  	non-compiled	[CE]  not  a  statement	63	None	add
677	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	63	None	add
678	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	63	5	add
679	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	63	5	add
680	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	63	None	add
681	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	111	5	add
682	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	111	5	add
683	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ",?     ",  true);  cc.addOp( ".?   ",  true);  cc.addOp( ",?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                cc.addOp(       "?       ",        true);        cc.addOp(   ",?       ",    true);    cc.addOp( ".?   ",  true);  cc.addOp( ",?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	98	5	add
684	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ",?     ",  true);  cc.addOp( ".?   ",  true);  cc.addOp( ",?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ",?     ",  true);  cc.addOp( ".?   ",  true);  cc.addOp( ",?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   ",?       ",    true);    cc.addOp( ".?   ",  true);  cc.addOp( ",?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	98	5	add
685	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	73	None	replace
686	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  0);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  0);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  0);	  Integer    p    =    NodeUtil.precedence(type,    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	44	None	replace
687	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  4);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  4);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  4);	  Integer    p    =    NodeUtil.precedence(type,    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	44	None	replace
688	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	139	None	add
689	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	158	5	replace
690	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	158	5	replace
691	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	158	5	replace
692	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	158	5	replace
693	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	158	5	replace
694	[BUG]  [BUGGY]  if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	158	5	replace
695	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalStateException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
696	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalStateException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
697	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  return;  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
698	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  return;  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  return;  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
699	[BUG]  [BUGGY]  add(first,  p  +  1,  last,  rhsContext);  [CE]  no  suitable  method  found  for  add(Node,int,Node,Context)  [FE]                        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  last,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  last,  rhsContext);	  add(first,    p    +    1,    rhsContext,    last);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Node,Context)	126	None	replace
700	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type)-  Context.OTHER;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type)-  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type)-  Context.OTHER;	  int    p    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	77	None	replace
701	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER)+  1;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER)+  1;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  Context.OTHER)+  1;	  int    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	138	None	replace
702	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
703	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
704	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
705	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
706	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	163	None	add
707	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	163	None	add
708	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected;  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected;	  	non-compiled	[CE]  not  a  statement	163	None	add
709	[BUG]  [BUGGY]  n.addChildToFront(context);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addChildToFront(context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addChildToFront(context);	  addExpr(last,    p    +    1,    context);    addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	58	None	replace
710	[BUG]  [BUGGY]  n.addChildToBack(context);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addChildToBack(context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addChildToBack(context);	  addExpr(last,    p    +    1,    context);    addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	58	None	replace
711	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  context.getType());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  context.getType());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  context.getType());	  addExpr(first,    p    +    1,    rhsContext.getType());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
712	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	162	5	replace
713	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	162	5	replace
714	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	162	5	replace
715	[BUG]  [BUGGY]  if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	162	5	replace
716	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	97	5	replace
717	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	97	5	replace
718	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	97	5	replace
719	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	97	5	replace
720	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNode(context);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNode(context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNode(context);	  Context    cc    =    getCurrentContextForNode();    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
721	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForElement();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForElement();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForElement();	  Context    cc    =    getCurrentContextForNode();    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
722	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( ",  true);  addExpr(first,  p  +  1,  context);  }  [CE]  unclosed  string  literal  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    if(p  >  0)  {  cc.addOp( ",  true);  addExpr(first,  p  +  1,  context);  }	  	non-compiled	[CE]  unclosed  string  literal	157	None	add
723	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	9	5	add
724	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	9	5	add
725	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	172	5	add
726	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	172	5	add
727	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  outputCharsetEncoder);  [CE]  no  suitable  method  found  for  add(Node,int,Context,CharsetEncoder)  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  outputCharsetEncoder);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  outputCharsetEncoder);	  add(first,    p    +    1,    rhsContext,    type);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,CharsetEncoder)	125	None	replace
728	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getRootContext(context);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext().getRootContext(context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext().getRootContext(context);	  Context    cc    =    getCurrentContext().getRootContext();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
729	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	91	5	replace
730	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	91	5	replace
731	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  return;  }	  cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	91	5	replace
732	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  return;  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  return;  }	  cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	91	5	replace
733	[BUG]  [BUGGY]  add(last,  p  +  1,  rhsContext,  false);  [CE]  no  suitable  method  found  for  add(Node,int,Context,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(last,  p  +  1,  rhsContext,  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(last,  p  +  1,  rhsContext,  false);	  add(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,boolean)	175	None	replace
734	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".:   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".:   ",  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ".:       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	105	5	replace
735	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".:   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".:   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".:   ",  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ".:       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	105	5	replace
736	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".: ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".: ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ".:       ",    true);    	compilable	  [FE]  ComparisonFailure  	105	3	replace
737	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".: ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [FE]  ComparisonFailure  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".: ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".: ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ".:       ",    true);    	compilable	  [FE]  ComparisonFailure  	105	3	replace
738	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".:   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".:   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ".:       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	105	5	replace
739	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".:   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".:   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ".:   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ".:       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	105	5	replace
740	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	129	None	add
741	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	129	None	add
742	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	129	None	add
743	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [CE]  not  a  statement  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  {  a:1  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  {  a:1  }	  	non-compiled	[CE]  not  a  statement	129	None	add
744	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  add(first,  0,  rhsContext);  [CE]  no  suitable  method  found  for  add(Node,int,Context)  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  add(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    0,    rhsContext);    add(first,  0,  rhsContext);	  	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context)	135	None	add
745	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,    0,    rhsContext);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	135	5	add
746	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    0,    rhsContext);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	135	5	add
747	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]        ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,    0,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	135	5	add
748	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]        ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    0,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	135	5	add
749	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,    0,    rhsContext);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	135	5	add
750	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [FE]  IllegalStateException  [FE]          ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    0,    rhsContext);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	135	5	add
751	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  ComparisonFailure  	103	3	replace
752	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [FE]  ComparisonFailure  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  ComparisonFailure  	103	3	replace
753	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
754	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
755	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
756	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
757	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?{a:1}:{a:3  	103	5	replace
758	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?{a:1}:{a:3  	103	5	replace
759	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	67	5	add
760	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	67	5	add
761	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
762	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
763	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
764	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
765	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
766	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
767	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
768	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
769	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  0,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
770	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  0,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  0,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  0,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
771	[BUG]  [BUGGY]  cc.addOp('?',  true);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp('?',  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp('?',  true);	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	100	None	replace
772	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	100	None	replace
773	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	100	None	replace
774	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]                    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	100	None	replace
775	[BUG]  [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]                      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(childCount  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	100	None	replace
776	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
777	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
778	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected;  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected;	  	non-compiled	[CE]  not  a  statement	141	None	add
779	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	141	None	add
780	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
781	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
782	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  [CE]  not  a  statement  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:	  	non-compiled	[CE]  not  a  statement	141	None	add
783	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  return;  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	87	5	replace
784	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  return;  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  return;  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	87	5	replace
785	[BUG]  [BUGGY]  add(first,  0,  rhsContext);  [CE]  no  suitable  method  found  for  add(Node,int,Context)  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  0,  rhsContext);	  addExpr(first,    0,    rhsContext);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context)	136	None	replace
786	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  Node  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  Node  first  =  n.getFirstChild();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  3);  Node  first  =  n.getFirstChild();	  Preconditions.checkState(childCount    ==    1);    Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	20	None	replace
787	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(n))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
788	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(first))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
789	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(p))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
790	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
791	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
792	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
793	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
794	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  -  1;  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  -  1;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  -  1;	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  ';'  expected	35	None	replace
795	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	160	5	replace
796	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	160	5	replace
797	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	160	5	replace
798	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	160	5	replace
799	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	160	5	replace
800	[BUG]  [BUGGY]  if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >=  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	160	5	replace
801	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ",    true);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	131	None	replace
802	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(first))  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ",    true);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
803	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ",    true);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	131	None	replace
804	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  [CE]  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(first))  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ",    true);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  	131	None	replace
805	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext(rhsContext);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext(rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext().getCurrentContext(rhsContext);	  Context    cc    =    getCurrentContext().getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
806	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext(context);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext(context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext().getCurrentContext(context);	  Context    cc    =    getCurrentContext().getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
807	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  context.getNext());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  context.getNext());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  context.getNext());	  addExpr(first,    p    +    1,    rhsContext.getParent());    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
808	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	144	5	replace
809	[BUG]  [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	144	5	replace
810	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	144	5	replace
811	[BUG]  [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	144	5	replace
812	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  IllegalArgumentException  	144	5	replace
813	[BUG]  [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  IllegalArgumentException  	144	5	replace
814	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	143	5	add
815	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	143	5	add
816	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
817	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
818	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  context.next());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  context.next());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  context.next());	  addExpr(first,    p    +    1,    rhsContext.next());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
819	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  first.next());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  first.next());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  first.next());	  addExpr(first,    p    +    1,    rhsContext.next());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
820	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[x]?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	176	None	add
821	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context,  rhsContext);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext(context,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(context,  rhsContext);	  Context    cc    =    getCurrentContext(context);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
822	[BUG]  [BUGGY]  addExpr(last,  1,  rhsContext  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  1,  rhsContext  +  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,  1,  rhsContext  +  1);	  addExpr(last,    p    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	146	None	replace
823	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
824	[BUG]  [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }  [FE]  ComparisonFailure  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
825	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  IllegalStateException  	64	5	replace
826	[BUG]  [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  context);  }  [FE]  IllegalStateException  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  IllegalStateException  	64	5	replace
827	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  Context.OTHER);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  Context.OTHER);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  ComparisonFailure  	64	2	replace
828	[BUG]  [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  Context.OTHER);  }  [FE]  ComparisonFailure  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  Context.OTHER);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  Context.OTHER);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  ComparisonFailure  	64	2	replace
829	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
830	[BUG]  [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  context);  }  [FE]  ComparisonFailure  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
831	[BUG]  [BUGGY]  cc.addOp(   ":   ",  false);  cc.addOp(   ": ".,  false);  [CE]  <identifier>  expected  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  false);  cc.addOp(   ": ".,  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    false);    cc.addOp(   ": ".,  false);	  	non-compiled	[CE]  <identifier>  expected	120	None	add
832	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	7	5	add
833	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	7	5	add
834	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  [CE]  cannot  find  symbol  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  false);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
835	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  n.addOp( "?   ",  false);  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  false);  n.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  false);  n.addOp( "?   ",  false);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
836	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  [CE]  cannot  find  symbol  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
837	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                Preconditions.checkState(childCount        ==        1);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	26	5	add
838	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        1);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	26	5	add
839	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        1);        Preconditions.checkState(childCount    ==    1);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	26	None	add
840	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                Preconditions.checkState(childCount        ==        1);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	26	5	add
841	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  1);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        1);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	26	5	add
842	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        1);        Preconditions.checkState(childCount    ==    1);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	26	None	add
843	[BUG]  [BUGGY]  Context  cc  =  getCurrentStatementContext(context);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentStatementContext(context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentStatementContext(context);	  Context    cc    =    getCurrentStatementContext();    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
844	[BUG]  [BUGGY]  Context  cc  =  getCurrentStatementContext(parent);  [CE]  cannot  find  symbol  parent  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentStatementContext(parent);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentStatementContext(parent);	  Context    cc    =    getCurrentStatementContext();    	non-compiled	[CE]  cannot  find  symbol  parent	153	None	replace
845	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type  -  1);  int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	50	None	replace
846	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
847	[BUG]  [BUGGY]  if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  ComparisonFailure  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
848	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	2	5	replace
849	[BUG]  [BUGGY]  if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	2	5	replace
850	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  IllegalStateException  	2	5	replace
851	[BUG]  [BUGGY]  if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  IllegalStateException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  IllegalStateException  	2	5	replace
852	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
853	[BUG]  [BUGGY]  if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  ComparisonFailure  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(childCount  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
854	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	95	5	replace
855	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	95	5	replace
856	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	95	5	replace
857	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	95	5	replace
858	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	95	5	replace
859	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	95	5	replace
860	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  ComparisonFailure  	95	3	replace
861	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [FE]  ComparisonFailure  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  ComparisonFailure  	95	3	replace
862	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);	  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	142	5	replace
863	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);	  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	142	5	replace
864	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);	  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	142	5	replace
865	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);	  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	142	5	replace
866	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(first))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
867	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(n))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
868	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(p))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
869	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  [CE]  orphaned  case  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(first))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(first))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	6	None	replace
870	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
871	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
872	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
873	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
874	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	69	5	add
875	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	69	5	add
876	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ":   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	90	5	add
877	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ":   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	90	5	add
878	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
879	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
880	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	86	5	add
881	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	86	5	add
882	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  IllegalStateException  	74	5	add
883	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    2);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  IllegalStateException  	74	5	add
884	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
885	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
886	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  return;  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
887	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  return;  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  return;  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
888	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ":  true ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp( ":  true ",  true);	  cc.addOp(   ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	85	5	replace
889	[BUG]  [BUGGY]  cc.addOp( ":  true ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ":  true ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ":  true ",  true);	  cc.addOp(   ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	85	5	replace
890	[BUG]  [BUGGY]  addExpr(firstCount,  1,  rhsContext);  [CE]  cannot  find  symbol  firstCount  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(firstCount,  1,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(firstCount,  1,  rhsContext);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    addExpr(firstCount,    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol  firstCount	47	None	replace
891	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(parent);  [CE]  cannot  find  symbol  parent  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext(parent);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(parent);	  Context    cc    =    getCurrentContext(n);    	non-compiled	[CE]  cannot  find  symbol  parent	154	None	replace
892	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ":   ".,  true);  }  [CE]  <identifier>  expected  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ":   ".,  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ":   ".,  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":   ".,    true);    	non-compiled	[CE]  <identifier>  expected	145	None	replace
893	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  addExpr(first,  0,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int  firstCount  =  NodeUtil.precedence(type);  addExpr(first,  0,  rhsContext);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	51	3	replace
894	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  addExpr(first,  0,  rhsContext);  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  addExpr(first,  0,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type);  addExpr(first,  0,  rhsContext);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	51	3	replace
895	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  int  childCount  =  NodeUtil.precedence(childCount);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  int  childCount  =  NodeUtil.precedence(childCount);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(childCount);    int  childCount  =  NodeUtil.precedence(childCount);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	33	None	add
896	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  Integer  firstCount  =  NodeUtil.precedence(childCount);  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  Integer  firstCount  =  NodeUtil.precedence(childCount);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(childCount);    Integer  firstCount  =  NodeUtil.precedence(childCount);	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	33	None	add
897	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  Context.OTHER);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  Context.OTHER);	  addExpr(first,    p    +    1,    rhsContext,    context);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	169	None	replace
898	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  add(first,  p  +  1,  rhsContext);  [CE]  no  suitable  method  found  for  add(Node,int,Context)  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  add(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    add(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context)	1	None	add
899	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
900	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
901	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
902	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
903	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
904	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	1	5	add
905	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  IN_FOR_INIT_ELSE);  [CE]  cannot  find  symbol  IN_FOR_INIT_ELSE  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  IN_FOR_INIT_ELSE);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  IN_FOR_INIT_ELSE);	  add(first,    p    +    1,    rhsContext,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  cannot  find  symbol  IN_FOR_INIT_ELSE	174	None	replace
906	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  REGEXP);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  REGEXP);	  add(first,    p    +    1,    rhsContext,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	174	None	replace
907	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  ComparisonFailure  	11	1	add
908	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  ComparisonFailure  	11	1	add
909	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]      ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	11	None	add
910	[BUG]  [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ".?   ",  false);  [CE]  cannot  find  symbol  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  n.addOp( "?   ",  false);  n.addOp( ".?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	n.addOp( "?   ",  false);  n.addOp( ".?   ",  false);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
911	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER  +  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER  +  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  Context.OTHER  +  1);	  Integer    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	171	None	replace
912	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  rhsContext.OTHER);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  rhsContext.OTHER);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  rhsContext.OTHER);	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER);    	non-compiled	[CE]  ';'  expected	167	None	replace
913	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  childCount;  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  childCount;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  childCount;	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER);    	non-compiled	[CE]  ';'  expected	167	None	replace
914	[BUG]  [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(     ":     ",  true);  cc.addOp( ":  true);  cc.addOp( ":   ",  true);  [CE]  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(     ":     ",  true);  cc.addOp( ":  true);  cc.addOp( ":   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       ":       ",        true);        cc.addOp(       ":       ",    true);    cc.addOp( ":  true);  cc.addOp( ":   ",  true);	  	non-compiled	[CE]  	102	None	add
915	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  Context.OTHER);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Context)  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  Context.OTHER);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  Context.OTHER);	  add(first,    p    +    1,    rhsContext,    null);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Context)	151	None	replace
916	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Integer  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Integer  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    4);    Integer  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	52	None	add
917	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  childCount);  [CE]  no  suitable  method  found  for  add(Node,int,Context,int)  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  childCount);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  childCount);	  add(first,    p    +    1,    rhsContext,    first);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,int)	124	None	replace
918	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  parent);  [CE]  cannot  find  symbol  parent  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  parent);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  parent);	  add(first,    p    +    1,    rhsContext,    first);    	non-compiled	[CE]  cannot  find  symbol  parent	124	None	replace
919	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ".?     ",  true);  cc.addOp( ".?   ",  true);  cc.addOp( ".?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                cc.addOp(       "?       ",        true);        cc.addOp(   ".?       ",    true);    cc.addOp( ".?   ",  true);  cc.addOp( ".?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	96	5	add
920	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ".?     ",  true);  cc.addOp( ".?   ",  true);  cc.addOp( ".?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   ".?     ",  true);  cc.addOp( ".?   ",  true);  cc.addOp( ".?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   ".?       ",    true);    cc.addOp( ".?   ",  true);  cc.addOp( ".?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	96	5	add
921	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER  |  1);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER  |  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type),  Context.OTHER  |  1);	  int    p    =    NodeUtil.precedence(type),    Context.OTHER);    	non-compiled	[CE]  ';'  expected	168	None	replace
922	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER,  context);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER,  context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type),  Context.OTHER,  context);	  int    p    =    NodeUtil.precedence(type),    Context.OTHER);    	non-compiled	[CE]  ';'  expected	168	None	replace
923	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  0);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount  ==  0);  addExpr(first,  p  +  1,  rhsContext);	  Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  IllegalStateException  	112	5	replace
924	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  0);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  0);  addExpr(first,  p  +  1,  rhsContext);	  Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  IllegalStateException  	112	5	replace
925	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Node  first  =  n.getFirstChild().getLastChild();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  n.getFirstChild().getLastChild();	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	137	None	replace
926	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  rhsContext);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context,  rhsContext);	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
927	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  1);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context,  1);	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
928	[BUG]  [BUGGY]  cc.addOp(':',  true);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(':',  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(':',  true);	  cc.addOp(       ":       ",    true);    cc.addOp(':',    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	106	None	replace
929	[BUG]  [BUGGY]  cc.addOp(first,  true);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(first,  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(first,  true);	  cc.addOp(       ":       ",    true);    cc.addOp(':',    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	106	None	replace
930	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  rhsContext  +  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  rhsContext  +  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  rhsContext  +  1);	  Integer    p    =    NodeUtil.precedence(type    +    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	134	None	replace
931	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type  +  2);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type  +  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type  +  2);	  Integer    p    =    NodeUtil.precedence(type    +    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	134	None	replace
932	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	132	5	add
933	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	132	5	add
934	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  return;  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  return;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  return;	  	non-compiled	[CE]  not  a  statement	132	None	add
935	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  a:3  [CE]  not  a  statement  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  a:3  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  a:3	  	non-compiled	[CE]  not  a  statement	132	None	add
936	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected:  <  var  foo=[]x?  {  a:1  }  :	  	non-compiled	[CE]  not  a  statement	127	None	add
937	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type)-  Context.OTHER;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type)-  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type)-  Context.OTHER;	  Integer    p    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	45	None	replace
938	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected;  [CE]  not  a  statement  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected;  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected;	  	non-compiled	[CE]  not  a  statement	57	None	add
939	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected  [CE]  not  a  statement  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  junit.framework.ComparisonFailure:  expected  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    junit.framework.ComparisonFailure:  expected	  	non-compiled	[CE]  not  a  statement	57	None	add
940	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(n,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  StackOverflowError  	54	5	add
941	[BUG]  [BUGGY]  addExpr(n,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(n,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  StackOverflowError  	54	5	add
942	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(n,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(n,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(n,  p  +  1,  context);	  	compilable	  [FE]  StackOverflowError  	54	5	add
943	[BUG]  [BUGGY]  addExpr(n,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(n,  p  +  1,  context);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(n,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(n,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(n,  p  +  1,  context);	  	compilable	  [FE]  StackOverflowError  	54	5	add
944	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	140	5	replace
945	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	140	5	replace
946	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	140	5	replace
947	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	140	5	replace
948	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  [CE]  orphaned  case  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  orphaned  case	140	None	replace
949	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  Preconditions.checkState(childCount  ==  3);  [CE]  orphaned  case  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  Preconditions.checkState(childCount  ==  3);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  orphaned  case	140	None	replace
950	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  Preconditions.checkState(childCount  ==  2);  [CE]  orphaned  case  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  Preconditions.checkState(childCount  ==  2);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  Preconditions.checkState(childCount  ==  2);	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  orphaned  case	140	None	replace
951	[BUG]  [BUGGY]  addExpr(first,  p,  rhsContext,  false);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p,  rhsContext,  false);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p,  rhsContext,  false);	  addExpr(first,    p,    rhsContext    +    1);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	21	None	replace
952	[BUG]  [BUGGY]  addExpr(first,  p,  rhsContext,  context  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p,  rhsContext,  context  +  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p,  rhsContext,  context  +  1);	  addExpr(first,    p,    rhsContext    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	21	None	replace
953	[BUG]  [BUGGY]  addExpr(first,  p,  rhsContext,  first.getNext());  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p,  rhsContext,  first.getNext());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p,  rhsContext,  first.getNext());	  addExpr(first,    p,    rhsContext    +    1);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	21	None	replace
954	[BUG]  [BUGGY]  Node  first  =  node.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Node  first  =  node.getFirstChild();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  node.getFirstChild();	  Node    first    =    context.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	18	None	replace
955	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext.getType());  [CE]  cannot  find  symbol  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext.getType());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext.getType());	  add(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
956	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext.getParent());  [CE]  cannot  find  symbol  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext.getParent());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext.getParent());	  add(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
957	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type,  rhsContext);	          Preconditions.checkState(childCount    ==    3);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	16	None	replace
958	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  first,  context);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Node,Context)  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  first,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  first,  context);	  add(first,    p    +    1,    rhsContext,    first);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Node,Context)	124	None	replace
959	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	142	5	replace
960	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	142	5	replace
961	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	142	5	replace
962	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	142	5	replace
963	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  IllegalStateException  	142	5	replace
964	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [FE]  IllegalStateException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  IllegalStateException  	142	5	replace
965	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  IllegalStateException  	142	5	replace
966	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  p  +  1,  context);  }  [FE]  IllegalStateException  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  2);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  IllegalStateException  	142	5	replace
967	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Context  cc  =  getCurrentContext();  Preconditions.checkState(childCount  ==  4);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Context  cc  =  getCurrentContext();  Preconditions.checkState(childCount  ==  4);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    4);    Context  cc  =  getCurrentContext();  Preconditions.checkState(childCount  ==  4);	  	non-compiled	[CE]  cannot  find  symbol	52	None	add
968	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  Integer  p  =  NodeUtil.precedence(type),  Context.OTHER);  [CE]  ';'  expected  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  4);  Integer  p  =  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    4);    Integer  p  =  NodeUtil.precedence(type),  Context.OTHER);	  	non-compiled	[CE]  ';'  expected	52	None	add
969	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  |  1;  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  |  1;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER  |  1;	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  ';'  expected	35	None	replace
970	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  int  firstCount  =  NodeUtil.precedence(type  -  1));  [CE]  ';'  expected  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  int  firstCount  =  NodeUtil.precedence(type  -  1));  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(type    -    1);    int  firstCount  =  NodeUtil.precedence(type  -  1));	  	non-compiled	[CE]  ';'  expected	37	None	add
971	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  Int  firstCount  =  NodeUtil.precedence(type  -  1);  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  Int  firstCount  =  NodeUtil.precedence(type  -  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(type    -    1);    Int  firstCount  =  NodeUtil.precedence(type  -  1);	  	non-compiled	[CE]  cannot  find  symbol	37	None	add
972	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  int  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  int  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  2);  int  p  =  NodeUtil.precedence(type);	  addExpr(first,    p    +    1,    rhsContext);    int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	4	None	replace
973	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	163	5	add
974	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	163	5	add
975	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  2);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    Context    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	117	None	replace
976	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  rhsContext);	  addExpr(first,    p    +    1,    rhsContext);    int    p    =    NodeUtil.precedence(type);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	3	None	replace
977	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  p);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  p);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  p);	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER);    	non-compiled	[CE]  ';'  expected	167	None	replace
978	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  1);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER,  1);	  int    firstCount    =    NodeUtil.precedence(type),    Context.OTHER);    	non-compiled	[CE]  ';'  expected	167	None	replace
979	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ".?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( ".?   ",  true);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	92	5	add
980	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ".?   ",  true);  addExpr(first,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ".?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( ".?   ",  true);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	92	5	add
981	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	91	5	replace
982	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	91	5	replace
983	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  cc.getType());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  cc.getType());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  cc.getType());	  addExpr(first,    p    +    1,    rhsContext.getType());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
984	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    if(p  >  0)  {  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	157	5	add
985	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  if(p  >  0)  {  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    if(p  >  0)  {  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	157	5	add
986	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	69	5	add
987	[BUG]  [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount        ==        1);        addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	69	5	add
988	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.STATEMENT);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.STATEMENT);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  Context.STATEMENT);	  int    p    =    NodeUtil.precedence(type,    context);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	78	None	replace
989	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	58	5	replace
990	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	58	5	replace
991	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	58	5	replace
992	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	58	5	replace
993	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.VAR)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  Token.VAR)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	58	5	replace
994	[BUG]  [BUGGY]  if(p  ==  Token.VAR)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.VAR)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  Token.VAR)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	58	5	replace
995	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  cc.getParent());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  cc.getParent());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  cc.getParent());	  addExpr(first,    p    +    1,    rhsContext.getParent());    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
996	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  n.getParent());  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  n.getParent());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  n.getParent());	  addExpr(first,    p    +    1,    rhsContext.getParent());    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	148	None	replace
997	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	113	None	add
998	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	113	5	add
999	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  2);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        2);        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	113	5	add
1000	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	64	5	replace
1001	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	64	5	replace
1002	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
1003	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }  [FE]  ComparisonFailure  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
1004	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  Context.OTHER);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  Context.OTHER);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	64	5	replace
1005	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  Context.OTHER);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  Context.OTHER);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  Context.OTHER);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	64	5	replace
1006	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.VAR)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  Token.VAR)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
1007	[BUG]  [BUGGY]  if(p  ==  Token.VAR)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }  [FE]  ComparisonFailure  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.VAR)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  Token.VAR)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  ComparisonFailure  	64	1	replace
1008	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
1009	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	159	5	add
1010	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  IllegalStateException  	11	5	add
1011	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  3);  [FE]  IllegalStateException  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        3);        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  IllegalStateException  	11	5	add
1012	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  Int  firstCount  =  NodeUtil.precedence(childCount);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  Int  firstCount  =  NodeUtil.precedence(childCount);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int    firstCount    =    NodeUtil.precedence(childCount);    Int  firstCount  =  NodeUtil.precedence(childCount);	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
1013	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  Context.OTHER,  rhsContext);	  Integer    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	171	None	replace
1014	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER,  0);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER,  0);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  Context.OTHER,  0);	  Integer    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	171	None	replace
1015	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	164	5	replace
1016	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	164	5	replace
1017	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	164	5	replace
1018	[BUG]  [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(last  ==  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	164	5	replace
1019	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  IllegalArgumentException  	164	5	replace
1020	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  IllegalArgumentException  	164	5	replace
1021	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  IllegalStateException  	164	5	replace
1022	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ".?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  IllegalStateException  	164	5	replace
1023	[BUG]  [BUGGY]  cc.addOp( ":   ".equals(p,  p));  [CE]  no  suitable  method  found  for  equals(int,int)  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ":   ".equals(p,  p));  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ":   ".equals(p,  p));	  cc.addOp(   ":   ".equals(p));    	non-compiled	[CE]  no  suitable  method  found  for  equals(int,int)	84	None	replace
1024	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	86	5	add
1025	[BUG]  [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	86	5	add
1026	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  BEFORE_DANGLING_ELSE);  [CE]  cannot  find  symbol  BEFORE_DANGLING_ELSE  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  BEFORE_DANGLING_ELSE);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  BEFORE_DANGLING_ELSE);	  add(first,    p    +    1,    rhsContext,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  cannot  find  symbol  BEFORE_DANGLING_ELSE	174	None	replace
1027	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  STATEMENT);  [CE]  cannot  find  symbol  STATEMENT  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  STATEMENT);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  STATEMENT);	  add(first,    p    +    1,    rhsContext,    IN_FOR_INIT_CLAUSE);    	non-compiled	[CE]  cannot  find  symbol  STATEMENT	174	None	replace
1028	[BUG]  [BUGGY]  Integer  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);	          Preconditions.checkState(childCount    ==    3);    int    childCount    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    3);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	14	None	replace
1029	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNode(n.getFirstChild());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNode(n.getFirstChild());  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNode(n.getFirstChild());	  Context    cc    =    getCurrentContextForNode();    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
1030	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  cc.addExpr(first,  1,  rhsContext);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  cc.addExpr(first,  1,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type);  cc.addExpr(first,  1,  rhsContext);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    addExpr(first,    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
1031	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext.OTHER);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext.OTHER);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  rhsContext.OTHER);	  int    p    =    NodeUtil.precedence(type    +    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	79	None	replace
1032	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);	  addExpr(last,    p    +    1,    context);    int    p    =    NodeUtil.precedence(type);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	60	5	replace
1033	[BUG]  [BUGGY]  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);	  addExpr(last,    p    +    1,    context);    int    p    =    NodeUtil.precedence(type);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	60	5	replace
1034	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
1035	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
1036	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
1037	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
1038	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  2);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  2);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
1039	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  2);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  2);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  2);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
1040	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
1041	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	141	5	add
1042	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  IllegalStateException  	141	5	add
1043	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [FE]  IllegalStateException  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        Preconditions.checkState(childCount    ==    3);    addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  IllegalStateException  	141	5	add
1044	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ",  true);  }  [CE]  unclosed  string  literal  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ",  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ",    true);    	non-compiled	[CE]  unclosed  string  literal	107	None	replace
1045	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  unclosed  string  literal  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ",    true);    	non-compiled	[CE]  unclosed  string  literal	107	None	replace
1046	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [CE]  unclosed  string  literal  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ",    true);    	non-compiled	[CE]  unclosed  string  literal	107	None	replace
1047	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( ": ",  true);  cc.addOp( ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [CE]  unclosed  string  literal  [FE]                    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( ": ",  true);  cc.addOp( ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( ": ",  true);  cc.addOp( ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ",    true);    	non-compiled	[CE]  unclosed  string  literal	107	None	replace
1048	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	66	5	replace
1049	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	66	5	replace
1050	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	66	5	replace
1051	[BUG]  [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	66	5	replace
1052	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  IllegalArgumentException  	66	5	replace
1053	[BUG]  [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  IllegalArgumentException  	66	5	replace
1054	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  NodeUtil.precedence(type));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context,  NodeUtil.precedence(type));  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context,  NodeUtil.precedence(type));	  Context    cc    =    getCurrentContextForNoInOperator(context);    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1055	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	144	5	replace
1056	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	144	5	replace
1057	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	144	5	replace
1058	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	144	5	replace
1059	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  IllegalArgumentException  	144	5	replace
1060	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  IllegalArgumentException  	144	5	replace
1061	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  IllegalStateException  	144	5	replace
1062	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  IllegalStateException  	144	5	replace
1063	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	132	5	add
1064	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	132	5	add
1065	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	132	5	add
1066	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	132	5	add
1067	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	93	5	replace
1068	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	93	5	replace
1069	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
1070	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  addExpr(last,  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
1071	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
1072	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }	  cc.addOp(   "?       ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	93	5	replace
1073	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	133	5	replace
1074	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	133	5	replace
1075	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	133	5	replace
1076	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	133	5	replace
1077	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  IllegalArgumentException  	133	5	replace
1078	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  IllegalArgumentException  	133	5	replace
1079	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	8	5	replace
1080	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	8	5	replace
1081	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(type))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ":   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   ":   ",    true);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
1082	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                Preconditions.checkState(childCount        ==        1);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	26	5	add
1083	[BUG]  [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  1);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                Preconditions.checkState(childCount        ==        1);        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	26	5	add
1084	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	128	5	replace
1085	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	128	5	replace
1086	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	128	5	replace
1087	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	128	5	replace
1088	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	128	5	replace
1089	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	128	5	replace
1090	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	162	5	replace
1091	[BUG]  [BUGGY]  if(p  >  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	162	5	replace
1092	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  int  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  int  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    int  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	176	None	add
1093	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  cc.addOp('?   ",  false);  [CE]  unclosed  character  literal  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  cc.addOp('?   ",  false);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    false);    cc.addOp('?   ",  false);	  	non-compiled	[CE]  unclosed  character  literal	82	None	add
1094	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  cc.addOp( ": ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  cc.addOp( ": ",  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
1095	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  cc.addOp( ": ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  cc.addOp( ": ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  }  else  {  cc.addOp( ": ",  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
1096	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  }  else  {  cc.addOp( ": ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( ":   ",  true);  }  else  {  cc.addOp( ": ",  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
1097	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  }  else  {  cc.addOp( ": ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( ":   ",  true);  }  else  {  cc.addOp( ": ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( ":   ",  true);  }  else  {  cc.addOp( ": ",  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
1098	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
1099	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( ":   ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	103	5	replace
1100	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	95	5	replace
1101	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	95	5	replace
1102	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	95	5	replace
1103	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	95	5	replace
1104	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  ComparisonFailure  	95	1	replace
1105	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [FE]  ComparisonFailure  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  ComparisonFailure  	95	1	replace
1106	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	100	None	replace
1107	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	100	None	replace
1108	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	100	None	replace
1109	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]                    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp('?',  true);  }  else  {  addExpr(last,  1,  rhsContext);  }	          cc.addOp(       "?       ",    true);    cc.addOp('?       ",    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	100	None	replace
1110	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ".?   ",  false);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	88	5	add
1111	[BUG]  [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(   "?     ",  false);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ".?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ".?   ",  false);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	88	5	add
1112	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER);	          Preconditions.checkState(childCount    ==    3);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	16	None	replace
1113	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER  |  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER  |  1;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type),  Context.OTHER  |  1;	  int    p    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  ';'  expected	77	None	replace
1114	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);	          Preconditions.checkState(childCount    ==    1);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    1);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	28	None	replace
1115	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,    p    +    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
1116	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(last,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
1117	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  cc.addOp( ",  true);  addExpr(first,  p  +  1,  context);  }  [CE]  unclosed  string  literal  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  cc.addOp( ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  cc.addOp( ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ",    true);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  unclosed  string  literal	131	None	replace
1118	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	131	5	replace
1119	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	131	5	replace
1120	[BUG]  [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",  true);  addExpr(first,  p  +  1,  context);  }  [CE]  unclosed  string  literal  [FE]                junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(last!=  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(last!=  null)  {  cc.addOp( "?   ",  true);  cc.addOp( ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ",    true);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  unclosed  string  literal	131	None	replace
1121	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   ",    true);    addExpr(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
1122	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  cc.next());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  cc.next());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  cc.next());	  addExpr(first,    p    +    1,    rhsContext.next());    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
1123	[BUG]  [BUGGY]  add(last,  p  +  1,  context);  [CE]  no  suitable  method  found  for  add(Node,int,Context)  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(last,  p  +  1,  context);	  add(first,    p    +    1,    context);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context)	147	None	replace
1124	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext.next());  [CE]  cannot  find  symbol  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext.next());  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext.next());	  add(first,    p    +    1,    context);    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
1125	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
1126	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	61	5	add
1127	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	130	5	replace
1128	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	130	5	replace
1129	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	130	5	replace
1130	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	130	5	replace
1131	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	130	5	replace
1132	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	130	5	replace
1133	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	130	5	replace
1134	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  context);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	130	5	replace
1135	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	6	5	replace
1136	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	6	5	replace
1137	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [CE]  cannot  find  symbol  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(type))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(type))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
1138	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  [CE]  orphaned  case  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(NodeUtil.isExpressionNode(p))  {  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {	  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  orphaned  case	6	None	replace
1139	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	127	5	add
1140	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	127	5	add
1141	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":   ".,    true);    	compilable	  [FE]  ComparisonFailure  	145	3	replace
1142	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [FE]  ComparisonFailure  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":   ".,    true);    	compilable	  [FE]  ComparisonFailure  	145	3	replace
1143	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":   ".,    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?{a:1}:{a:3  	145	5	replace
1144	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ": ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(       ":       ",    true);    cc.addOp(       ":   ".,    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?{a:1}:{a:3  	145	5	replace
1145	[BUG]  [BUGGY]  addExpr(n,  p  +  1,  context);  cc.addOp(n,  p  +  1,  context);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(n,  p  +  1,  context);  cc.addOp(n,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(n,    p    +    1,    context);    cc.addOp(n,  p  +  1,  context);	  	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	54	None	add
1146	[BUG]  [BUGGY]  add(last,  p  +  1,  rhsContext,  null);  [CE]  no  suitable  method  found  for  add(Node,int,Context,<null>)  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(last,  p  +  1,  rhsContext,  null);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(last,  p  +  1,  rhsContext,  null);	  add(first,    p    +    1,    rhsContext,    null);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,<null>)	151	None	replace
1147	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
1148	[BUG]  [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     "?     ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?     ",  true);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       "?       ",        true);        addExpr(first,        p        +        1,        context);        cc.addOp(   "?       ",    true);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	139	5	add
1149	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  cc.addExpr(firstCount,  1,  rhsContext);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  cc.addExpr(firstCount,  1,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type);  cc.addExpr(firstCount,  1,  rhsContext);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    addExpr(firstCount,    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
1150	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  addExpr(firstCount,  0,  rhsContext);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  addExpr(firstCount,  0,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type);  addExpr(firstCount,  0,  rhsContext);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    addExpr(firstCount,    1,    rhsContext);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	47	None	replace
1151	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext  =  Context.OTHER;  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext  =  Context.OTHER;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  rhsContext  =  Context.OTHER;	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    rhsContext    =    Context.OTHER;    	non-compiled	[CE]  ')'  expected	50	None	replace
1152	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance(n,  context);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContextInstance(n,  context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextInstance(n,  context);	  Context    cc    =    getCurrentContextInstance();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
1153	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	62	5	replace
1154	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	62	5	replace
1155	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  Context.OTHER);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  Context.OTHER);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	62	5	replace
1156	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  Context.OTHER);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  Context.OTHER);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  }  else  {  addExpr(last,  p  +  1,  Context.OTHER);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    addExpr(last,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	62	5	replace
1157	[BUG]  [BUGGY]  add(last,  p  +  1,  rhsContext,  IN_FOR_INIT_CLAUSE);  [CE]  cannot  find  symbol  IN_FOR_INIT_CLAUSE  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(last,  p  +  1,  rhsContext,  IN_FOR_INIT_CLAUSE);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(last,  p  +  1,  rhsContext,  IN_FOR_INIT_CLAUSE);	  add(last,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol  IN_FOR_INIT_CLAUSE	175	None	replace
1158	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER;  cc.addOp( "?   ",  true);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER;  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER;  cc.addOp( "?   ",  true);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  	48	None	replace
1159	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  Context.OTHER);  [CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    IllegalStateException    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  Context.OTHER);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  Context.OTHER);	  int    firstCount    =    NodeUtil.precedence(childCount);    	non-compiled	[CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;	34	None	replace
1160	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  int  p  =  NodeUtil.precedence(type);  addExpr(first,  0,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  int  p  =  NodeUtil.precedence(type);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    0,    rhsContext);    int  p  =  NodeUtil.precedence(type);  addExpr(first,  0,  rhsContext);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	135	None	add
1161	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	135	5	add
1162	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	135	5	add
1163	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ".: ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ".: ",  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ".:       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	105	5	replace
1164	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ".: ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ".: ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ".: ",  true);  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ".:       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	105	5	replace
1165	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ".: ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ".: ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ".:       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?{a:1}:{a:3  	105	5	replace
1166	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ".: ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ".: ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( ": ",  true);  cc.addOp( ".: ",  true);  }  else  {  addExpr(first,  1,  rhsContext);  break;  }	  cc.addOp(       ":       ",    true);    cc.addOp(   ".:       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?{a:1}:{a:3  	105	5	replace
1167	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Node  first  =  n.getFirstChild().cloneTree();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  n.getFirstChild().cloneTree();	  Node    first    =    n.getFirstChild().getNext();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	137	None	replace
1168	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	89	5	replace
1169	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  }	  cc.addOp(   "?       ",    false);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	89	5	replace
1170	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( ".?   ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	                cc.addOp(       "?       ",        true);        cc.addOp(   "?       ",    true);    cc.addOp( ".?   ",  true);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	94	5	add
1171	[BUG]  [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( ".?   ",  true);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]          cc.addOp(     "?     ",    true);    cc.addOp(   "?     ",  true);  cc.addOp( ".?   ",  true);  cc.addOp( "?   ",  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	                cc.addOp(       "?       ",        true);        cc.addOp(   "?       ",    true);    cc.addOp( ".?   ",  true);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	94	5	add
1172	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
1173	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
1174	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
1175	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
1176	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
1177	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	99	5	replace
1178	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  ComparisonFailure  	99	1	replace
1179	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [FE]  ComparisonFailure  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ",?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ",?       ",    true);    	compilable	  [FE]  ComparisonFailure  	99	1	replace
1180	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    int  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	5	None	add
1181	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    Preconditions.checkState(childCount    ==    2);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	115	None	replace
1182	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER,  rhsContext);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type),  Context.OTHER,  rhsContext);	  int    p    =    NodeUtil.precedence(type),    Context.OTHER);    	non-compiled	[CE]  ';'  expected	168	None	replace
1183	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type,  rhsContext);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  childCount  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  childCount  =  NodeUtil.precedence(type,  rhsContext);	          Preconditions.checkState(childCount    ==    3);    int    childCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	15	None	replace
1184	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
1185	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	65	5	add
1186	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type),  Context.OTHER  |  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Integer  p  =  NodeUtil.precedence(type),  Context.OTHER  |  1;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type),  Context.OTHER  |  1;	  Integer    p    =    NodeUtil.precedence(type),    Context.OTHER;    	non-compiled	[CE]  ';'  expected	45	None	replace
1187	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  last,  n);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Node,Node)  [FE]                        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  last,  n);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  last,  n);	  add(first,    p    +    1,    rhsContext,    last);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Node,Node)	126	None	replace
1188	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( ": ".,  true);  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( ": ".,  true);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( ": ".,  true);	          int    firstCount    =    NodeUtil.precedence(type);    int    firstCount    =    NodeUtil.precedence(type);    cc.addOp(   ":   ",    true);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
1189	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type)-  1;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int  firstCount  =  NodeUtil.precedence(type)-  1;	  int    firstCount    =    NodeUtil.precedence(type    -    1);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	38	5	replace
1190	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type)-  1;  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type)-  1;  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type)-  1;	  int    firstCount    =    NodeUtil.precedence(type    -    1);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	38	5	replace
1191	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  p);  [CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  p);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  p);	  int    firstCount    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;	36	None	replace
1192	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  predicate);  [CE]  cannot  find  symbol  predicate  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  predicate);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  rhsContext,  predicate);	  int    firstCount    =    NodeUtil.precedence(type,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol  predicate	36	None	replace
1193	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  cc.addExpr(first,  p  +  1,  rhsContext);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]        IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  cc.addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  childCount  =  NodeUtil.precedence(type);  cc.addExpr(first,  p  +  1,  rhsContext);	  int    childCount    =    NodeUtil.precedence(type);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	156	None	replace
1194	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext,  context);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext,  context);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  childCount  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext,  context);	  int    childCount    =    NodeUtil.precedence(type);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	156	None	replace
1195	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	9	5	add
1196	[BUG]  [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,        p        +        1,        rhsContext);        Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	9	5	add
1197	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	97	5	replace
1198	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	97	5	replace
1199	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	97	5	replace
1200	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	97	5	replace
1201	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	compilable	  [FE]  ComparisonFailure  	97	1	replace
1202	[BUG]  [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [FE]  ComparisonFailure  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	compilable	  [FE]  ComparisonFailure  	97	1	replace
1203	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	97	5	replace
1204	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  cc.addOp( ".?   ",  true);  }  else  {  addExpr(first,  p  +  1,  context);  }	          cc.addOp(       "?       ",    true);    cc.addOp(   ".?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	97	5	replace
1205	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  n,  type);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Node,int)  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  n,  type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  n,  type);	  add(first,    p    +    1,    rhsContext,    type);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Node,int)	125	None	replace
1206	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  last,  type);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Node,int)  [FE]                        ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  add(first,  p  +  1,  rhsContext,  last,  type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  last,  type);	  add(first,    p    +    1,    rhsContext,    type);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Node,int)	125	None	replace
1207	[BUG]  [BUGGY]  addExpr(first,  p,  rhsContext,  last);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(first,  p,  rhsContext,  last);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p,  rhsContext,  last);	  addExpr(first,    p,    rhsContext    +    1);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	21	None	replace
1208	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
1209	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
1210	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
1211	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
1212	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
1213	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
1214	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  IllegalStateException  	57	5	add
1215	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [FE]  IllegalStateException  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  IllegalStateException  	57	5	add
1216	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
1217	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);  if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(last,    p    +    1,    context);    if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	57	5	add
1218	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  Node  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                      ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  0);  Node  first  =  n.getFirstChild();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  0);  Node  first  =  n.getFirstChild();	  Preconditions.checkState(childCount    ==    1);    Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	20	None	replace
1219	[BUG]  [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(   ".:     ",  true);  cc.addOp(   ": ".,  true);  cc.addOp(   ".: ".,  true);  [CE]  <identifier>  expected  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp(     ":     ",    true);    cc.addOp(   ".:     ",  true);  cc.addOp(   ": ".,  true);  cc.addOp(   ".: ".,  true);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(       ":       ",        true);        cc.addOp(   ".:       ",    true);    cc.addOp(   ": ".,  true);  cc.addOp(   ".: ".,  true);	  	non-compiled	[CE]  <identifier>  expected	104	None	add
1220	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]    ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	111	None	add
1221	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      ComparisonFailure    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    3);    addExpr(first,    p    +    1,    rhsContext);    int  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	111	None	add
1222	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	87	5	replace
1223	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	87	5	replace
1224	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	87	5	replace
1225	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  2);  return;  }	  cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	87	5	replace
1226	[BUG]  [BUGGY]  Node  first  =  last.getLastChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Node  first  =  last.getLastChild();  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  last.getLastChild();	  Node    first    =    n.getLastChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	17	None	replace
1227	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getRootContext(n);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Context  cc  =  getCurrentContext().getRootContext(n);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext().getRootContext(n);	  Context    cc    =    getCurrentContext().getRootContext();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
1228	[BUG]  [BUGGY]  cc.addOp( ".s.IFJDCS ".charAt(p));  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  cc.addOp( ".s.IFJDCS ".charAt(p));  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ".s.IFJDCS ".charAt(p));	  cc.addOp(       ":       ",    true);    cc.addOp(':',    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	106	None	replace
1229	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	140	5	replace
1230	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	140	5	replace
1231	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	140	5	replace
1232	[BUG]  [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	140	5	replace
1233	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	140	5	replace
1234	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(       "?       ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	140	5	replace
1235	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
1236	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  cc.addOp(   "?     ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(p  >  0)  {  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p    >    0)    {    cc.addOp(   "?       ",    true);    addExpr(first,    p    +    1,    context);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(p  >  0)  {  cc.addOp( "?   ",  true);  }  else  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	161	5	add
1237	[BUG]  [BUGGY]  if(p  >  rhsContext.getType())  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  rhsContext.getType())  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  rhsContext.getType())  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1238	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
1239	[BUG]  [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  Token.NAME)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
1240	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  Preconditions.checkState(childCount  ==  1);  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  Preconditions.checkState(childCount  ==  1);  return;  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
1241	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  Preconditions.checkState(childCount  ==  1);  return;  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  Preconditions.checkState(childCount  ==  1);  return;  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  }  else  {  Preconditions.checkState(childCount  ==  1);  return;  }	  addExpr(last,    p    +    1,    context);    cc.addOp(   "?       ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	177	5	replace
1242	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  Context.OTHER,  rhsContext);	  int    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	138	None	replace
1243	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER,  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER,  1);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  Context.OTHER,  1);	  int    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	138	None	replace
1244	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER,  context);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER,  context);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  Context.OTHER,  context);	  int    p    =    NodeUtil.precedence(type,    Context.OTHER);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	138	None	replace
1245	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
1246	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  ComparisonFailure  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
1247	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
1248	[BUG]  [BUGGY]  if(p  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  ComparisonFailure  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  ==  1)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
1249	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
1250	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  ComparisonFailure  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
1251	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
1252	[BUG]  [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  }  [FE]  ComparisonFailure  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  addExpr(first,  p  +  1,  rhsContext);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  }	  addExpr(first,    p    +    1,    rhsContext);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	2	2	replace
1253	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]                IllegalStateException      [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]      addExpr(first,  p  +  1,  context);  cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type,  rhsContext);	          Preconditions.checkState(childCount    ==    2);    Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	118	None	replace
1254	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	63	5	add
1255	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	63	5	add
1256	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	63	5	add
1257	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    if(childCount  ==  2)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	63	5	add
1258	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	63	5	add
1259	[BUG]  [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]      addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;      [BUGGY]  addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);  if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }  [BUGGY]      cc.addOp(     "?     ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(     ":     ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,        p        +        1,        context);        addExpr(first,    p    +    1,    context);    if(childCount  ==  1)  {  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  }  else  {  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  }	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	63	5	add
