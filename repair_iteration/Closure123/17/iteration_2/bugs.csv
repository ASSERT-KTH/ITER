bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	11	5	add
2	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    p    +    1,    rhsContext);    addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	11	5	add
3	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    p    +    1,    rhsContext);    int  p  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	11	None	add
4	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  int  p  =  NodeUtil.precedence(type);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    p    +    1,    rhsContext);    int  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	11	None	add
5	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]          ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	11	5	add
6	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]          ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    p    +    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	11	5	add
7	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]            ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	11	5	add
8	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]            ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    p    +    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	11	5	add
9	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]              ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	11	5	add
10	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]              ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	11	5	add
11	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  ComparisonFailure  	2	1	add
12	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  ComparisonFailure  	2	1	add
13	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    3);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	2	None	add
14	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]        ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    3);    int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	2	None	add
15	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    3);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	2	None	add
16	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    3);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	2	None	add
17	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  n.getLastChild();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	4	None	replace
18	[BUG]  [BUGGY]  Node  first  =  context.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Node  first  =  context.getFirstChild();  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  context.getFirstChild();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	4	None	replace
19	[BUG]  [BUGGY]  Node  first  =  rhsContext.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Node  first  =  rhsContext.getFirstChild();  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  rhsContext.getFirstChild();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	4	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  Node  first  =  n.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                  ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  1);  Node  first  =  n.getFirstChild();  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  1);  Node  first  =  n.getFirstChild();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	4	None	replace
21	[BUG]  [BUGGY]  addExpr(first,  p,  rhsContext  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p,  rhsContext  +  1);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p,  rhsContext  +  1);	  addExpr(first,    p    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	18	None	replace
22	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext.getType());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext.getType());  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext.getType());	  addExpr(first,    p    +    1);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
23	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,  p  +  1,  rhsContext);	  addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	12	5	replace
24	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,  p  +  1,  rhsContext);	  addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	12	5	replace
25	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  n);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  n);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  n);	  addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	12	None	replace
26	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	5	5	add
27	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  1);  Preconditions.checkState(childCount  ==  1);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    1);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	5	5	add
28	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    1);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	5	None	add
29	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]        IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    1);    int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  1);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	5	None	add
30	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  1);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    1);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	5	None	add
31	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    1);    Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	5	None	add
32	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  1);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    1);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	5	None	add
33	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int  firstCount  =  NodeUtil.precedence(childCount);	      int    firstCount    =    NodeUtil.precedence(type);    	compilable	  [FE]  IllegalStateException  	20	5	replace
34	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  [FE]  IllegalStateException  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  firstCount  =  NodeUtil.precedence(childCount);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(childCount);	      int    firstCount    =    NodeUtil.precedence(type);    	compilable	  [FE]  IllegalStateException  	20	5	replace
35	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER;  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER;  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER;	      int    firstCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  ';'  expected	20	None	replace
36	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext);  [CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  firstCount  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type,  rhsContext);	      int    firstCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  method  precedence  in  class  NodeUtil  cannot  be  applied  to  given  types;	20	None	replace
37	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]          ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	int  firstCount  =  NodeUtil.precedence(type  -  1);	      int    firstCount    =    NodeUtil.precedence(type);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	20	5	replace
38	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]          ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  firstCount  =  NodeUtil.precedence(type  -  1);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type  -  1);	      int    firstCount    =    NodeUtil.precedence(type);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	20	5	replace
39	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext().getCurrentContext();	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
40	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Context  cc  =  getCurrentContext(context);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(context);	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
41	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Context  cc  =  getCurrentContextInstance();  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextInstance();	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
42	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getRootContext();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Context  cc  =  getCurrentContext().getRootContext();  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext().getRootContext();	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
43	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  rhsContext);	      Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	25	None	replace
44	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  1);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  1);	      Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	25	None	replace
45	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type),  Context.OTHER;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Integer  p  =  NodeUtil.precedence(type),  Context.OTHER;  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type),  Context.OTHER;	      Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  ';'  expected	25	None	replace
46	[BUG]  [BUGGY]      int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        int    firstCount    =    NodeUtil.precedence(type);    int  firstCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	19	None	add
47	[BUG]  [BUGGY]      int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  addExpr(firstCount,  1,  rhsContext);  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]      ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  addExpr(firstCount,  1,  rhsContext);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        int    firstCount    =    NodeUtil.precedence(type);    int  firstCount  =  NodeUtil.precedence(type);  addExpr(firstCount,  1,  rhsContext);	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	19	None	add
48	[BUG]  [BUGGY]      int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( "?   ",  true);  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]        ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( "?   ",  true);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        int    firstCount    =    NodeUtil.precedence(type);    int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( "?   ",  true);	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	19	None	add
49	[BUG]  [BUGGY]      int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( ": ",  true);  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]          ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( ": ",  true);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        int    firstCount    =    NodeUtil.precedence(type);    int  firstCount  =  NodeUtil.precedence(type);  cc.addOp( ": ",  true);	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	19	None	add
50	[BUG]  [BUGGY]      int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        int    firstCount    =    NodeUtil.precedence(type);    int  firstCount  =  NodeUtil.precedence(type);  rhsContext  =  Context.OTHER;	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	19	None	add
51	[BUG]  [BUGGY]      int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  addExpr(first,  1,  rhsContext);  [CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      int  firstCount  =  NodeUtil.precedence(type);  int  firstCount  =  NodeUtil.precedence(type);  addExpr(first,  1,  rhsContext);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        int    firstCount    =    NodeUtil.precedence(type);    int  firstCount  =  NodeUtil.precedence(type);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  variable  firstCount  is  already  defined  in  method  add(Node,Context)	19	None	add
52	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  4);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount  ==  4);	      Preconditions.checkState(childCount    ==    1);    	compilable	  [FE]  IllegalStateException  	6	5	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  4);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  4);	      Preconditions.checkState(childCount    ==    1);    	compilable	  [FE]  IllegalStateException  	6	5	replace
54	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(n,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(n,  p  +  1,  context);	  addExpr(last,    p    +    1,    context);    	compilable	  [FE]  StackOverflowError  	14	5	replace
55	[BUG]  [BUGGY]  addExpr(n,  p  +  1,  context);  [FE]  StackOverflowError  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(n,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(n,  p  +  1,  context);	  addExpr(last,    p    +    1,    context);    	compilable	  [FE]  StackOverflowError  	14	5	replace
56	[BUG]  [BUGGY]  cc.addOp( ": ");  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( ": ");  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ": ");	  addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	14	None	replace
57	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
58	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  addExpr(last,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    context);    addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
59	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    context);    int  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	13	None	add
60	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    context);    int  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	13	None	add
61	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
62	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
63	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
64	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  addExpr(first,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    context);    addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
65	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
66	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
67	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	15	5	add
68	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	15	5	add
69	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	15	5	add
70	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  1);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  1);	  	compilable	  [FE]  IllegalStateException  	15	5	add
71	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
72	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	15	None	add
73	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	15	None	add
74	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	15	5	add
75	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]              IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	15	5	add
76	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  rhsContext);	      int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	1	None	replace
77	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER;  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type),  Context.OTHER;	      int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  ';'  expected	1	None	replace
78	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  context);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  p  =  NodeUtil.precedence(type,  context);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  context);	      int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	1	None	replace
79	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type  +  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  p  =  NodeUtil.precedence(type  +  1);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type  +  1);	      int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	1	None	replace
80	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  0);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount  ==  0);	      Preconditions.checkState(childCount    ==    3);    	compilable	  [FE]  IllegalStateException  	3	5	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  [FE]  IllegalStateException  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  0);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  0);	      Preconditions.checkState(childCount    ==    3);    	compilable	  [FE]  IllegalStateException  	3	5	replace
82	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( "?   ",  false);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp( "?   ",  false);	      cc.addOp(   "?   ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	10	5	replace
83	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( "?   ",  false);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( "?   ",  false);	      cc.addOp(   "?   ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	10	5	replace
84	[BUG]  [BUGGY]  cc.addOp( ": ".equals(p));  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( ": ".equals(p));  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ": ".equals(p));	      cc.addOp(   "?   ",    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	10	None	replace
85	[BUG]  [BUGGY]  cc.addOp( ",  true);  [CE]  unclosed  string  literal  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( ",  true);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ",  true);	      cc.addOp(   "?   ",    true);    	non-compiled	[CE]  unclosed  string  literal	10	None	replace
86	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
87	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  rhsContext);	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
88	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
89	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  rhsContext);	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
90	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
91	[BUG]  [BUGGY]  cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ": ",  true);  addExpr(first,  p  +  1,  rhsContext);	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
92	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
93	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
94	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( "?   ",  true);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	        cc.addOp(   "?   ",    true);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	9	5	add
95	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( "?   ",  true);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        cc.addOp(   "?   ",    true);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	9	5	add
96	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ".?   ",  true);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	        cc.addOp(   "?   ",    true);    cc.addOp( ".?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	9	5	add
97	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ".?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ".?   ",  true);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        cc.addOp(   "?   ",    true);    cc.addOp( ".?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	9	5	add
98	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ",?   ",  true);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	        cc.addOp(   "?   ",    true);    cc.addOp( ",?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	9	5	add
99	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ",?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ",?   ",  true);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        cc.addOp(   "?   ",    true);    cc.addOp( ",?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	9	5	add
100	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp('?   ",  true);  [CE]  unclosed  character  literal  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp('?   ",  true);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        cc.addOp(   "?   ",    true);    cc.addOp('?   ",  true);	  	non-compiled	[CE]  unclosed  character  literal	9	None	add
101	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ",  true);  [CE]  unclosed  string  literal  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ",  true);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        cc.addOp(   "?   ",    true);    cc.addOp( ",  true);	  	non-compiled	[CE]  unclosed  string  literal	9	None	add
102	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   ":   ",  true);  cc.addOp(   ":   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   ":   ",    true);    cc.addOp(   ":   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	21	5	add
103	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  cc.addOp(   ":   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   ":   ",  true);  cc.addOp(   ":   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    true);    cc.addOp(   ":   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	21	5	add
104	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   ":   ",  true);  cc.addOp( ".:   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   ":   ",    true);    cc.addOp( ".:   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	21	5	add
105	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  cc.addOp( ".:   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   ":   ",  true);  cc.addOp( ".:   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    true);    cc.addOp( ".:   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	21	5	add
106	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  cc.addOp(':',  true);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   ":   ",  true);  cc.addOp(':',  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    true);    cc.addOp(':',  true);	  	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	21	None	add
107	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  cc.addOp( ",  true);  [CE]  unclosed  string  literal  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   ":   ",  true);  cc.addOp( ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    true);    cc.addOp( ",  true);	  	non-compiled	[CE]  unclosed  string  literal	21	None	add
108	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  IllegalStateException  	16	5	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  2);  addExpr(first,  p  +  1,  rhsContext);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  IllegalStateException  	16	5	replace
110	[BUG]  [BUGGY]  Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
111	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	16	2	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [FE]  ComparisonFailure  [FE]        IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	16	2	replace
113	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	7	5	add
114	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	7	5	add
115	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]      IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    2);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	7	None	add
116	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]        IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    2);    int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	7	None	add
117	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    2);    Integer  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	7	None	add
118	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    2);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	7	None	add
119	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]              IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]      Preconditions.checkState(childCount  ==  2);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	        Preconditions.checkState(childCount    ==    2);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	7	None	add
120	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( ": ",  false);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp( ": ",  false);	  cc.addOp(   ":   ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	22	5	replace
121	[BUG]  [BUGGY]  cc.addOp( ": ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( ": ",  false);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ": ",  false);	  cc.addOp(   ":   ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3  	22	5	replace
122	[BUG]  [BUGGY]  cc.addOp( ": ", "  true);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( ": ", "  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ": ", "  true);	  cc.addOp(   ":   ",    true);    	non-compiled	[CE]  unclosed  string  literal	22	None	replace
123	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  context);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Context)  [FE]              ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  add(first,  p  +  1,  rhsContext,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  context);	  add(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Context)	17	None	replace
124	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  first);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Node)  [FE]                ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  add(first,  p  +  1,  rhsContext,  first);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  first);	  add(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Node)	17	None	replace
125	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  type);  [CE]  no  suitable  method  found  for  add(Node,int,Context,int)  [FE]                  ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  add(first,  p  +  1,  rhsContext,  type);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  type);	  add(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,int)	17	None	replace
126	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  last);  [CE]  no  suitable  method  found  for  add(Node,int,Context,Node)  [FE]                    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  add(first,  p  +  1,  rhsContext,  last);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  last);	  add(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,Node)	17	None	replace
127	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
128	[BUG]  [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
129	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
130	[BUG]  [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
131	[BUG]  [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( ",  true);  addExpr(first,  p  +  1,  context);  [CE]  unclosed  string  literal  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( ",  true);  addExpr(first,  p  +  1,  context);	  	non-compiled	[CE]  unclosed  string  literal	23	None	add
132	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
133	[BUG]  [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
134	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type  +  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Integer  p  =  NodeUtil.precedence(type  +  1);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type  +  1);	      Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	25	None	replace
135	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(first,  0,  rhsContext);	  addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	12	3	replace
136	[BUG]  [BUGGY]  addExpr(first,  0,  rhsContext);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  0,  rhsContext);	  addExpr(first,    p    +    1,    rhsContext);    	compilable	  [FE]  ComparisonFailure  	12	3	replace
137	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Node  first  =  n.getFirstChild().getNext();  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Node  first  =  n.getFirstChild().getNext();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	4	None	replace
138	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  p  =  NodeUtil.precedence(type,  Context.OTHER);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type,  Context.OTHER);	      int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	1	None	replace
139	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
140	[BUG]  [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
141	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
142	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    context);    Preconditions.checkState(childCount  ==  3);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
143	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
144	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  false);  addExpr(last,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
145	[BUG]  [BUGGY]  cc.addOp(   ":   ",  true);  cc.addOp(   ": ".,  true);  [CE]  <identifier>  expected  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   ":   ",  true);  cc.addOp(   ": ".,  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   ":   ",    true);    cc.addOp(   ": ".,  true);	  	non-compiled	[CE]  <identifier>  expected	21	None	add
146	[BUG]  [BUGGY]  addExpr(last,  p  +  1);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,  p  +  1);	  addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	14	None	replace
147	[BUG]  [BUGGY]  add(first,  p  +  1,  context);  [CE]  no  suitable  method  found  for  add(Node,int,Context)  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  add(first,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  context);	  addExpr(last,    p    +    1,    context);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context)	14	None	replace
148	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext.getParent());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext.getParent());  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext.getParent());	  addExpr(first,    p    +    1);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
149	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext.next());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext.next());  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext.next());	  addExpr(first,    p    +    1);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
150	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  false);  [CE]  no  suitable  method  found  for  add(Node,int,Context,boolean)  [FE]              ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  add(first,  p  +  1,  rhsContext,  false);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  false);	  add(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,boolean)	17	None	replace
151	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  null);  [CE]  no  suitable  method  found  for  add(Node,int,Context,<null>)  [FE]                ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  add(first,  p  +  1,  rhsContext,  null);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  null);	  add(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context,<null>)	17	None	replace
152	[BUG]  [BUGGY]  cc.addOp( ": ".,  true);  [CE]  <identifier>  expected  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp( ": ".,  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp( ": ".,  true);	  cc.addOp(   ":   ",    true);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
153	[BUG]  [BUGGY]  Context  cc  =  getCurrentStatementContext();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Context  cc  =  getCurrentStatementContext();  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentStatementContext();	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
154	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(n);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Context  cc  =  getCurrentContext(n);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContext(n);	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
155	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNode();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Context  cc  =  getCurrentContextForNode();  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNode();	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
156	[BUG]  [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]    IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  childCount  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  childCount  =  NodeUtil.precedence(type);  addExpr(first,  p  +  1,  rhsContext);	  Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	16	None	replace
157	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
158	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
159	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
160	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
161	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
162	[BUG]  [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	if(p  >  0)  {  cc.addOp( "?   ",  true);  addExpr(first,  p  +  1,  context);  }  else  {  throw  new  IllegalStateException( " ");  }	  cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	24	5	replace
163	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
164	[BUG]  [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  cc.addOp(   "?   ",  true);  addExpr(first,  p  +  1,  context);  cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	cc.addOp(   "?   ",    true);    addExpr(first,    p    +    1,    context);    cc.addOp( ".?   ",  true);  addExpr(first,  p  +  1,  context);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	23	5	add
165	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator();  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNoInOperator();	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
166	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context);	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
167	[BUG]  [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  firstCount  =  NodeUtil.precedence(type),  Context.OTHER);	      int    firstCount    =    NodeUtil.precedence(type);    	non-compiled	[CE]  ';'  expected	20	None	replace
168	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  int  p  =  NodeUtil.precedence(type),  Context.OTHER);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	int  p  =  NodeUtil.precedence(type),  Context.OTHER);	      int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  ';'  expected	1	None	replace
169	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  context);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  context);	  addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	12	None	replace
170	[BUG]  [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  false);  [CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(first,  p  +  1,  rhsContext,  false);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(first,  p  +  1,  rhsContext,  false);	  addExpr(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  method  addExpr  in  class  CodeGenerator  cannot  be  applied  to  given  types;	12	None	replace
171	[BUG]  [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Integer  p  =  NodeUtil.precedence(type,  Context.OTHER);  [BUGGY]    addExpr(first,  p  +  1,  context);  cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Integer  p  =  NodeUtil.precedence(type,  Context.OTHER);	      Integer    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	25	None	replace
172	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	15	5	add
173	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  Preconditions.checkState(childCount  ==  1);  addExpr(first,  p  +  1,  rhsContext);  Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	Preconditions.checkState(childCount    ==    1);    addExpr(first,    p    +    1,    rhsContext);    Preconditions.checkState(childCount  ==  3);  addExpr(first,  p  +  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	15	5	add
174	[BUG]  [BUGGY]  add(first,  p  +  1,  rhsContext,  IN_FOR_INIT_CLAUSE);  [CE]  cannot  find  symbol  IN_FOR_INIT_CLAUSE  [FE]              ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  add(first,  p  +  1,  rhsContext,  IN_FOR_INIT_CLAUSE);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(first,  p  +  1,  rhsContext,  IN_FOR_INIT_CLAUSE);	  add(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol  IN_FOR_INIT_CLAUSE	17	None	replace
175	[BUG]  [BUGGY]  add(last,  p  +  1,  rhsContext);  [CE]  no  suitable  method  found  for  add(Node,int,Context)  [FE]                ComparisonFailure    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  add(last,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	add(last,  p  +  1,  rhsContext);	  add(first,    p    +    1,    rhsContext);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Context)	17	None	replace
176	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	add	addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
177	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=[x]?{a:1}:{a:3    [CONTEXT]    addExpr(first,  NodeUtil.precedence(type),  Context.OTHER);  }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;    [BUGGY]  addExpr(last,  p  +  1,  context);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	286	286	1	replace	addExpr(last,    p    +    1,    context);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=[]x?{a:1}:{a:3  	13	5	add
