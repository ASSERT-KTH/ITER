bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ":   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( ":   ",  false);	  cc.addOp(   "?   ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	12	5	replace
2	[BUG]  [BUGGY]  cc.addOp( ":   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ":   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ":   ",  false);	  cc.addOp(   "?   ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	12	5	replace
3	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]      ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ":   ",  true);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( ":   ",  true);	  cc.addOp(   "?   ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	12	5	replace
4	[BUG]  [BUGGY]  cc.addOp( ":   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]      ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ":   ",  true);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ":   ",  true);	  cc.addOp(   "?   ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	12	5	replace
5	[BUG]  [BUGGY]  cc.addOp( ": ".,  false);  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ": ".,  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ": ".,  false);	  cc.addOp(   "?   ",    false);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
6	[BUG]  [BUGGY]  Node  first  =  n.getLastChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                  ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Node  first  =  n.getLastChild();  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  n.getLastChild();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	10	None	replace
7	[BUG]  [BUGGY]  Node  first  =  context.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                    ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Node  first  =  context.getFirstChild();  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  context.getFirstChild();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	10	None	replace
8	[BUG]  [BUGGY]  Node  first  =  rhsContext.getFirstChild();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                      ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Node  first  =  rhsContext.getFirstChild();  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  rhsContext.getFirstChild();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	10	None	replace
9	[BUG]  [BUGGY]  Node  first  =  n.getNext();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                        ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Node  first  =  n.getNext();  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  n.getNext();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	10	None	replace
10	[BUG]  [BUGGY]  cc.addOp( ": ".equals(p));  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ": ".equals(p));  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ": ".equals(p));	      cc.addOp(   "?   ",    true);    	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	4	None	replace
11	[BUG]  [BUGGY]  cc.addOp( ": ", "true);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ": ", "true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ": ", "true);	      cc.addOp(   "?   ",    true);    	non-compiled	[CE]  unclosed  string  literal	4	None	replace
12	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
13	[BUG]  [BUGGY]      addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        addExpr(last,    1,    rhsContext);    addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
14	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
15	[BUG]  [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
16	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
17	[BUG]  [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
18	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        addExpr(last,    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
19	[BUG]  [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        addExpr(last,    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
20	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
21	[BUG]  [BUGGY]      addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        addExpr(last,    1,    rhsContext);    addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
22	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        addExpr(last,    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
23	[BUG]  [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]              junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        addExpr(last,    1,    rhsContext);    cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
24	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	2	5	replace
25	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	2	5	replace
26	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	2	5	replace
27	[BUG]  [BUGGY]  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	2	5	replace
28	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Context  cc  =  getCurrentContext().getCurrentContext();  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext().getCurrentContext();	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
29	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(context);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Context  cc  =  getCurrentContext(context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext(context);	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
30	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextInstance();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Context  cc  =  getCurrentContextInstance();  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextInstance();	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
31	[BUG]  [BUGGY]  Context  cc  =  getCurrentContext(n);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Context  cc  =  getCurrentContext(n);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContext(n);	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
32	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	addExpr(last,  0,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	23	5	replace
33	[BUG]  [BUGGY]  addExpr(last,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,  0,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	23	5	replace
34	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	23	5	replace
35	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	23	5	replace
36	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ": ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( ": ",  true);  addExpr(last,  0,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	23	5	replace
37	[BUG]  [BUGGY]  cc.addOp( ": ",  true);  addExpr(last,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ": ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ": ",  true);  addExpr(last,  0,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	23	5	replace
38	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	addExpr(first.getNext(),  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	6	5	replace
39	[BUG]  [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first.getNext(),  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	6	5	replace
40	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	6	5	replace
41	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	6	5	replace
42	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	6	5	replace
43	[BUG]  [BUGGY]  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ": ",  true);  addExpr(first.getNext(),  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	6	5	replace
44	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	6	5	replace
45	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  true);  addExpr(first.getNext(),  0,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	6	5	replace
46	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   ",   ",  true);  cc.addOp( ",   ",  true);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   ",   ",    true);    cc.addOp( ",   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	25	5	add
47	[BUG]  [BUGGY]  cc.addOp(   ",   ",  true);  cc.addOp( ",   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   ",   ",  true);  cc.addOp( ",   ",  true);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ",   ",    true);    cc.addOp( ",   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	25	5	add
48	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   ",   ",  true);  cc.addOp( ".,   ",  true);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   ",   ",    true);    cc.addOp( ".,   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	25	5	add
49	[BUG]  [BUGGY]  cc.addOp(   ",   ",  true);  cc.addOp( ".,   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   ",   ",  true);  cc.addOp( ".,   ",  true);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ",   ",    true);    cc.addOp( ".,   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	25	5	add
50	[BUG]  [BUGGY]  cc.addOp(   ",   ",  true);  cc.addOp(, ",   ",  true);  [CE]  illegal  start  of  expression  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   ",   ",  true);  cc.addOp(, ",   ",  true);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ",   ",    true);    cc.addOp(, ",   ",  true);	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
51	[BUG]  [BUGGY]  cc.addOp(   ",   ",  true);  cc.addOp( ",  true);  [CE]  unclosed  string  literal  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   ",   ",  true);  cc.addOp( ",  true);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ",   ",    true);    cc.addOp( ",  true);	  	non-compiled	[CE]  unclosed  string  literal	25	None	add
52	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Preconditions.checkState(childCount  ==  1);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	Preconditions.checkState(childCount  ==  1);	      Preconditions.checkState(childCount    ==    3);    	compilable	  [FE]  IllegalStateException  	16	5	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  1);  [FE]  IllegalStateException  [FE]    ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Preconditions.checkState(childCount  ==  1);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  1);	      Preconditions.checkState(childCount    ==    3);    	compilable	  [FE]  IllegalStateException  	16	5	replace
54	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Preconditions.checkState(childCount  ==  0);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	Preconditions.checkState(childCount  ==  0);	      Preconditions.checkState(childCount    ==    3);    	compilable	  [FE]  IllegalStateException  	16	5	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  0);  [FE]  IllegalStateException  [FE]      ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Preconditions.checkState(childCount  ==  0);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  0);	      Preconditions.checkState(childCount    ==    3);    	compilable	  [FE]  IllegalStateException  	16	5	replace
56	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Preconditions.checkState(childCount  ==  4);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	Preconditions.checkState(childCount  ==  4);	      Preconditions.checkState(childCount    ==    3);    	compilable	  [FE]  IllegalStateException  	16	5	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(childCount  ==  4);  [FE]  IllegalStateException  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Preconditions.checkState(childCount  ==  4);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Preconditions.checkState(childCount  ==  4);	      Preconditions.checkState(childCount    ==    3);    	compilable	  [FE]  IllegalStateException  	16	5	replace
58	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
59	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
60	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	5	None	add
61	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rhsContext);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp('?',  true);  addExpr(first.getNext(),  1,  rhsContext);	  	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	5	None	add
62	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
63	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first.getNext(),  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
64	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	1	5	add
65	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	1	5	add
66	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( ",  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	1	None	add
67	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	1	5	add
68	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	1	5	add
69	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp('?',  true);  addExpr(last,  1,  rhsContext);	  	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	1	None	add
70	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	1	5	add
71	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	1	5	add
72	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ",   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( ",   ",  false);	  cc.addOp(   ",   ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	26	5	replace
73	[BUG]  [BUGGY]  cc.addOp( ",   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ",   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ",   ",  false);	  cc.addOp(   ",   ",    true);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	26	5	replace
74	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	7	5	add
75	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	7	5	add
76	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	7	5	add
77	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	7	5	add
78	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first,  1,  rhsContext);  [CE]  unclosed  string  literal  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( ",  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	7	None	add
79	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	7	5	add
80	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	7	5	add
81	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first,  1,  rhsContext);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp('?',  true);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp('?',  true);  addExpr(first,  1,  rhsContext);	  	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	7	None	add
82	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  context);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  int  p  =  NodeUtil.precedence(type,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type,  context);	      int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	21	None	replace
83	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(childCount);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  int  p  =  NodeUtil.precedence(childCount);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(childCount);	      int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	21	None	replace
84	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  int  p  =  NodeUtil.precedence(type,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type,  rhsContext);	      int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	21	None	replace
85	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(n);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  int  p  =  NodeUtil.precedence(n);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(n);	      int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	21	None	replace
86	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  [CE]  unreachable  statement  [FE]                ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  break;	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  unreachable  statement	9	None	replace
87	[BUG]  [BUGGY]  addExpr(last,  1,  rhsContext);  break;  [CE]  unreachable  statement  [FE]                  ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  addExpr(last,  1,  rhsContext);  break;  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,  1,  rhsContext);  break;	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  unreachable  statement	9	None	replace
88	[BUG]  [BUGGY]  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  break;  [CE]  unreachable  statement  [FE]                    ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  break;  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ": ",  true);  addExpr(last,  1,  rhsContext);  break;	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  unreachable  statement	9	None	replace
89	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  break;  [CE]  unreachable  statement  [FE]                      ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  break;  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  true);  addExpr(first,  1,  rhsContext);  break;	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  unreachable  statement	9	None	replace
90	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	3	5	add
91	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	3	5	add
92	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ".?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    cc.addOp( ".?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	3	5	add
93	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ".?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ".?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    cc.addOp( ".?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	3	5	add
94	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ",?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    cc.addOp( ",?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	3	5	add
95	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ",?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp( ",?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    cc.addOp( ",?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	3	5	add
96	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp('?',  true);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp('?',  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    cc.addOp('?',  true);	  	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	3	None	add
97	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp('?   ",  true);  [CE]  unclosed  character  literal  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  cc.addOp('?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    cc.addOp('?   ",  true);	  	non-compiled	[CE]  unclosed  character  literal	3	None	add
98	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	addExpr(first,  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	8	5	replace
99	[BUG]  [BUGGY]  addExpr(first,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(first,  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	8	5	replace
100	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	8	5	replace
101	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  false);  addExpr(first,  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	8	5	replace
102	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	8	5	replace
103	[BUG]  [BUGGY]  cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ": ",  true);  addExpr(first,  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	8	5	replace
104	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   ".?   ",  false);  cc.addOp( ".?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   ".?   ",    false);    cc.addOp( ".?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	13	5	add
105	[BUG]  [BUGGY]  cc.addOp(   ".?   ",  false);  cc.addOp( ".?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   ".?   ",  false);  cc.addOp( ".?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ".?   ",    false);    cc.addOp( ".?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	13	5	add
106	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   ".?   ",  false);  cc.addOp( ",.?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   ".?   ",    false);    cc.addOp( ",.?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	13	5	add
107	[BUG]  [BUGGY]  cc.addOp(   ".?   ",  false);  cc.addOp( ",.?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   ".?   ",  false);  cc.addOp( ",.?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ".?   ",    false);    cc.addOp( ",.?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	13	5	add
108	[BUG]  [BUGGY]  cc.addOp(   ".?   ",  false);  cc.addOp(. ".?   ",  false);  [CE]  illegal  start  of  expression  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   ".?   ",  false);  cc.addOp(. ".?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ".?   ",    false);    cc.addOp(. ".?   ",  false);	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
109	[BUG]  [BUGGY]  cc.addOp(   ".?   ",  false);  cc.addOp('.?   ",  false);  [CE]  unclosed  character  literal  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   ".?   ",  false);  cc.addOp('.?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   ".?   ",    false);    cc.addOp('.?   ",  false);	  	non-compiled	[CE]  unclosed  character  literal	13	None	add
110	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  ComparisonFailure  	15	1	add
111	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);	  	compilable	  [FE]  ComparisonFailure  	15	1	add
112	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]      ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    3);    int  childCount  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	15	None	add
113	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  3);  Context.checkState(childCount  ==  3);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  3);  Context.checkState(childCount  ==  3);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    3);    Context.checkState(childCount  ==  3);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
114	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type);  [CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  3);  int  childCount  =  NodeUtil.precedence(type);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    3);    int  childCount  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  childCount  is  already  defined  in  method  add(Node,Context)	15	None	add
115	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	15	5	add
116	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  3);  Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    3);    Preconditions.checkState(childCount  ==  3);  cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	15	5	add
117	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	22	5	add
118	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	22	5	add
119	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ",  true);  addExpr(last,  0,  rhsContext);  [CE]  unclosed  string  literal  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( ",  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  unclosed  string  literal	22	None	add
120	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhsContext);  [CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp('?',  true);  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp('?',  true);  addExpr(last,  0,  rhsContext);	  	non-compiled	[CE]  method  addOp  in  class  CodeConsumer  cannot  be  applied  to  given  types;	22	None	add
121	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	22	5	add
122	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	22	5	add
123	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	22	5	add
124	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]            junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	22	5	add
125	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	19	5	add
126	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);	  	compilable	  [FE]  IllegalStateException  	19	5	add
127	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Context.checkState(childCount  ==  2);  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Context.checkState(childCount  ==  2);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    2);    Context.checkState(childCount  ==  2);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
128	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);	  	compilable	  [FE]  IllegalStateException  	19	5	add
129	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  >=  2);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  >=  2);	  	compilable	  [FE]  IllegalStateException  	19	5	add
130	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount!=  2);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);	  	compilable	  [FE]  IllegalStateException  	19	5	add
131	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount!=  2);  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount!=  2);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount!=  2);	  	compilable	  [FE]  IllegalStateException  	19	5	add
132	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	addExpr(last,  p  +  1,  rhsContext);	      addExpr(last,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	18	5	replace
133	[BUG]  [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  addExpr(last,  p  +  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,  p  +  1,  rhsContext);	      addExpr(last,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	18	5	replace
134	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   "?   ",  false);  cc.addOp( "?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   "?   ",    false);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	11	5	add
135	[BUG]  [BUGGY]  cc.addOp(   "?   ",  false);  cc.addOp( "?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   "?   ",  false);  cc.addOp( "?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?   ",    false);    cc.addOp( "?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	11	5	add
136	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   "?   ",  false);  cc.addOp( ".?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   "?   ",    false);    cc.addOp( ".?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	11	5	add
137	[BUG]  [BUGGY]  cc.addOp(   "?   ",  false);  cc.addOp( ".?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   "?   ",  false);  cc.addOp( ".?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?   ",    false);    cc.addOp( ".?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	11	5	add
138	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   "?   ",  false);  cc.addOp( ",?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp(   "?   ",    false);    cc.addOp( ",?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	11	5	add
139	[BUG]  [BUGGY]  cc.addOp(   "?   ",  false);  cc.addOp( ",?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   "?   ",  false);  cc.addOp( ",?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?   ",    false);    cc.addOp( ",?   ",  false);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	11	5	add
140	[BUG]  [BUGGY]  cc.addOp(   "?   ",  false);  cc.addOp('?   ",  false);  [CE]  unclosed  character  literal  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   "?   ",  false);  cc.addOp('?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?   ",    false);    cc.addOp('?   ",  false);	  	non-compiled	[CE]  unclosed  character  literal	11	None	add
141	[BUG]  [BUGGY]  cc.addOp(   "?   ",  false);  cc.addOp(? "?   ",  false);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp(   "?   ",  false);  cc.addOp(? "?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp(   "?   ",    false);    cc.addOp(? "?   ",  false);	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
142	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type  +  1);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  int  p  =  NodeUtil.precedence(type  +  1);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type  +  1);	      int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	21	None	replace
143	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type,  first);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  int  p  =  NodeUtil.precedence(type,  first);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type,  first);	      int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	21	None	replace
144	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(last))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
145	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(n))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
146	[BUG]  [BUGGY]  Node  first  =  n.getFirstChild().getNext();  [CE]  variable  first  is  already  defined  in  method  add(Node,Context)  [FE]                  ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Node  first  =  n.getFirstChild().getNext();  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Node  first  =  n.getFirstChild().getNext();	      Node    first    =    n.getFirstChild();    	non-compiled	[CE]  variable  first  is  already  defined  in  method  add(Node,Context)	10	None	replace
147	[BUG]  [BUGGY]  cc.addOp( "?   ",  true);  cc.addExpr(first.getNext(),  1,  rhsContext);  [CE]  cannot  find  symbol  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  true);  cc.addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  true);  cc.addExpr(first.getNext(),  1,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
148	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	6	5	replace
149	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  false);  addExpr(first.getNext(),  0,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	6	5	replace
150	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	7	5	add
151	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	7	5	add
152	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  addExpr(last,  2,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	addExpr(last,  2,  rhsContext);	      addExpr(last,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	18	5	replace
153	[BUG]  [BUGGY]  addExpr(last,  2,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  addExpr(last,  2,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,  2,  rhsContext);	      addExpr(last,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	18	5	replace
154	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  addExpr(last,  3,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	addExpr(last,  3,  rhsContext);	      addExpr(last,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	18	5	replace
155	[BUG]  [BUGGY]  addExpr(last,  3,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  addExpr(last,  3,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	addExpr(last,  3,  rhsContext);	      addExpr(last,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	18	5	replace
156	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	22	5	add
157	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	22	5	add
158	[BUG]  [BUGGY]  Context  cc  =  getCurrentStatementContext();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Context  cc  =  getCurrentStatementContext();  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentStatementContext();	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
159	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNode();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Context  cc  =  getCurrentContextForNode();  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNode();	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
160	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ":?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( ":?   ",  false);	  cc.addOp(   ".?   ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	14	5	replace
161	[BUG]  [BUGGY]  cc.addOp( ":?   ",  false);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ":?   ",  false);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ":?   ",  false);	  cc.addOp(   ".?   ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	14	5	replace
162	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ".?   ",  true);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( ".?   ",  true);	  cc.addOp(   ".?   ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	14	5	replace
163	[BUG]  [BUGGY]  cc.addOp( ".?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( ".?   ",  true);  [BUGGY]    addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( ".?   ",  true);	  cc.addOp(   ".?   ",    false);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	14	5	replace
164	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  3);  Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount  ==  3);  [CE]  variable  rhsContext  is  already  defined  in  method  add(Node,Context)  [FE]    ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  3);  Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount  ==  3);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    3);    Context  rhsContext  =  Context.OTHER;  Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  variable  rhsContext  is  already  defined  in  method  add(Node,Context)	15	None	add
165	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
166	[BUG]  [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  false);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
167	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
168	[BUG]  [BUGGY]      addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  addExpr(last,  2,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        addExpr(last,    1,    rhsContext);    addExpr(last,  2,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
169	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
170	[BUG]  [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[]?{a:1}:{a:3  	17	5	add
171	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	8	5	replace
172	[BUG]  [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	cc.addOp( "?   ",  false);  addExpr(first,  0,  rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	8	5	replace
173	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
174	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
175	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	1	5	add
176	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(last,  2,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	1	5	add
177	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	1	5	add
178	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  1,  rhsContext);  cc.addOp( "?   ",  true);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    cc.addOp( "?   ",  true);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	1	5	add
179	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]    IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    2);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	19	None	add
180	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	19	5	add
181	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	19	5	add
182	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	19	5	add
183	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    2);    Preconditions.checkState(childCount  ==  2);  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);	  	compilable	  [FE]  IllegalStateException  	19	5	add
184	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]          IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    2);    Integer  p  =  NodeUtil.precedence(type);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	19	None	add
185	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  2);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]            IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  2);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    2);    Integer  p  =  NodeUtil.precedence(type).intValue();  Preconditions.checkState(childCount  ==  2);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	19	None	add
186	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]    IllegalStateException    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  2);  Integer  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    2);    Integer  p  =  NodeUtil.precedence(type);  addExpr(last,  p  +  1,  context);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	19	None	add
187	[BUG]  [BUGGY]  n.addChildToFront(context);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  n.addChildToFront(context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(context);	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
188	[BUG]  [BUGGY]  n.addChildToFront(rhsContext);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]      junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  n.addChildToFront(rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.addChildToFront(rhsContext);	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
189	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  n.getFirstChild().getNext();  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	n.getFirstChild().getNext();	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	2	5	replace
190	[BUG]  [BUGGY]  n.getFirstChild().getNext();  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  [FE]        junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  n.getFirstChild().getNext();  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.getFirstChild().getNext();	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x[?]{a:1}:{a:3  	2	5	replace
191	[BUG]  [BUGGY]  n.removeFirst();  [CE]  cannot  find  symbol  [FE]          junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  n.removeFirst();  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	n.removeFirst();	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
192	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator(context);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNoInOperator(context);	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
193	[BUG]  [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  Context  cc  =  getCurrentContextForNoInOperator();  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	Context  cc  =  getCurrentContextForNoInOperator();	      Context    cc    =    getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
194	[BUG]  [BUGGY]  int  p  =  NodeUtil.precedence(type)-  1;  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]        ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  int  p  =  NodeUtil.precedence(type)-  1;  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	int  p  =  NodeUtil.precedence(type)-  1;	      int    p    =    NodeUtil.precedence(type);    	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	21	None	replace
195	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(rhsContext))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
196	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isExpressionNode(p))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
197	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]  if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	if(NodeUtil.isLiteralValue(type))  {  cc.addOp( "?   ",  true);  addExpr(last,  1,  rhsContext);  break;  }	      cc.addOp(   "?   ",    true);    addExpr(last,    1,    rhsContext);    break;    	non-compiled	[CE]  method  isLiteralValue  in  class  NodeUtil  cannot  be  applied  to  given  types;	9	None	replace
198	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ".?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( ".?   ",  true);  addExpr(last,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	22	5	add
199	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ".?   ",  true);  addExpr(last,  0,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:[]1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(last,  0,  rhsContext);  cc.addOp( ".?   ",  true);  addExpr(last,  0,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(last,    0,    rhsContext);    cc.addOp( ".?   ",  true);  addExpr(last,  0,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	22	5	add
200	[BUG]  [BUGGY]      Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [CE]  variable  p  is  already  defined  in  method  add(Node,Context)  [FE]    ComparisonFailure    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      Preconditions.checkState(childCount  ==  3);  Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        Preconditions.checkState(childCount    ==    3);    Integer  p  =  NodeUtil.precedence(type);  Preconditions.checkState(childCount  ==  3);	  	non-compiled	[CE]  variable  p  is  already  defined  in  method  add(Node,Context)	15	None	add
201	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
202	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?{a:1}[]:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(first.getNext(),    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first.getNext(),  2,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	5	5	add
203	[BUG]  [BUGGY]  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	add	        cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	7	5	add
204	[BUG]  [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  [FE]    junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3    [CONTEXT]    }  break;  }  case  Token.HOOK:  {  Preconditions.checkState(childCount  ==  3);  int  p  =  NodeUtil.precedence(type);  Context  rhsContext  =  Context.OTHER;  addExpr(first,  p  +  1,  context);    [BUGGY]      cc.addOp(   "?   ",  true);  addExpr(first,  1,  rhsContext);  cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);  [BUGGY]    cc.addOp(   "?   ",  true);  addExpr(first.getNext(),  1,  rhsContext);  cc.addOp(   ":   ",  true);  addExpr(last,  1,  rhsContext);  break;  }  case  Token.REGEXP:  if  (!first.isString()  ||  !last.isString())  {  throw  new  Error(   "Expected  children  to  be  strings   ");  [CLASS]  CodeGenerator  Context  [METHOD]  add  [RETURN_TYPE]  void  Node  n  Context  context  [VARIABLES]  Context  BEFORE_DANGLING_ELSE  IN_FOR_INIT_CLAUSE  OTHER  PRESERVE_BLOCK  START_OF_EXPR  STATEMENT  context  rhsContext  LanguageMode  languageMode  boolean  ambiguousElseClause  funcNeedsParens  hasElse  needsParens  preferLineBreaks  preferSingleQuotes  preserveBlock  trustedStrings  double  d  Node  body  c  catchblock  first  fn  last  n  next  parameters  CodeConsumer  cc  consumer  String  GT_ESCAPED  LT_ESCAPED  identifier  key  name  o  opstr  regexp  str  Map  escapedJsStrings  CharsetEncoder  outputCharsetEncoder  int  childCount  p  postProp  precedence  type  char[]  HEX_CHARS  	projects/Closure123/src/com/google/javascript/jscomp/CodeGenerator.java	0.4472135954999579	287	287	1	replace	        cc.addOp(   "?   ",    true);    addExpr(first,    1,    rhsContext);    cc.addOp( "?   ",  true);  addExpr(first,  2,  rhsContext);	  	compilable	  [FE]  junit.framework.ComparisonFailure:  expected:<var  foo=x?[]{a:1}:{a:3  	7	5	add
